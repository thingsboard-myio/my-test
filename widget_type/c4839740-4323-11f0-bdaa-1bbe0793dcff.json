{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "blinking_status_air_list_consumption_temp_link_v3_rodrigo",
    "name" : "Blinking status Air List Consumption/temp link v3",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"status-device-premium\" id=\"{{deviceId}}\">\r\n  <div class=\"left-section\">\r\n    <div class=\"device-name\">üí° {{entityLabel}}</div>\r\n    <img class=\"status-img\" ng-src=\"{{imgUrl}}\" alt=\"Estado\" />\r\n    <div class=\"status-label\">{{statusText}}</div>\r\n  </div>\r\n  <div class=\"right-section\">\r\n    <div class=\"temperature-block\">\r\n      üå°Ô∏è <span class=\"temperature-value\">{{temperature}}¬∞C</span>\r\n    </div>\r\n    <div class=\"consumption-block clickable\"\r\n         data-state=\"{{stateEnergy}}\"\r\n         data-entity-id=\"{{entityId}}\"\r\n         data-entity-type=\"{{entityType}}\">\r\n      ‚ö° <span class=\"consumption-value\">{{consumption}} kW</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
      "templateCss" : ".status-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n  padding: 12px;\r\n}\r\n\r\n.status-device-premium {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  padding: 14px 20px;\r\n  border-radius: 16px;\r\n  background-color: #fff;\r\n  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.06);\r\n  min-height: 120px;\r\n  transition: box-shadow 0.3s ease;\r\n  gap: 16px;\r\n}\r\n\r\n.status-device-premium:hover {\r\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.left-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  gap: 6px;\r\n}\r\n\r\n.device-name {\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.status-img {\r\n  height: 64px;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.status-img.blink {\r\n  animation: blink 1.2s infinite;\r\n}\r\n\r\n.status-label {\r\n  font-size: 0.9rem;\r\n  color: #666;\r\n}\r\n\r\n.right-section {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n  gap: 10px;\r\n}\r\n\r\n.temperature-block,\r\n.consumption-block {\r\n  font-size: 1.1rem;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.temperature-value {\r\n  color: #0072ff;\r\n}\r\n\r\n.consumption-value {\r\n  color: #28a745;\r\n}\r\n\r\n.clickable {\r\n  cursor: pointer;\r\n  transition: background 0.2s ease;\r\n}\r\n\r\n.clickable:hover {\r\n  background-color: rgba(0, 0, 0, 0.04);\r\n  border-radius: 6px;\r\n  padding: 2px 6px;\r\n}\r\n\r\n@keyframes blink {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.4; }\r\n}",
      "controllerScript" : "self.onInit = function () {\r\n  const ctx = self.ctx;\r\n  const settings = ctx.settings || {};\r\n  const threshold = settings.threshold ?? 100;\r\n  const onImg = settings.onImageUrl || '/api/images/public/6ziChYbLxcZuCismHWEBvCWNj6LLUet0';\r\n  const fanImg = settings.fanImageUrl || '/api/images/public/nAqgFLTCDHSyrCaboKq6R31Q45xI4NNT';\r\n  const offImg = settings.offImageUrl || '/api/images/public/V3nAuG6sBlMJAAOeiXWhctFKZzBuo6IL';\r\n  const offlineImg = '/api/images/public/XVSlrbdXz5jAFfYNo4ymvu3jh76Iw6Ag';\r\n\r\n  ctx.tempDevices = {}; // para armazenar temperatura entre onInit e onDataUpdated\r\n  ctx.$container.empty();\r\n  const $main = $('<div class=\"status-container\"></div>');\r\n  ctx.$container.append($main);\r\n\r\n  ctx.data.forEach((ds, index) => {\r\n    if (ctx.data[index].dataKey.name === 'consumption') {\r\n      const entityLabel = ctx.datasources?.[index]?.entityLabel || `Dispositivo ${index + 1}`;\r\n      const deviceId = `device-${index}`;\r\n      const entityId = ctx.datasources?.[index]?.entityId;\r\n      const entityType = ctx.datasources?.[index]?.entityType;\r\n      const deviceData = ctx.data?.[index]?.data?.[0];\r\n      const cons = deviceData && deviceData.length > 1 ? deviceData[1].toFixed(2) : null;\r\n\r\n      const $device = $(`\r\n        <div class=\"status-device-premium\" id=\"${deviceId}\">\r\n          <div class=\"left-section\">\r\n            <div class=\"device-name\">üí° ${entityLabel}</div>\r\n            <img class=\"status-img\" src=\"${offlineImg}\" alt=\"Estado\" />\r\n            <div class=\"status-label\">Carregando...</div>\r\n          </div>\r\n          <div class=\"right-section\">\r\n            <div class=\"temperature-block\">\r\n              üå°Ô∏è <span class=\"temperature-value\">--</span>¬∞C\r\n            </div>\r\n            <div class=\"consumption-block clickable\"\r\n                 data-state=\"${settings.energia}\"\r\n                 data-entity-id=\"${entityId}\"\r\n                 data-entity-type=\"${entityType}\">\r\n              ‚ö° <span class=\"consumption-value\">${cons !== null ? (cons / 1000).toFixed(2) : '-'}</span> kW\r\n            </div>\r\n          </div>\r\n        </div>\r\n      `);\r\n\r\n      $main.append($device);\r\n    }\r\n  });\r\n\r\n  // Eventos de clique\r\n  ctx.$container.on('click', '.consumption-block', function (e) {\r\n    e.preventDefault();\r\n    const targetState = $(this).data('state');\r\n    const entityId = $(this).data('entity-id');\r\n    const entityType = $(this).data('entity-type');\r\n    ctx.stateController.openState(targetState, {\r\n      entityId: { id: entityId, entityType }\r\n    }, false);\r\n  });\r\n\r\n  ctx.$container.on('click', '.status-img', function (e) {\r\n    e.preventDefault();\r\n    const state = settings.state_Online || 'air_detail';\r\n    ctx.stateController.openState(state, {}, false);\r\n  });\r\n};\r\n\r\nself.onDataUpdated = function () {\r\n  const ctx = self.ctx;\r\n\r\n  ctx.data.forEach((ds, index) => {\r\n    try {\r\n      const key = ds.dataKey?.name;\r\n      const label = ds.datasource?.entityLabel || '';\r\n      const deviceId = `device-${index}`;\r\n      const $device = $(`#${deviceId}`, ctx.$container);\r\n\r\n      if (key === 'temperature') {\r\n        const value = ds.data?.[0]?.[1];\r\n        const temp = (typeof value === 'number' && !isNaN(value)) ? value.toFixed(2) : '--';\r\n        ctx.tempDevices[label] = temp;\r\n        $device.find('.temperature-value').text(temp);\r\n      }\r\n\r\n      if (key === 'consumption') {\r\n        const val = ds.data?.[ds.data.length - 1]?.[1];\r\n        const isOn = val > 0;\r\n        const isFan = val <= ctx.settings.threshold;\r\n        const $img = $device.find('img');\r\n        const $label = $device.find('.status-label');\r\n        const $cons = $device.find('.consumption-value');\r\n\r\n        const img = isOn ? (isFan ? fanImg : onImg) : offImg;\r\n        const cor = isOn ? (isFan ? \"#b499eb\" : \"#45b2cc\") : \"#d6dcdd\";\r\n\r\n        $img.attr('src', img).toggleClass('blink', isOn);\r\n        $cons.css('color', cor);\r\n        $label.text(ctx.tempDevices[label] || '--');\r\n      }\r\n    } catch (e) {\r\n      console.error('Erro ao atualizar dispositivo:', e);\r\n    }\r\n  });\r\n};\r\n",
      "settingsSchema" : "{\r\n  \"schema\": {\r\n    \"type\": \"object\",\r\n    \"title\": \"Settings\",\r\n    \"properties\": {\r\n        \"state\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"Dashboard Dashboard state\",\r\n        \"default\": \"\"\r\n        },\r\n        \"state_Online\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"Dashboard Dashboard state Online\",\r\n        \"default\": \"\"\r\n        },\r\n        \"energia\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de energia\",\r\n        \"default\": \"\"\r\n        }\r\n    }\r\n  }\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Blinking status Air List Consumption/temp link v3 - Rodrigo\",\"decimals\":null}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "c4839740-4323-11f0-bdaa-1bbe0793dcff"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}