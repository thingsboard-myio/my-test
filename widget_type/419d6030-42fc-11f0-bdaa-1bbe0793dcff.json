{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "blinking_status_air_list_consumption_temp_link_v2",
    "name" : "Blinking status Air List Consumption/temp link V2",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"status-device\">\r\n  \r\n  <div class=\"status-header\">{{entityLabel}}</div>\r\n  <img class=\"status-img\" ng-src=\"{{imgUrl}}\" alt=\"Estado\" />\r\n  <div class=\"status-label\">{{statusText}}</div>\r\n  \r\n</div>\r\n",
      "templateCss" : ".status-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: stretch;\r\n  justify-content: flex-start;\r\n  gap: 12px;\r\n  padding: 10px;\r\n  height: 100%;\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  overflow-y: auto;\r\n}\r\n\r\n.status-device {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  border: 2px solid #ddd;\r\n  border-radius: 12px;\r\n  padding: 10px;\r\n  background-color: #fff;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\r\n  text-align: center;\r\n}\r\n\r\n.status-img {\r\n  height: 80px;\r\n  max-width: 100%;\r\n  transition: opacity 0.3s ease-in-out;\r\n}\r\n\r\n.blink {\r\n  animation: blink 1.2s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.3; }\r\n}\r\n\r\n.status-label {\r\n  margin-top: 6px;\r\n  font-size: 1em;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.status-header {\r\n  font-size: 0.85em;\r\n  color: #666;\r\n  margin-bottom: 6px;\r\n  font-weight: 500;\r\n}\r\n.energy {\r\n    margin-left: 60px;\r\n    font-size: 170%;\r\n    font-weight: bolder;\r\n    color: #333;\r\n  }\r\n\r\n.energy.clickable, \r\n.energy.clickable * {\r\n  cursor: pointer !important;\r\n  user-select: none; /* evita o cursor tipo texto */\r\n}\r\n\r\n  .energy.clickable:hover {\r\n    background-color: rgba(0, 0, 0, 0.05);\r\n  }",
      "controllerScript" : "self.onInit = function () {\r\n  const ctx = self.ctx;\r\n  const settings = ctx.settings || {};\r\n\r\n  const threshold = settings.threshold ?? 100;\r\n  const onImg = settings.onImageUrl || '/api/images/public/6ziChYbLxcZuCismHWEBvCWNj6LLUet0';\r\n  const fanImg = settings.fanImageUrl || '/api/images/public/nAqgFLTCDHSyrCaboKq6R31Q45xI4NNT';\r\n  const offImg = settings.offImageUrl || '/api/images/public/V3nAuG6sBlMJAAOeiXWhctFKZzBuo6IL';\r\n  const offlineImg = '/api/images/public/XVSlrbdXz5jAFfYNo4ymvu3jh76Iw6Ag';\r\n\r\n  // Inject CSS\r\n  const style = document.createElement('style');\r\n  style.innerHTML = `/* CSS anterior aqui */`;\r\n  document.head.appendChild(style);\r\n\r\n  // Create main container\r\n  ctx.$container.empty();\r\n  const $main = $('<div class=\"status-container\"></div>');\r\n  ctx.$container.append($main);\r\n\r\n\r\n\r\n  // Render placeholders para cada device\r\n  ctx.data.forEach((ds, index) => {\r\n    const datasource = ctx.data[index]?.datasource; // acessa com seguranÃ§a\r\n  const entityLabel = datasource?.entityLabel || '';\r\n  const stateEnergy = settings.energia\r\n  let state = entityLabel.includes(\"Online\") \r\n    ? settings.state_Online\r\n    : settings.state;\r\n    if(ctx.data[index].dataKey.name==='consumption'){\r\n        \r\n        const entityLabel = ctx.datasources?.[index]?.entityLabel || `Dispositivo ${index + 1}`;\r\n        const deviceId = `device-${index}`;\r\n        let entityId = ctx.datasources?.[index]?.entityId || ctx.data[index]?.datasource?.entityId;\r\n        let entityType = ctx.datasources?.[index]?.entityId || ctx.data[index]?.datasource?.entityType;\r\n        let deviceData =ctx.data?.[index]?.data?.[0]\r\n        let consuption = null;\r\n        if (deviceData && deviceData.length > 1) {\r\n            consuption = deviceData[1].toFixed(2);\r\n            \r\n        } else {\r\n          console.log(\"deviceData nÃ£o tem Ã­ndice 1\");\r\n        }\r\n        console.log(\"data\", ctx.datasources?.[index]);\r\n        const $device = $(`\r\n  \r\n          <div class=\"status-device\" id=\"${deviceId}\">\r\n            <div class=\"status clickable\" data-state=\"${state}\" role=\"buttom\">\r\n                <div class=\"status-header\">ðŸ’¡ ${entityLabel}</div>\r\n                <img class=\"status-img\" src=\"${offlineImg}\" alt=\"Estado\" />\r\n                <div class=\"status-label\">Carregando...</div>\r\n            </div>\r\n              <div class=\"energy clickable\" \r\n                 data-state=\"${stateEnergy}\" \r\n                 data-entity-id=\"${entityId}\" \r\n                 data-entityTupe = \"${entityType}\"\r\n                 role=\"button\">\r\n              <span class=\"energy-icon\">âš¡</span> \r\n              ${consuption !== null ? (consuption / 1000).toFixed(2) : ' - '} kW\r\n            </div>\r\n\r\n          </div>\r\n        \r\n      \r\n        `);\r\n    \r\n        $main.append($device);\r\n    }\r\n    ctx.$container.on('click', '.status', function(e) {\r\n      e.preventDefault();\r\n     \r\n      const targetState = $(this).data('state') || 'air_detail';\r\n      ctx.stateController.openState(targetState, {}, false);\r\n    });\r\nctx.$container.on('click', '.energy', function(e) {\r\n  e.preventDefault();\r\n\r\n  const targetState = $(this).data('state');\r\n  const entityId = $(this).data('entity-id'); // string\r\n  const entityType = $(this).data('entity-type'); // string\r\n    console.log(entityType)\r\n  ctx.stateController.openState(targetState, {\r\n    entityId: {\r\n      id: entityId,\r\n      entityType: entityType  // jÃ¡ vem do HTML corrigido\r\n    }\r\n  }, false);\r\n});\r\n\r\n\r\n\r\n  });\r\n\r\n  self.onDataUpdated = function () {\r\nconst tempDevices = {}; // Objeto, nÃ£o array\r\n\r\nctx.data.forEach((ds, index) => {\r\n    try {\r\n        const dataKeyName = ctx.data[index]?.dataKey?.name;\r\n        if (dataKeyName === \"temperature\") {\r\n            const dataEntry = ctx.data[index]?.data?.[0];\r\n            const valor = dataEntry ? dataEntry[1] : null;\r\n\r\n            // Se valor for null ou nÃ£o for nÃºmero, atribui null\r\n            const valorFormatado = (typeof valor === 'number' && !isNaN(valor)) ? valor.toFixed(2) : null;\r\n\r\n            const entityLabel = ctx.data[index]?.datasource?.entityLabel || \"\";\r\n\r\n            if (entityLabel.includes(\"Online\") || entityLabel.includes(\"CD\")) {\r\n                tempDevices[\"Online\"] = valorFormatado;\r\n            } else {\r\n                tempDevices[\"Comum\"] = valorFormatado;\r\n            }\r\n        }\r\n    } catch (e) {\r\n        // Em caso de erro, define valor null para ambas as chaves, sÃ³ para garantir\r\n        tempDevices[\"Online\"] = null;\r\n        tempDevices[\"Comum\"] = null;\r\n        console.error(\"Erro ao processar temperatura:\", e);\r\n    }\r\n});\r\n\r\n\r\n\r\n    console.log(\"TEMP\",tempDevices)\r\n    try {\r\n      ctx.data.forEach((ds, index) => {\r\n          \r\n        const data = ds.data;\r\n        const deviceId = `device-${index}`;\r\n        const $device = $(`#${deviceId}`, ctx.$container);\r\n        const $img = $device.find('img');\r\n        const $label = $device.find('.status-label');\r\n        const $vertical = $device.find('.vertical');\r\n        const $status = $device.find('.status');\r\n        const $energyIcon = $device.find('.energy-icon');\r\n        const $energySpam = $device.find('.energy');\r\n        const dataKeySettings = ds.dataKey?.settings || {};\r\n        const $viewDetails = $device.find('.view-details');\r\n        const value = data && data.length ? data[data.length - 1][1] : null;\r\n\r\n        if (value == null || isNaN(value)) {\r\n          $img.attr('src', offlineImg).removeClass('blink');\r\n          $label.text(dataKeySettings.noDataText || 'Sem dados');\r\n          $energySpam.css('color','#d86262');\r\n          return;\r\n        }\r\n    \r\n        const isOn = value > 0;\r\n        const isFanMode = value <= threshold;\r\n        const imgToShow = isOn ? (isFanMode ? fanImg : onImg) : offImg;\r\n        console.log(\"imgToShow\",imgToShow)\r\n        const colorText = isOn ? (isFanMode ? \"#b499eb\" : \"#45b2cc\") : \"#d6dcdd\";\r\n        $energyIcon.toggleClass('blink', isOn);\r\n        $energySpam.css('color',colorText);\r\n        $img.attr('src', imgToShow);\r\n        $img.toggleClass('blink', isOn);\r\n        $label.text(ctx.data[index].datasource.entityLabel.includes(\"Online\")?tempDevices[\"Online\"] :tempDevices[\"Comum\"]);\r\n        $viewDetails.text(ctx.data[index].datasource.entityLabel.includes(\"Online\")?tempDevices[\"Online\"] :tempDevices[\"Comum\"]);\r\n        $status.css({\r\n          'cursor': 'pointer',\r\n          'user-select': 'none',\r\n          'background-color': '',\r\n        });\r\n        $energySpam.css({\r\n          'cursor': 'pointer',\r\n          'user-select': 'none',\r\n          'background-color': '',\r\n          'margin-left': 'auto',\r\n          'margin-right': '10%',\r\n           'float': 'right'\r\n\r\n        });\r\n\r\n        $device.css({\r\n          'display': 'flex',\r\n          'justify-content': 'space-between', // separa os elementos\r\n          'align-items': 'center'\r\n        });\r\n      });\r\n        \r\n    } catch (err) {\r\n      console.error('Erro ao atualizar estados mÃºltiplos:', err);\r\n    }\r\n  };\r\n};\r\n",
      "settingsSchema" : "{\r\n  \"schema\": {\r\n    \"type\": \"object\",\r\n    \"title\": \"Settings\",\r\n    \"properties\": {\r\n        \"state\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"Dashboard Dashboard state\",\r\n        \"default\": \"\"\r\n        },\r\n        \"state_Online\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"Dashboard Dashboard state Online\",\r\n        \"default\": \"\"\r\n        },\r\n        \"energia\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de energia\",\r\n        \"default\": \"\"\r\n        }\r\n    }\r\n  }\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Blinking status Air List Consumption/temp link V2\",\"decimals\":null}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "419d6030-42fc-11f0-bdaa-1bbe0793dcff"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}