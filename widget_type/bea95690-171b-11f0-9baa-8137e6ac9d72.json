{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "hist_rico_de_consumo_lojas_gua_",
    "name" : "Histórico de Consumo Lojas (Água)",
    "deprecated" : false,
    "image" : "tb-image;/api/images/tenant/Capturar_(31).PNG",
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 14,
      "sizeY" : 11.5,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      } ],
      "templateHtml" : "<div class=\"wat\">\r\n    <header id=\"ReportHeader\">\r\n    <div>\r\n\r\n        <img src=\"https://myio.com.br/app/uploads/2020/05/Logotest01.png\" alt=\"Myio\" id=\"Myio\" />\r\n        <p>Sistema Myio | Registro de Consumo | {{storeName}} | Identificador: {{deviceId}} </p>\r\n        <p>{{subtitle}}</p>\r\n        <p>Data de Emissão: {{emissionDate}}<span id=\"issue-date\"></span></p>\r\n        <button class=\"hide-in-pdf button\" (click)=\"downloadPDF()\">\r\n            <i class=\"fa-solid fa-file-arrow-down\" style=\"color: #0a0a0a;\"></i>\r\n        </button>\r\n        <button class=\"hide-in-csv button\" (click)=\"downloadCSV()\">\r\n            <i class=\"fa-solid fa-file-csv\" style=\"color: #0a0a0a;\"></i>\r\n        </button>\r\n    </div>\r\n    <div id=\"datePicker\">\r\n    <mat-form-field class=\"example-form-field hide-in-pdf\">\r\n      <mat-label>Selecione um intervalo</mat-label>\r\n      <mat-date-range-input [rangePicker]=\"rangePicker\">\r\n        <input matStartDate placeholder=\"Data Inicial\" \r\n               (dateChange)=\"handleStartDateChange($event)\">\r\n        <input matEndDate placeholder=\"Data Final\" \r\n               (dateChange)=\"handleEndDateChange($event)\">\r\n      </mat-date-range-input>\r\n      <mat-datepicker-toggle matIconSuffix [for]=\"rangePicker\"></mat-datepicker-toggle>\r\n      <mat-date-range-picker #rangePicker>\r\n        <mat-date-range-picker-actions>\r\n          <button mat-button matDateRangePickerCancel>Cancelar</button>\r\n          <button mat-raised-button matDateRangePickerApply>Selecionar</button>\r\n        </mat-date-range-picker-actions>\r\n      </mat-date-range-picker>\r\n    </mat-form-field>\r\n    </div>\r\n    </header>\r\n    <div id=\"main\" class=\"loading\" *ngIf=\"loading\">\r\n        <mat-progress-spinner mode=\"indeterminate\" color=\"accent\" style=\"width: 32px;\"></mat-progress-spinner>\r\n    </div>\r\n    <mat-table [dataSource]=\"dados\" matSort class=\"mat-elevation-z8\">\r\n\r\n      <ng-container matColumnDef=\"formattedDate\" >\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Data</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\" class='column-date'> {{ row.formattedDate }}  </mat-cell>\r\n      </ng-container>\r\n        \r\n      <ng-container matColumnDef=\"day\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Dia da Semana</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\"> {{ row.day }}  </mat-cell>\r\n      </ng-container>\r\n      \r\n      <ng-container matColumnDef=\"avg\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Consumo Médio Horário (m³)</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\"> {{ row.avgConsumption }} m³ </mat-cell>\r\n      </ng-container>\r\n      \r\n      <ng-container matColumnDef=\"minDemand\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Consumo Mínimo Horário (m³)</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\"> {{ row.minDemand }} m³ </mat-cell>\r\n      </ng-container>\r\n      \r\n      <ng-container matColumnDef=\"maxDemand\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Consumo Máximo Horário (m³)</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\"> {{ row.maxDemand }} m³ </mat-cell>\r\n      </ng-container>\r\n      \r\n      \r\n      <ng-container matColumnDef=\"m3\">\r\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Consumo do dia (m³)</mat-header-cell>\r\n        <mat-cell *matCellDef=\"let row\"> {{ row.totalConsumption }} m³ </mat-cell>\r\n      </ng-container>\r\n      \r\n      \r\n      <mat-header-row *matHeaderRowDef=\"['formattedDate','day', 'avg','minDemand','maxDemand','m3']\"></mat-header-row>\r\n      <mat-row *matRowDef=\"let row; columns: ['formattedDate','day', 'avg','minDemand','maxDemand','m3']\"></mat-row>\r\n      \r\n    </mat-table>\r\n</div>",
      "templateCss" : "#container {\r\n    overflow-y: auto;\r\n}\r\n\r\n#main.loading {\r\n    height: 100%;\r\n    width: 100%;\r\n    padding: 0;\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n}\r\n\r\n#Myio{\r\n    width: 150px;\r\n    background-color: #3e1a7d;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n}\r\n\r\n#ReportHeader{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    padding: 5px;\r\n}\r\n\r\np{\r\n    font-size: 13px;\r\n    margin: 0;\r\n    font-family: Roboto;\r\n}\r\n\r\n.button{\r\n    all: unset;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 40px;\r\n}\r\n\r\n.example-form-field{\r\n    margin: 0;\r\n}\r\n\r\n.column-date {\r\n    width: 15%; \r\n}\r\n\r\n.hide-in-csv.button{\r\n    right: 60px;\r\n}\r\n\r\n",
      "controllerScript" : "/* jshint esversion: 11 */\n//Aferição de consumo\n//kwh\nconst DAYS = [ \"Domingo\", \"Segunda-feira\", \"Terça-feira\", \"Quarta-feira\", \"Quinta-feira\", \"Sexta-feira\", \"Sábado\"];\nconst MONTHS = [\"janeiro\", \"fevereiro\", \"março\", \"abril\", \"maio\", \"junho\", \"julho\", \"agosto\", \"setembro\", \"outubro\", \"novembro\", \"dezembro\"];\nconst PURPLE_COLOR = [92, 48, 125];\nconst STRIPE_COLOR = [245, 247, 250];\nconst PAGE_MARGIN = 10;\nconst LINE_HEIGHT = 10;\nconst LOGO_URL = 'https://dashboard.myio-bas.com/api/images/public/TAfpmF6jEKPDi6hXHbnMUT8MWOHv5lKD';\n\n// State management\nconst state = {\n    startDate: null,\n    endDate: null,\n    currentRequest: null,\n    loading: false\n};\n\nfunction exportToCSV(reportData) {\n    if (!reportData?.length) {\n        alert('Erro: Nenhum dado disponível para exportar.');\n        return;\n    }\n\n    const rows = [\n        ['Data', 'Dia da Semana', 'Consumo Médio (m³)', 'Consumo Mínimo (m³)', 'Consumo Máximo (m³)', 'Consumo (m³)']\n    ];\n\n    reportData.forEach(data => {\n        rows.push([\n            data.formattedDate,\n            data.day,\n            data.avgConsumption,\n            data.minDemand,\n            data.maxDemand,\n            data.totalConsumption\n        ]);\n    });\n\n    const csvContent = \"data:text/csv;charset=utf-8,\" + rows.map(e => e.join(\";\")).join(\"\\n\");\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodeURI(csvContent));\n    link.setAttribute(\"download\", `registro_consumo_loja${reportData[0].name}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\nfunction exportToPDF(reportData, startDate, endDate, deviceId) {\n    if (!reportData?.length) {\n        alert('Erro: Nenhum dado disponível para exportar.');\n        return;\n    }\n\n    const doc = new window.jspdf.jsPDF();\n    const pageWidth = doc.internal.pageSize.width;\n    const pageHeight = doc.internal.pageSize.height;\n    const colWidth = (pageWidth - 2 * PAGE_MARGIN) / 6;\n\n    function addHeader() {\n        doc.setFillColor(...PURPLE_COLOR);\n        doc.rect(0, 0, pageWidth, 50, 'F');\n\n        const logoHeight = 25;\n        const logoWidth = Math.round(logoHeight * (512 / 194));\n        const logoX = 15;\n        const logoY = 12;\n\n        doc.addImage(LOGO_URL, 'PNG', logoX, logoY, logoWidth, logoHeight);\n\n        const textStartX = logoX + logoWidth + 20;\n        const availableWidth = pageWidth - textStartX - 15;\n        const textCenterX = textStartX + availableWidth / 2;\n \n        doc.setFontSize(12);\n        doc.setTextColor(255, 255, 255);\n        doc.text('Sistema Myio | Registro de Consumo m³', textCenterX, 10, { align: 'center' });\n        doc.text(`${reportData[0].name} | Identificador: ${deviceId}`, textCenterX, 18, { align: 'center' });\n        doc.text(`${self.ctx.$scope.subtitle}`, textCenterX, 26, { align: 'center' });\n        doc.text(`Data de Emissão: ${new Date().toLocaleDateString('pt-BR')}`, textCenterX, 34, { align: 'center' });\n\n        const fromDate = new Date(startDate.setDate(startDate.getDate()+1)).toLocaleDateString('pt-BR');\n        const toDate = new Date(endDate.setDate(endDate.getDate() - 1)).toLocaleDateString('pt-BR');\n        doc.text(`Período de ${fromDate} até ${toDate}`, textCenterX, 42, { align: 'center' });\n    }\n\n    function addTableHeader(startY) {\n        doc.setFillColor(...PURPLE_COLOR);\n        doc.rect(PAGE_MARGIN, startY, pageWidth - 2 * PAGE_MARGIN, LINE_HEIGHT, 'F');\n\n        const headers = ['Data', 'Dia da Semana', 'Consumo Médio (m³)', 'Consumo Mínimo (m³)', 'Consumo Máximo (m³)', 'Consumo (m³)'];\n        doc.setTextColor(255, 255, 255);\n        doc.setFontSize(10);\n        headers.forEach((header, i) => {\n            doc.text(header, PAGE_MARGIN + i * colWidth + colWidth / 2, startY + 7, { align: 'center' });\n        });\n    }\n\n    function addTableRow(rowData, startY, isStriped) {\n        if (isStriped) {\n            doc.setFillColor(...STRIPE_COLOR);\n            doc.rect(PAGE_MARGIN, startY, pageWidth - 2 * PAGE_MARGIN, LINE_HEIGHT, 'F');\n        }\n\n        rowData.forEach((text, i) => {\n            doc.setTextColor(0, 0, 0);\n            doc.text(String(text), PAGE_MARGIN + i * colWidth + colWidth / 2, startY + 7, { align: 'center' });\n        });\n    }\n\n    addHeader();\n\n    let startY = 60;\n    addTableHeader(startY);\n    startY += LINE_HEIGHT;\n\n    reportData.forEach((data, index) => {\n        if (startY > pageHeight - 20) {\n            doc.addPage();\n            startY = 20;\n            addTableHeader(startY);\n            startY += LINE_HEIGHT;\n        }\n\n        const rowData = [\n            data.formattedDate || '-',\n            data.day || '-',\n            `${data.avgConsumption} m³`,\n            `${data.minDemand} m³`,\n            `${data.maxDemand} m³`,\n            `${data.totalConsumption} m³`,\n        ];\n\n        addTableRow(rowData, startY, index % 2 === 0);\n        startY += LINE_HEIGHT;\n    });\n\n    doc.setFontSize(10);\n    doc.setTextColor(0, 0, 0);\n    doc.text(`Página 1 de 1`, pageWidth / 2, pageHeight - 10, { align: 'center' });\n\n    doc.save(`registro_consumo_loja${reportData[0].name}.pdf`);\n}\n\nasync function getData() {\n    if (state.loading) return;\n    \n    const deviceName = self.ctx.data[0].datasource.name.replace(/\\s*\\([^)]*\\)\\s*$/, '');\n    const centralId = self.ctx.data[0].data[0][1];\n    console.log(\"deviceName\",deviceName)\n    if (!state.startDate || !state.endDate) {\n        alert('Por favor, selecione datas de início e fim.');\n        return;\n    }\n\n    state.loading = true;\n    self.ctx.$scope.loading = true;\n    self.ctx.detectChanges();\n\n    try {\n        if (state.currentRequest) {\n            state.currentRequest.cancel();\n        }\n\n        const $http = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('http'));\n        const name = encodeURIComponent(deviceName);\n        \n        console.log({\n            startDate: state.startDate,\n            endDate: state.endDate,\n        })\n        \n        \n        state.currentRequest = $http.get(\n            `https://${centralId}.y.myio.com.br/api/dash_api/demand_pulses/${name}/${state.startDate.getTime()}/${state.endDate.getTime()}`,\n            { timeout: 30000 }\n        );\n\n        const consumptionData = await state.currentRequest.toPromise();\n\n        const processedData = consumptionData.map(dayData => {\n            const date = new Date(dayData.consumption_date);\n            const day = date.getDate();\n            const dayOfWeek = date.getDay();\n            const month = MONTHS[date.getMonth()];\n            const year = date.getFullYear();\n            const formattedDate = date.toLocaleDateString('pt-BR');\n            \n            \n\n            return {\n                day: DAYS[dayOfWeek],\n                totalConsumption: dayData.total_consumption_m3,\n                avgConsumption: dayData.avg_m3_per_hour,\n                formattedDate: formattedDate,\n                minDemand: dayData.min_hourly_consumption_m3,\n                hourMin: dayData.hour_of_min_consumption,\n                hourMax: dayData.hour_of_max_consumption,\n                maxDemand: dayData.max_hourly_consumption_m3,\n                name: deviceName\n            };\n        });\n        \n        self.ctx.$scope.dados = processedData;\n    } catch (error) {\n        if (error.name !== 'CancellationError') {\n            console.error('Error processing data:', error);\n            alert('Erro ao processar dados. Por favor, tente novamente.');\n        }\n    } finally {\n        state.loading = false;\n        self.ctx.$scope.loading = false;\n        state.currentRequest = null;\n        self.ctx.detectChanges();\n    }\n}\n\n\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\nconst debouncedGetData = debounce(getData, 300);\n\nfunction handleStartDateChange(event) {\n    const date = new Date(event.value);\n    date.setHours(0, 0, 0, 0); // Start of the day, local time\n    state.startDate = date;\n    self.ctx.$scope.startDate = date;\n    \n    if (state.startDate && state.endDate) {\n        debouncedGetData();\n    }\n}\n\nfunction handleEndDateChange(event) {\n    const date = new Date(event.value);\n    date.setHours(23, 59, 59, 999); // End of the selected day\n    state.endDate = date;\n    self.ctx.$scope.endDate = date;\n    if (state.startDate && state.endDate) {\n        debouncedGetData();\n    }\n}\n\nasync function getServerDeviceId() {\n    try {\n        const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n        const firstDevice = self.ctx.data[0];\n        \n        if (!firstDevice) {\n            console.warn('Nenhum dispositivo encontrado nos dados.');\n            return null;\n        }\n\n        const deviceId = firstDevice.datasource.entityId;\n        const deviceEntityId = { id: deviceId, entityType: 'DEVICE' };\n\n        const attributes = await attributeService.getEntityAttributes(deviceEntityId, 'SERVER_SCOPE', ['deviceId']).toPromise();\n        const deviceIdAttr = attributes.find(attr => attr.key === 'deviceId');\n\n        if (!deviceIdAttr) {\n            console.warn('Atributo deviceId não encontrado no escopo SERVER_SCOPE.');\n            return null;\n        }\n\n        return deviceIdAttr.value;\n        \n    } catch (error) {\n        console.error('Erro ao obter deviceId:', error);\n        return null;\n    }\n}\n\nself.onInit = async function () {\n    const entityLabel = self.ctx.datasources[0].entityLabel\n    const deviceId = await getServerDeviceId();\n    self.ctx.$scope.deviceId = deviceId;   \n    self.ctx.$scope.emissionDate = new Date().toLocaleDateString('pt-BR');\n    \n    if (!self.ctx.datasources?.length || !self.ctx.data?.length) {\n        console.warn('No datasources or data available');\n        return;\n    }\n\n    try {\n        const device = {\n            name: self.ctx.datasources[0].entityLabel,\n            ...self.ctx.data.reduce((acc, device) => {\n                if (device?.data?.[0]?.[1]) {\n                    acc[device.dataKey.name] = device.data[0][1];\n                }\n                return acc;\n            }, {})\n        };\n        self.ctx.$scope.storeName = entityLabel;\n        self.ctx.$scope.device = device;\n        self.ctx.$scope.subtitle = self.ctx.settings.subtitle;\n        self.ctx.$scope.handleStartDateChange = handleStartDateChange;\n        self.ctx.$scope.handleEndDateChange = handleEndDateChange;\n        \n        self.ctx.$scope.downloadPDF = () => {\n            if (self.ctx.$scope.dados?.length) {\n                exportToPDF(self.ctx.$scope.dados, state.startDate, state.endDate, deviceId);\n            } else {\n                alert(\"Sem dados disponíveis para exportar.\");\n            }\n        };\n\n        self.ctx.$scope.downloadCSV = () => {\n            if (self.ctx.$scope.dados?.length) {\n                exportToCSV(self.ctx.$scope.dados);\n            } else {\n                alert(\"Sem dados disponíveis para exportar.\");\n            }\n        };\n    } catch (error) {\n        console.error('Error during initialization:', error);\n    }\n    \n    self.ctx.detectChanges();\n};\n\nself.onDataUpdated = function() {\n    self.ctx.detectChanges();\n};\n",
      "settingsSchema" : "{\r\n  \"schema\": {\r\n    \"type\": \"object\",\r\n    \"title\": \"Settings\",\r\n    \"properties\": {\r\n      \"links\": {\r\n        \"type\": \"array\",\r\n        \"title\": \"Configuração dos Links\",\r\n        \"items\": {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"link\": {\r\n              \"title\": \"CentralID\",\r\n              \"type\": \"string\",\r\n              \"default\": \"\"\r\n            }\r\n          }\r\n        },\r\n        \"minItems\": 1,\r\n        \"maxItems\": 30\r\n      },\r\n      \"subtitle\": {\r\n        \"type\": \"string\",\r\n        \"title\": \"Subtítulo do Relatório\",\r\n        \"properties\": {\r\n          \"subtitles\": {\r\n            \"type\": \"string\",\r\n            \"title\": \"Subtítulo do Relatório\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
      "dataKeySettingsSchema" : "{}\n",
      "hasBasicMode" : false,
      "defaultConfig" : "{\"showTitle\":false,\"backgroundColor\":\"#FFFFFF\",\"color\":\"rgb(0, 0, 0)\",\"padding\":\"8px\",\"settings\":{\"centralId\":\"6354365436543654-Sdvzs2f5dbv4z2sd5f4v3z6d\"},\"title\":\"Histórico de Consumo Lojas (Água)\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"borderRadius\":\"10px\",\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"enableDataExport\":false,\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.25096343243849395,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}}}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "bea95690-171b-11f0-9baa-8137e6ac9d72"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}