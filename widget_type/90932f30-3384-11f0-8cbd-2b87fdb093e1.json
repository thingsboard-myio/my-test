{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "energy2",
    "name" : "Energy",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 11,
      "sizeY" : 8.5,
      "resources" : [ {
        "url" : "https://graphs.ingestion.myio-bas.com/sdk/energy-chart-sdk.umd.js"
      } ],
      "templateHtml" : "",
      "templateCss" : "",
      "controllerScript" : "// Helper function to format a millisecond timestamp to YYYY-MM-DD\nfunction formatDateToYMD(timestampMs) {\n    const date = new Date(timestampMs);\n    const year = date.getFullYear();\n    const month = ('0' + (date.getMonth() + 1)).slice(-2); // Months are 0-indexed\n    const day = ('0' + date.getDate()).slice(-2);\n    return `${year}-${month}-${day}`;\n}\n\n// Helper function to determine a suitable interval based on time duration\nfunction determineInterval(startTimeMs, endTimeMs) {\n    const durationMs = endTimeMs - startTimeMs;\n    const durationDays = durationMs / (1000 * 60 * 60 * 24);\n\n    if (durationDays > 60) { // More than ~2 months\n        return '1 month';\n    } else if (durationDays > 2) { // More than 2 days\n        return '1 day';\n    } else { // 2 days or less\n        return '1 hour';\n    }\n}\n\nself.onInit = async function() {\n    self.chartInstance = null;\n    self.chartContainerElement = document.createElement('div');\n    self.chartContainerElement.style.width = '100%';\n    self.chartContainerElement.style.height = '100%';\n    self.chartContainerElement.style.minHeight = '300px'; // Ensure a minimum height\n    self.ctx.$container.append(self.chartContainerElement);\n\n    try {\n        const attributeService = self.ctx.$scope.$injector.get(\n            self.ctx.servicesMap.get('attributeService'));\n    \n        console.log(self.ctx.defaultSubscription.data[0]\n            .datasource);\n    \n        const { entityId, entityType } = self.ctx.defaultSubscription.data[0]\n            .datasource;\n    \n        const deviceAttributes = await attributeService.getEntityAttributes(\n            { id: entityId, entityType },\n            'SERVER_SCOPE',\n            ['centralId', 'slaveId']\n        ).toPromise();\n        \n        const centralId = deviceAttributes.find(attribute => attribute.key === 'centralId').value;\n        const slaveId = deviceAttributes.find(attribute => attribute.key === 'centralId').value;\n        \n        self.ctx.$scope.centralId = centralId;\n        self.ctx.$scope.slaveId = slaveId;\n\n        initChart(slaveId, centralId);\n    } catch (e) {\n        console.error('Device missing ')\n    }\n};\n\nfunction initChart(slaveId, centralId) {\n    // Destroy previous instance if it exists\n    if (self.chartInstance && typeof self.chartInstance.destroy === 'function') {\n        self.chartInstance.destroy();\n        self.chartInstance = null;\n    }\n    // Ensure container is clean (SDK's destroy should handle iframe, but good practice)\n    if (self.chartContainerElement) {\n        self.chartContainerElement.innerHTML = '';\n    }\n\n    let renderGraph;\n    if (window.EnergyChartSDK && typeof window.EnergyChartSDK.renderGraph === 'function') {\n        renderGraph = window.EnergyChartSDK.renderGraph;\n    } else {\n        console.error('EnergyChartSDK not loaded!');\n        if (self.chartContainerElement) {\n            self.chartContainerElement.innerHTML = '<div style=\"padding: 20px; text-align: center; color: red;\">EnergyChartSDK not loaded. Check widget configuration and browser console.</div>';\n        }\n        return;\n    }\n\n    const settings = self.ctx.settings || {};\n    const timeWindow = self.ctx.timeWindow;\n    console.log('time window: ', timeWindow)\n\n    if (!timeWindow) {\n        console.error('Time window is not available.');\n        if (self.chartContainerElement) {\n             self.chartContainerElement.innerHTML = '<div style=\"padding: 20px; text-align: center; color: orange;\">Time window not available for chart.</div>';\n        }\n        return;\n    }\n\n    const gatewayId = centralId;\n    if (isNaN(slaveId)) {\n        slaveId = 101; // Default if not set or invalid\n        if (slaveIdInput !== undefined) {\n             console.warn(`Invalid slaveId attribute: \"${slaveIdInput}\". Using default ${slaveId}.`);\n        }\n    }\n    \n    const startDate = formatDateToYMD(timeWindow.startTimeMs);\n    const endDate = formatDateToYMD(timeWindow.endTimeMs);\n    const interval = determineInterval(timeWindow.startTimeMs, timeWindow.endTimeMs);\n    const theme = settings.theme || 'light';\n    const apiBaseUrl = settings.apiBaseUrl || 'https://ingestion.myio-bas.com'; // Default\n\n    console.log(`Initializing chart with: gatewayId=${gatewayId}, slaveId=${slaveId}, startDate=${startDate}, endDate=${endDate}, interval=${interval}, theme=${theme}, apiBaseUrl=${apiBaseUrl}`);\n\n    self.chartInstance = renderGraph(self.chartContainerElement, {\n        gatewayId: gatewayId,\n        slaveId: slaveId,\n        startDate: startDate,\n        endDate: endDate,\n        interval: interval,\n        theme: theme,\n        timezone: settings.timezone || 'America/Sao_Paulo', // Make timezone configurable\n        iframeBaseUrl: settings.iframeBaseUrl || 'https://graphs.ingestion.myio-bas.com', // Make iframeBaseUrl configurable\n        apiBaseUrl: apiBaseUrl,\n        chartPath: settings.chartPath || '/embed/energy-bar' // Make chartPath configurable\n    });\n\n    // Attach event listeners if SDK supports it\n    if (self.chartInstance && typeof self.chartInstance.on === 'function') {\n        self.chartInstance.on('drilldown', (data) => {\n            console.log('SDK Drilldown Event:', data);\n            // Example: Emit custom event for ThingsBoard dashboard actions\n            // self.ctx.actionsApi.handleWidgetAction({ actionIdentifier: 'customDrilldown', dataContext: data });\n        });\n        self.chartInstance.on('error', (errorData) => {\n            console.error('SDK Error Event:', errorData);\n             if (self.chartContainerElement) {\n                self.chartContainerElement.innerHTML = `<div style=\"padding: 20px; text-align: center; color: red;\">Chart Error: ${errorData.message || 'Unknown error'}</div>`;\n            }\n        });\n    } else if(self.chartInstance) {\n        console.warn(\"EnergyChartSDK instance does not have an 'on' method for event listeners.\");\n    }\n}\n\nself.onTimewindowChanged = function(newTimeWindow) {\n    if (self.chartInstance && typeof self.chartInstance.changePeriod === 'function') {\n        const startDate = formatDateToYMD(newTimeWindow.startTimeMs);\n        const endDate = formatDateToYMD(newTimeWindow.endTimeMs);\n        const interval = determineInterval(newTimeWindow.startTimeMs, newTimeWindow.endTimeMs);\n        \n        console.log(`Time window changed. Updating chart to: startDate=${startDate}, endDate=${endDate}, interval=${interval}`);\n        self.chartInstance.changePeriod(startDate, endDate, interval);\n    } else if (!self.chartInstance) {\n        // If chart wasn't initialized for some reason (e.g., SDK loaded late, or initial error)\n        console.log('Time window changed, but chart not initialized. Attempting to initialize.');\n        initChart();\n    } else {\n        console.warn(\"chartInstance.changePeriod is not a function. Re-initializing for time window change.\");\n        initChart(); // Fallback to re-init if changePeriod is not available\n    }\n};\n\nself.onSettingsChanged = function(previousSettings, newSettings) {\n    const oldGatewayId = previousSettings.centralId || 'f476d770-675e-4730-8b73-afb6bba2060d';\n    const newGatewayId = newSettings.centralId || 'f476d770-675e-4730-8b73-afb6bba2060d';\n    \n    let oldSlaveId = parseInt(previousSettings.slaveId);\n    if (isNaN(oldSlaveId)) oldSlaveId = 101;\n    let newSlaveId = parseInt(newSettings.slaveId);\n    if (isNaN(newSlaveId)) newSlaveId = 101;\n\n    const oldApiBaseUrl = previousSettings.apiBaseUrl || 'https://ingestion.myio-bas.com';\n    const newApiBaseUrl = newSettings.apiBaseUrl || 'https://ingestion.myio-bas.com';\n    \n    const oldIframeBaseUrl = previousSettings.iframeBaseUrl || 'https://graphs.ingestion.myio-bas.com';\n    const newIframeBaseUrl = newSettings.iframeBaseUrl || 'https://graphs.ingestion.myio-bas.com';\n\n    const oldChartPath = previousSettings.chartPath || '/embed/energy-bar';\n    const newChartPath = newSettings.chartPath || '/embed/energy-bar';\n\n    // If these crucial settings change, re-initialize the entire chart\n    if (newGatewayId !== oldGatewayId || \n        newSlaveId !== oldSlaveId || \n        newApiBaseUrl !== newApiBaseUrl ||\n        newIframeBaseUrl !== oldIframeBaseUrl ||\n        newChartPath !== oldChartPath) {\n        console.log('Key settings (centralId, slaveId, apiBaseUrl, iframeBaseUrl, or chartPath) changed. Re-initializing chart.');\n        initChart();\n    } else if (self.chartInstance && typeof self.chartInstance.updateOptions === 'function') {\n        const oldTheme = previousSettings.theme || 'light';\n        const newTheme = newSettings.theme || 'light';\n        const oldTimezone = previousSettings.timezone || 'America/Sao_Paulo';\n        const newTimezone = newSettings.timezone || 'America/Sao_Paulo';\n\n        let optionsToUpdate = {};\n        if (newTheme !== oldTheme) {\n            optionsToUpdate.theme = newTheme;\n        }\n        if (newTimezone !== oldTimezone) {\n            optionsToUpdate.timezone = newTimezone;\n        }\n\n        if (Object.keys(optionsToUpdate).length > 0) {\n            console.log('Theme or timezone changed. Updating chart options:', optionsToUpdate);\n            self.chartInstance.updateOptions(optionsToUpdate);\n        }\n    } else if (self.chartInstance) {\n         console.warn(\"chartInstance.updateOptions is not available. Re-initializing for settings change.\");\n         initChart(); // Fallback if updateOptions isn't available\n    }\n};\n\n// Standard ThingsBoard widget lifecycle methods\nself.onDataUpdated = function() {\n    // Called when historical data is updated.\n    // If your chart needs to react to external data source changes (not just time window or settings),\n    // you might refresh or update it here.\n};\n\nself.onLatestDataUpdated = function() {\n    // Called when real-time data/latest telemetry is updated.\n};\n\nself.onMobileModeChanged = function() {\n    // Handle mobile mode changes if necessary\n};\n\nself.onHasTimewindowChanged = function() {\n    // Called when the widget's \"has timewindow\" state changes\n};\n\nself.onResize = function() {\n    // The chart iframe should be responsive.\n    // If specific resize handling is needed for the SDK instance:\n    // if (self.chartInstance && typeof self.chartInstance.resize === 'function') {\n    //     self.chartInstance.resize();\n    // }\n};\n\nself.onDestroy = function() {\n    if (self.chartInstance && typeof self.chartInstance.destroy === 'function') {\n        self.chartInstance.destroy();\n        self.chartInstance = null;\n    }\n    if (self.chartContainerElement && self.chartContainerElement.parentNode) {\n        // Clean up the container DIV we created\n        self.chartContainerElement.parentNode.removeChild(self.chartContainerElement);\n        self.chartContainerElement = null;\n    }\n};\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "tb-value-card-widget-settings",
      "latestDataKeySettingsDirective" : "",
      "hasBasicMode" : true,
      "basicModeDirective" : "",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"aggregationType\":null,\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#FFC107\",\"settings\":{\"type\":\"bar\"},\"_hash\":0.5534217244004682,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"aggregationType\":null,\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]},\"latestDataKeys\":null}],\"timewindow\":{\"hideAggregation\":false,\"hideAggInterval\":false,\"hideTimezone\":false,\"selectedTab\":0,\"realtime\":{\"realtimeType\":0,\"timewindowMs\":60000,\"quickInterval\":\"CURRENT_DAY\",\"interval\":1000},\"aggregation\":{\"type\":\"AVG\",\"limit\":25000},\"timezone\":null},\"showTitle\":true,\"backgroundColor\":\"rgba(0, 0, 0, 0)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"showLegend\":true,\"legendConfig\":{\"direction\":\"column\",\"position\":\"top\",\"sortDataKeys\":false,\"showMin\":false,\"showMax\":false,\"showAvg\":true,\"showTotal\":false,\"showLatest\":false},\"thresholds\":[],\"dataZoom\":true,\"stack\":false,\"yAxis\":{\"show\":true,\"label\":\"\",\"labelFont\":{\"family\":\"Roboto\",\"size\":12,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"600\",\"lineHeight\":\"1\"},\"labelColor\":\"rgba(0, 0, 0, 0.54)\",\"position\":\"left\",\"showTickLabels\":true,\"tickLabelFont\":{\"family\":\"Roboto\",\"size\":12,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"400\",\"lineHeight\":\"1\"},\"tickLabelColor\":\"rgba(0, 0, 0, 0.54)\",\"showTicks\":true,\"ticksColor\":\"rgba(0, 0, 0, 0.54)\",\"showLine\":true,\"lineColor\":\"rgba(0, 0, 0, 0.54)\",\"showSplitLines\":true,\"splitLinesColor\":\"rgba(0, 0, 0, 0.12)\"},\"xAxis\":{\"show\":true,\"label\":\"\",\"labelFont\":{\"family\":\"Roboto\",\"size\":12,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"600\",\"lineHeight\":\"1\"},\"labelColor\":\"rgba(0, 0, 0, 0.54)\",\"position\":\"bottom\",\"showTickLabels\":true,\"tickLabelFont\":{\"family\":\"Roboto\",\"size\":10,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"400\",\"lineHeight\":\"1\"},\"tickLabelColor\":\"rgba(0, 0, 0, 0.54)\",\"ticksFormat\":{},\"showTicks\":true,\"ticksColor\":\"rgba(0, 0, 0, 0.54)\",\"showLine\":true,\"lineColor\":\"rgba(0, 0, 0, 0.54)\",\"showSplitLines\":true,\"splitLinesColor\":\"rgba(0, 0, 0, 0.12)\"},\"legendLabelFont\":{\"family\":\"Roboto\",\"size\":12,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"400\",\"lineHeight\":\"16px\"},\"legendLabelColor\":\"rgba(0, 0, 0, 0.76)\",\"showTooltip\":true,\"tooltipTrigger\":\"axis\",\"tooltipValueFont\":{\"family\":\"Roboto\",\"size\":12,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"500\",\"lineHeight\":\"16px\"},\"tooltipValueColor\":\"rgba(0, 0, 0, 0.76)\",\"tooltipShowDate\":true,\"tooltipDateFormat\":{\"format\":null,\"lastUpdateAgo\":false,\"custom\":false,\"auto\":true,\"autoDateFormatSettings\":{}},\"tooltipDateFont\":{\"family\":\"Roboto\",\"size\":11,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"400\",\"lineHeight\":\"16px\"},\"tooltipDateColor\":\"rgba(0, 0, 0, 0.76)\",\"tooltipDateInterval\":true,\"tooltipBackgroundColor\":\"rgba(255, 255, 255, 0.76)\",\"tooltipBackgroundBlur\":4,\"background\":{\"type\":\"color\",\"color\":\"#fff\",\"overlay\":{\"enabled\":false,\"color\":\"rgba(255,255,255,0.72)\",\"blur\":3}},\"yAxes\":{\"default\":{\"units\":null,\"decimals\":0,\"show\":true,\"label\":\"\",\"labelFont\":{\"family\":\"Roboto\",\"size\":12,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"600\",\"lineHeight\":\"1\"},\"labelColor\":\"rgba(0, 0, 0, 0.54)\",\"position\":\"left\",\"showTickLabels\":true,\"tickLabelFont\":{\"family\":\"Roboto\",\"size\":12,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"400\",\"lineHeight\":\"1\"},\"tickLabelColor\":\"rgba(0, 0, 0, 0.54)\",\"ticksFormatter\":null,\"showTicks\":true,\"ticksColor\":\"rgba(0, 0, 0, 0.54)\",\"showLine\":true,\"lineColor\":\"rgba(0, 0, 0, 0.54)\",\"showSplitLines\":true,\"splitLinesColor\":\"rgba(0, 0, 0, 0.12)\",\"id\":\"default\",\"order\":0}},\"noAggregationBarWidthSettings\":{\"strategy\":\"group\",\"groupWidth\":{\"relative\":true,\"relativeWidth\":2,\"absoluteWidth\":1000},\"barWidth\":{\"relative\":true,\"relativeWidth\":2,\"absoluteWidth\":1000}},\"animation\":{\"animation\":true,\"animationThreshold\":2000,\"animationDuration\":500,\"animationEasing\":\"cubicOut\",\"animationDelay\":0,\"animationDurationUpdate\":300,\"animationEasingUpdate\":\"cubicOut\",\"animationDelayUpdate\":0},\"padding\":\"12px\"},\"title\":\"Time series chart\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":null,\"mobileHeight\":null,\"configMode\":\"basic\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\",\"useDashboardTimewindow\":false,\"displayTimewindow\":true,\"titleFont\":{\"size\":16,\"sizeUnit\":\"px\",\"family\":\"Roboto\",\"weight\":\"500\",\"style\":\"normal\",\"lineHeight\":\"24px\"},\"titleColor\":\"rgba(0, 0, 0, 0.87)\",\"titleTooltip\":\"\",\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"units\":\"\",\"decimals\":null,\"noDataDisplayMessage\":\"\",\"timewindowStyle\":{\"showIcon\":false,\"iconSize\":\"24px\",\"icon\":null,\"iconPosition\":\"left\",\"font\":{\"size\":12,\"sizeUnit\":\"px\",\"family\":\"Roboto\",\"weight\":\"400\",\"style\":\"normal\",\"lineHeight\":\"16px\"},\"color\":\"rgba(0, 0, 0, 0.38)\",\"displayTypePrefix\":true},\"margin\":\"0px\",\"borderRadius\":\"0px\",\"iconSize\":\"0px\"}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "90932f30-3384-11f0-8cbd-2b87fdb093e1"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}