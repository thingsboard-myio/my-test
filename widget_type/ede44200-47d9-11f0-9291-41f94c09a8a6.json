{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "blinking_air_list_with_consumption_and_temperature_floor_selected_v_1_0_0",
    "name" : "Blinking Air List With Consumption and Temperature - FLOOR SELECTED - v.1.0.0",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"device-card-centered\" id=\"device-0\">\r\n  <div class=\"device-title\">sem dispositivo</div>\r\n  <img class=\"device-image blink\" src=\"...\" />\r\n  <div class=\"device-data-row\">\r\n    <div class=\"temperature\">üå°Ô∏è <span>--¬∞C</span></div>\r\n    <div class=\"consumption clickable\"\r\n         data-state=\"air_detail\"\r\n         data-entity-id=\"...\"\r\n         data-entity-type=\"ASSET\">\r\n      ‚ö° <span>-- kW</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
      "templateCss" : ".status-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 6px;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.device-card-centered {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-radius: 12px;\r\n  background: #fff;\r\n  padding: 6px;\r\n  box-shadow: 0px 10px 10px rgba(0,0,0,0.06), 0px -6px 6px rgba(0,0,0,0.04);\r\n  text-align: center;\r\n  width: 99%;\r\n  max-width: 100%;\r\n  margin: 0 2px 12px 2px;\r\n  cursor: pointer;\r\n  transition: box-shadow 0.2s ease, transform 0.1s ease;\r\n}\r\n\r\n.device-card-centered:hover {\r\n  box-shadow: 0px 8px 24px rgba(0,0,0,0.12), 0px -4px 16px rgba(0,0,0,0.08);\r\n  transform: scale(1.1);\r\n}\r\n\r\n.device-title {\r\n  font-weight: bold;\r\n  font-size: 0.9rem;\r\n  margin-bottom: 6px;\r\n  color: #333;\r\n}\r\n\r\n/* Alinha imagem e dados lado a lado */\r\n.device-direction {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: flex-start; /* em vez de space-between */\r\n  width: 100%;\r\n  gap: 8px; /* menor gap */\r\n}\r\n\r\n/* Tamanho fixo da imagem */\r\n.device-image {\r\n  width: 90px;\r\n  height: 90px;\r\n  object-fit: contain;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n/* Dados (temperatura e consumo) alinhados ao centro vertical da imagem */\r\n.device-data-row {\r\n  padding-left: 0; /* remover espa√ßamento */\r\n  align-items: flex-start;\r\n}\r\n\r\n/* Temperatura */\r\n.temperature {\r\n  font-size: 0.9rem;\r\n  margin: 2px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.temperature span {\r\n  color: #007bff;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Consumo */\r\n.consumption {\r\n  font-size: 0.9rem;\r\n  margin: 2px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.consumption span {\r\n  color: #28a745;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Efeito blink (para motores ligados) */\r\n.blink {\r\n  animation: blink 1.2s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.3; }\r\n}\r\n",
      "controllerScript" : "// --- CONFIGURA√á√ÉO E CONSTANTES ---\nconst DEBUG = false;\nconst MinConsumption = 5;\n\nfunction log(...args) {\n  if (DEBUG) console.log('[DEBUG]', ...args);\n}\n\nconst noDevice = '/api/images/public/g7phsMSdCo51gWcoJgi3QrKUSwj9njtC';\nconst offlineImg = '/api/images/public/XVSlrbdXz5jAFfYNo4ymvu3jh76Iw6Ag';\nconst offImg = '/api/images/public/V3nAuG6sBlMJAAOeiXWhctFKZzBuo6IL';\nconst fanImg = '/api/images/public/4A8Sk4WP8QuPqyxwZXCF9I08HxQsbKBy';\nconst onImg = '/api/images/public/6ziChYbLxcZuCismHWEBvCWNj6LLUet0';\nconst arSelfContainedOffImg = '/api/images/public/G5ldxE6QEljmGxLyUGkjHQt3ddUtbPax';\nconst arSelfContainedFanImg = '/api/images/public/nAqgFLTCDHSyrCaboKq6R31Q45xI4NNT';\nconst arSelfContainedOnImg = '/api/images/public/Huwu3DqdnwB1N9mqlcSRsWzKUD3dPwtJ';\n\n// --- FUN√á√ïES AUXILIARES ---\nfunction getGrupoFromLabel(label) {\n  if (typeof label !== 'string') return null;\n  const lower = label.toLowerCase();\n  if (lower.includes('sala online')) return 'Sala Online';\n  const arMatch = lower.match(/ar\\s*(\\d{1,2})/);\n  if (arMatch) {\n    const num = arMatch[1].padStart(2, '0');\n    return `√Årea Comum ${num}`;\n  }\n  return null;\n}\n\nfunction getImageByState(isSalaOnline, isOn, isFan) {\n  if (isSalaOnline) return isOn ? (isFan ? fanImg : onImg) : offImg;\n  return isOn ? (isFan ? arSelfContainedFanImg : arSelfContainedOnImg) : arSelfContainedOffImg;\n}\n\nfunction createCard(label, entityId, entityType, state, imageUrl, backColor) {\n  const safeId = `card-${label.replace(/\\s+/g, '_')}`;\n  const $card = $(`\n    <div class=\"device-card-centered clickable\"\n         id=\"${safeId}\"\n         data-state=\"${state}\"\n         data-entity-id=\"${entityId}\"\n         data-entity-type=\"${entityType}\">\n      <div class=\"device-title\">üìç ${label}</div>\n      <div class=\"device-direction\">\n        <img class=\"device-image\" src=\"${imageUrl}\" />\n        <div class=\"device-data-row\">\n          <div class=\"temperature\">üå°Ô∏è <span>--¬∞C</span></div>\n          <div class=\"consumption\">‚ö° <span>-- kW</span></div>\n        </div>\n      </div>\n    </div>\n  `);\n  if (backColor) $card.css('background-color', backColor);\n  return $card;\n}\n\nfunction updateCardConsumption(ctx, label, val) {\n  const entry = ctx.entityMap[label];\n  if (!entry) return;\n\n  const isOn = val > MinConsumption;\n  const isFan = val > MinConsumption && val <= ctx.settings.threshold;\n  const isSalaOnline = /sala online/i.test(label.toLowerCase());\n\n  const img = getImageByState(isSalaOnline, isOn, isFan);\n  const color = isOn ? (isFan ? '#b499eb' : '#45b2cc') : '#d6dcdd';\n  const consumoText = typeof val === 'number' ? (val === 0 ? '0.00 kW' : `${(val).toFixed(2)} kW`) : '-- kW';\n\n  entry.el.find('.device-image').attr('src', img).toggleClass('blink', isOn);\n  entry.el.find('.consumption span').text(consumoText).css('color', color);\n  entry.consumption = consumoText;\n}\n\nfunction applySharedTemperatures(ctx) {\n  Object.entries(ctx.temperaturesByGroup).forEach(([grupo, tempText]) => {\n    const labels = ctx.groupToLabelsMap[grupo] || [];\n    labels.forEach(label => {\n      const entry = ctx.entityMap[label];\n      if (entry) {\n        entry.el.find('.temperature span').text(tempText);\n        entry.temperature = tempText;\n      }\n    });\n  });\n}\n\n// --- M√âTODOS PADR√ÉO DO WIDGET ---\nself.onInit = function () {\n  const ctx = self.ctx;\n  ctx.entityMap = {};\n  ctx.temperaturesByGroup = {};\n  ctx.groupToLabelsMap = {};\n  ctx.$container.empty();\n  const settings = ctx.settings || {};\n  const $main = $('<div class=\"status-container\"></div>');\n  ctx.$container.append($main);\n\n  const grouped = {};\n  ctx.data.forEach(ds => {\n    const label = ds.datasource?.entityLabel;\n    if (!label) return;\n\n    const key = ds.dataKey?.label?.toLowerCase() || '';\n    const grupo = getGrupoFromLabel(label);\n    if (!grupo) return;\n\n    if (!grouped[grupo]) grouped[grupo] = { ares: [], tempLabel: null };\n\n    if (key.includes('temperatura')) {\n      grouped[grupo].tempLabel = label;\n    } else {\n      grouped[grupo].ares.push(ds);\n    }\n  });\n\n  const ordem = ['√Årea Comum 01', '√Årea Comum 02', '√Årea Comum 03', 'Sala Online'];\n  const gruposOrdenados = Object.keys(grouped).sort((a, b) => {\n    const ia = ordem.indexOf(a);\n    const ib = ordem.indexOf(b);\n    return (ia === -1 ? 99 : ia) - (ib === -1 ? 99 : ib);\n  });\n\n  gruposOrdenados.forEach(grupo => {\n    const { ares } = grouped[grupo];\n    if (ares.length === 0) return;\n\n    ares.forEach(ds => {\n      const label = ds.datasource.entityLabel;\n      const entityId = ds.datasource.entityId;\n      const entityType = ds.datasource.entityType;\n      const isOnline = /sala online/i.test(label.toLowerCase());\n      const backColor = ds.dataKey?.settings?.backGroundColor;\n      const state = isOnline ? settings.split : settings.self_contained;\n      const imgToShow = noDevice;\n\n      const $card = createCard(grupo, entityId, entityType, state, imgToShow, backColor);\n      ctx.entityMap[label] = { el: $card, label, temperature: null, consumption: null };\n      ctx.groupToLabelsMap[grupo] = ctx.groupToLabelsMap[grupo] || [];\n      ctx.groupToLabelsMap[grupo].push(label);\n      $main.append($card);\n    });\n  });\n\n  ctx.$container.on('click', '.device-card-centered', function (e) {\n    e.preventDefault();\n    const targetState = $(this).data('state');\n    const entityId = $(this).data('entity-id');\n    const entityType = $(this).data('entity-type');\n    if (entityId && entityType && targetState) {\n      ctx.stateController.openState(targetState, {\n        entityId: { id: entityId, entityType }\n      }, false);\n    }\n  });\n};\n\nself.onDataUpdated = function () {\n  const ctx = self.ctx;\n  ctx.data.forEach(ds => {\n    try {\n      const label = ds.datasource?.entityLabel;\n      const key = ds.dataKey?.name;\n      const val = ds.data?.[ds.data.length - 1]?.[1];\n      const isValidNumber = typeof val === 'number' && !isNaN(val);\n\n      const grupo = getGrupoFromLabel(label);\n      if (!grupo) return;\n\n      if (key === 'temperature') {\n        const tempText = isValidNumber ? `${val.toFixed(2)}¬∞C` : '--¬∞C';\n        ctx.temperaturesByGroup[grupo] = tempText;\n        applySharedTemperatures(ctx);\n      }\n\n      if (key === 'consumption') {\n        updateCardConsumption(ctx, label, val);\n      }\n    } catch (err) {\n      log('Erro onDataUpdated:', err);\n    }\n  });\n};",
      "settingsSchema" : "{\r\n  \"schema\": {\r\n    \"type\": \"object\",\r\n    \"title\": \"Settings\",\r\n    \"properties\": {\r\n        \"self_contained\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de Ar Tipo Self Contained\",\r\n        \"default\": \"\"\r\n        },\r\n        \"split\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de Ar Tipo Split\",\r\n        \"default\": \"\"\r\n        },\r\n        \"threshold\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"Potencia que configura o start do compressor\",\r\n        \"default\": \"\"\r\n        }\r\n    }\r\n  }\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Blinking Air List With Consumption and Temperature - FLOOR SELECTED - v.1.0.0\",\"decimals\":null}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "ede44200-47d9-11f0-9291-41f94c09a8a6"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}