{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "blinking_air_list_with_consumption_and_temperature_floor_selected_v_1_0_0",
    "name" : "Blinking Air List With Consumption and Temperature - FLOOR SELECTED - v.1.0.0",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"device-card-centered\" id=\"device-0\">\r\n  <div class=\"device-title\">sem dispositivo</div>\r\n  <img class=\"device-image blink\" src=\"...\" />\r\n  <div class=\"device-data-row\">\r\n    <div class=\"temperature\">üå°Ô∏è <span>--¬∞C</span></div>\r\n    <div class=\"consumption clickable\"\r\n         data-state=\"air_detail\"\r\n         data-entity-id=\"...\"\r\n         data-entity-type=\"ASSET\">\r\n      ‚ö° <span>-- kW</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
      "templateCss" : ".status-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 6px;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.device-card-centered {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-radius: 12px;\r\n  background: #fff;\r\n  padding: 6px;\r\n  box-shadow: 0px 10px 10px rgba(0,0,0,0.06), 0px -6px 6px rgba(0,0,0,0.04);\r\n  text-align: center;\r\n  width: 99%;\r\n  max-width: 100%;\r\n  margin: 0 2px 12px 2px;\r\n  cursor: pointer;\r\n  transition: box-shadow 0.2s ease, transform 0.1s ease;\r\n}\r\n\r\n.device-card-centered:hover {\r\n  box-shadow: 0px 8px 24px rgba(0,0,0,0.12), 0px -4px 16px rgba(0,0,0,0.08);\r\n  transform: scale(1.1);\r\n}\r\n\r\n.device-title {\r\n  font-weight: bold;\r\n  font-size: 0.9rem;\r\n  margin-bottom: 6px;\r\n  color: #333;\r\n}\r\n\r\n/* Alinha imagem e dados lado a lado */\r\n.device-direction {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: flex-start; /* em vez de space-between */\r\n  width: 100%;\r\n  gap: 8px; /* menor gap */\r\n}\r\n\r\n/* Tamanho fixo da imagem */\r\n.device-image {\r\n  width: 90px;\r\n  height: 90px;\r\n  object-fit: contain;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n/* Dados (temperatura e consumo) alinhados ao centro vertical da imagem */\r\n.device-data-row {\r\n  padding-left: 0; /* remover espa√ßamento */\r\n  align-items: flex-start;\r\n}\r\n\r\n/* Temperatura */\r\n.temperature {\r\n  font-size: 0.9rem;\r\n  margin: 2px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.temperature span {\r\n  color: #007bff;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Consumo */\r\n.consumption {\r\n  font-size: 0.9rem;\r\n  margin: 2px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.consumption span {\r\n  color: #28a745;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Efeito blink (para motores ligados) */\r\n.blink {\r\n  animation: blink 1.2s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.3; }\r\n}\r\n",
      "controllerScript" : "const DEBUG = true;\r\nconst MinConsumption = 5;\r\n\r\nfunction log(...args) {\r\n  if (DEBUG) console.log('[DEBUG]', ...args);\r\n}\r\n\r\nconst noDevice = '/api/images/public/g7phsMSdCo51gWcoJgi3QrKUSwj9njtC';\r\nconst offImg = '/api/images/public/V3nAuG6sBlMJAAOeiXWhctFKZzBuo6IL';\r\nconst onImg = '/api/images/public/6ziChYbLxcZuCismHWEBvCWNj6LLUet0';\r\n\r\nfunction getGrupoFromLabel(label) {\r\n  const lower = label?.toLowerCase() || '';\r\n  if (lower.includes('sala online')) return 'Sala Online';\r\n  const arMatch = lower.match(/ar\\s*(\\d{1,2})/);\r\n  if (arMatch) {\r\n    const num = arMatch[1].padStart(2, '0');\r\n    return `√Årea Comum ${num}`;\r\n  }\r\n  if (lower.includes('temperatura √°rea comum')) return '√Årea Comum';\r\n  return null;\r\n}\r\n\r\nfunction createCard(grupo, temp, consumo, imageUrl) {\r\n  const safeId = `card-${grupo.replace(/\\s+/g, '_')}`;\r\n  const $card = $(`\r\n    <div class=\"device-card-centered clickable\" id=\"${safeId}\" data-grupo=\"${grupo}\">\r\n      <div class=\"device-title\">üìç ${grupo}</div>\r\n      <div class=\"device-direction\">\r\n        <img class=\"device-image\" src=\"${imageUrl}\" />\r\n        <div class=\"device-data-row\">\r\n          <div class=\"temperature\">üå°Ô∏è <span>${temp ?? '--'}¬∞C</span></div>\r\n          <div class=\"consumption\">‚ö° <span>${consumo ?? '--'} kW</span></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `);\r\n  return $card;\r\n}\r\n\r\nself.onInit = function () {\r\n  const ctx = self.ctx;\r\n  ctx.$container.empty();\r\n  const $main = $('<div class=\"status-container\"></div>');\r\n  ctx.$container.append($main);\r\n  ctx.cardsByGrupo = {};\r\n\r\n  const dados = ctx.data || [];\r\n  const tempPorGrupo = {};\r\n  const consumoPorGrupo = {};\r\n\r\n  dados.forEach(ds => {\r\n    const label = ds.datasource?.entityLabel;\r\n    const key = ds.dataKey?.name;\r\n    const val = ds.data?.at(-1)?.[1];\r\n    const grupo = getGrupoFromLabel(label);\r\n    if (!grupo) return;\r\n\r\n    if (key === 'temperature' && typeof val === 'number') {\r\n      tempPorGrupo[grupo] = val.toFixed(2);\r\n    }\r\n\r\n    if (key === 'consumption' && typeof val === 'number') {\r\n      const consumoKW = (val / 1000).toFixed(2);\r\n      consumoPorGrupo[grupo] = consumoKW;\r\n    }\r\n  });\r\n\r\n  const gruposComDados = Array.from(new Set([\r\n    ...Object.keys(tempPorGrupo),\r\n    ...Object.keys(consumoPorGrupo)\r\n  ]));\r\n\r\n  const ordemDesejada = ['√Årea Comum 01', '√Årea Comum 02', '√Årea Comum', 'Sala Online'];\r\n\r\n  gruposComDados\r\n    .sort((a, b) => ordemDesejada.indexOf(a) - ordemDesejada.indexOf(b))\r\n    .forEach(grupo => {\r\n      const temp = tempPorGrupo[grupo] ?? tempPorGrupo['√Årea Comum'];\r\n      const consumo = consumoPorGrupo[grupo];\r\n      const isOn = consumo && parseFloat(consumo) > MinConsumption;\r\n      const img = consumo ? (isOn ? onImg : offImg) : noDevice;\r\n      const $card = createCard(grupo, temp, consumo, img);\r\n      ctx.cardsByGrupo[grupo] = $card;\r\n      $main.append($card);\r\n    });\r\n};\r\n\r\nself.onDataUpdated = function () {\r\n  const ctx = self.ctx;\r\n  const dados = ctx.data || [];\r\n  const tempPorGrupo = {};\r\n  const consumoPorGrupo = {};\r\n\r\n  dados.forEach(ds => {\r\n    const label = ds.datasource?.entityLabel;\r\n    const key = ds.dataKey?.name;\r\n    const val = ds.data?.at(-1)?.[1];\r\n    const grupo = getGrupoFromLabel(label);\r\n    if (!grupo || typeof val !== 'number') return;\r\n\r\n    if (key === 'temperature') {\r\n      tempPorGrupo[grupo] = val.toFixed(2);\r\n    }\r\n\r\n    if (key === 'consumption') {\r\n      consumoPorGrupo[grupo] = (val / 1000).toFixed(2);\r\n    }\r\n  });\r\n\r\n  for (const grupo in ctx.cardsByGrupo) {\r\n    const $card = ctx.cardsByGrupo[grupo];\r\n    const temp = tempPorGrupo[grupo] ?? tempPorGrupo['√Årea Comum'];\r\n    const consumo = consumoPorGrupo[grupo];\r\n    const isOn = consumo && parseFloat(consumo) > MinConsumption;\r\n    const img = consumo ? (isOn ? onImg : offImg) : noDevice;\r\n\r\n    // Atualiza DOM\r\n    $card.find('.temperature span').text(`${temp ?? '--'}¬∞C`);\r\n    $card.find('.consumption span').text(`${consumo ?? '--'} kW`);\r\n    $card.find('.device-image')\r\n      .attr('src', img)\r\n      .toggleClass('blink', isOn);\r\n  }\r\n};\r\n",
      "settingsSchema" : "{\r\n  \"schema\": {\r\n    \"type\": \"object\",\r\n    \"title\": \"Settings\",\r\n    \"properties\": {\r\n        \"self_contained\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de Ar Tipo Self Contained\",\r\n        \"default\": \"\"\r\n        },\r\n        \"split\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de Ar Tipo Split\",\r\n        \"default\": \"\"\r\n        },\r\n        \"threshold\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"Potencia que configura o start do compressor\",\r\n        \"default\": \"\"\r\n        }\r\n    }\r\n  }\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Blinking Air List With Consumption and Temperature - FLOOR SELECTED - v.1.0.0\",\"decimals\":null}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "ede44200-47d9-11f0-9291-41f94c09a8a6"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}