{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "configura_o_presen_a",
    "name" : "Configuração Presença",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 10,
      "sizeY" : 8,
      "resources" : [ ],
      "templateHtml" : "<div class=\"presence-sensor-container\">\n    <div class=\"sensor-header\">\n        <h2 class=\"sensor-title\">Sensor de Presença {{entityName}}</h2>\n    </div>\n\n    <div class=\"presence-form\">\n        <!-- Presence Detection Configuration -->\n        <div class=\"form-section\">\n            <label class=\"form-label\">Se Tiver Presença Por</label>\n            <div class=\"time-input-group\">\n                <input type=\"number\" \n                       class=\"time-input\" \n                       [value]=\"formData?.presenceTime || ''\"\n                       (input)=\"updateFormData?.('presenceTime', $event.target.value)\"\n                       min=\"1\"\n                       placeholder=\"0\">\n                <select class=\"time-unit-select\" \n                        [value]=\"formData?.presenceTimeUnit || 'seconds'\"\n                        (change)=\"updateFormData?.('presenceTimeUnit', $event.target.value)\">\n                    <option value=\"seconds\">Segundos</option>\n                    <option value=\"minutes\">Minutos</option>\n                    <option value=\"hours\">Horas</option>\n                </select>\n            </div>\n        </div>\n\n        <!-- Command Selection -->\n        <div class=\"form-section\">\n            <label class=\"form-label\">Comando</label>\n            <select class=\"command-select\" \n                    [value]=\"getSelectedCommandIndex?.() || ''\"\n                    (change)=\"updateSelectedCommand?.($event.target.value)\">\n                <option value=\"\">Selecione um comando</option>\n                <option *ngFor=\"let command of commands; let i = index\" [value]=\"i\">\n                    {{command.name}}\n                </option>\n            </select>\n        </div>\n\n        <!-- Repeat Command Configuration -->\n        <div class=\"form-section\">\n            <div class=\"checkbox-group\">\n                <label class=\"checkbox-label\">\n                    <input type=\"checkbox\" \n                           class=\"repeat-checkbox\"\n                           [checked]=\"formData?.repeatCommand || false\"\n                           (change)=\"updateFormData?.('repeatCommand', $event.target.checked); onRepeatToggle?.()\">\n                    <span class=\"checkbox-text\">Repetir Comando a cada</span>\n                </label>\n            </div>\n            \n            <div class=\"time-input-group\" \n                 [class.disabled]=\"!formData?.repeatCommand\"\n                 *ngIf=\"formData?.repeatCommand\">\n                <input type=\"number\" \n                       class=\"time-input\" \n                       [value]=\"formData?.repeatTime || ''\"\n                       (input)=\"updateFormData?.('repeatTime', $event.target.value)\"\n                       min=\"1\"\n                       placeholder=\"0\"\n                       [disabled]=\"!formData?.repeatCommand\">\n                <select class=\"time-unit-select\" \n                        [value]=\"formData?.repeatTimeUnit || 'seconds'\"\n                        (change)=\"updateFormData?.('repeatTimeUnit', $event.target.value)\"\n                        [disabled]=\"!formData?.repeatCommand\">\n                    <option value=\"seconds\">Segundos</option>\n                    <option value=\"minutes\">Minutos</option>\n                    <option value=\"hours\">Horas</option>\n                </select>\n            </div>\n        </div>\n\n        <!-- Action Buttons -->\n        <div class=\"form-actions\">\n            <button type=\"button\" \n                    class=\"save-button\" \n                    [disabled]=\"!isFormValid?.() || loading\"\n                    (click)=\"saveConfiguration?.()\">\n                <span *ngIf=\"!loading\">Salvar</span>\n                <span *ngIf=\"loading\" class=\"loading-text\">Salvando...</span>\n            </button>\n        </div>\n    </div>\n\n    <!-- Loading Animation -->\n    <div *ngIf=\"loading\" class=\"loading-overlay\">\n        <div class=\"spinner\"></div>\n    </div>\n\n    <!-- Success Message -->\n    <div *ngIf=\"showSuccess\" class=\"success-message\">\n        <div class=\"success-icon\">✓</div>\n        <span>Configuração salva com sucesso!</span>\n    </div>\n\n    <!-- Error Message -->\n    <div *ngIf=\"showError\" class=\"error-message\">\n        <div class=\"error-icon\">✗</div>\n        <span>Erro ao salvar configuração!</span>\n    </div>\n</div> ",
      "templateCss" : "/* Main Container */\n.presence-sensor-container {\n    width: 100%;\n    height: 100%;\n    overflow-y: auto;\n    overflow-x: hidden;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: #191B1F;\n    /* border-radius: 12px; */\n    color: white;\n    font-family: 'Roboto', Arial, sans-serif;\n    box-sizing: border-box;\n}\n\n/* Header */\n.sensor-header {\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n.sensor-title {\n    font-size: 24px;\n    font-weight: 600;\n    margin: 0;\n    color: #FFFFFF;\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n}\n\n/* Form Styling */\n.presence-form {\n    display: flex;\n    flex-direction: column;\n    gap: 25px;\n}\n\n.form-section {\n    display: flex;\n    flex-direction: column;\n    gap: 12px;\n}\n\n.form-label {\n    font-size: 16px;\n    font-weight: 500;\n    color: #E0E0E0;\n    margin-bottom: 8px;\n}\n\n/* Time Input Group */\n.time-input-group {\n    display: flex;\n    gap: 12px;\n    align-items: center;\n}\n\n.time-input {\n    flex: 1;\n    max-width: 120px;\n    padding: 12px 16px;\n    border: 2px solid #333;\n    border-radius: 8px;\n    background-color: #2C2F33;\n    color: white;\n    font-size: 16px;\n    transition: all 0.3s ease;\n}\n\n.time-input:focus {\n    outline: none;\n    border-color: #0094FF;\n    box-shadow: 0 0 0 3px rgba(0, 148, 255, 0.1);\n}\n\n.time-unit-select {\n    flex: 2;\n    min-width: 140px;\n    padding: 12px 16px;\n    border: 2px solid #333;\n    border-radius: 8px;\n    background-color: #2C2F33;\n    color: white;\n    font-size: 16px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.time-unit-select:focus {\n    outline: none;\n    border-color: #0094FF;\n    box-shadow: 0 0 0 3px rgba(0, 148, 255, 0.1);\n}\n\n.time-unit-select option {\n    background-color: #2C2F33;\n    color: white;\n    padding: 8px;\n}\n\n/* Command Selection */\n.command-select {\n    width: 100%;\n    padding: 12px 16px;\n    border: 2px solid #333;\n    border-radius: 8px;\n    background-color: #2C2F33;\n    color: white;\n    font-size: 16px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.command-select:focus {\n    outline: none;\n    border-color: #0094FF;\n    box-shadow: 0 0 0 3px rgba(0, 148, 255, 0.1);\n}\n\n.command-select option {\n    background-color: #2C2F33;\n    color: white;\n    padding: 8px;\n}\n\n/* Checkbox Styling */\n.checkbox-group {\n    margin-bottom: 12px;\n}\n\n.checkbox-label {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    cursor: pointer;\n    font-size: 16px;\n    font-weight: 500;\n}\n\n.repeat-checkbox {\n    width: 20px;\n    height: 20px;\n    accent-color: #0094FF;\n    cursor: pointer;\n}\n\n.checkbox-text {\n    color: #E0E0E0;\n    user-select: none;\n}\n\n/* Disabled State */\n.time-input-group.disabled {\n    opacity: 0.5;\n    pointer-events: none;\n}\n\n.time-input:disabled,\n.time-unit-select:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    background-color: #1A1D21;\n}\n\n/* Action Buttons */\n.form-actions {\n    display: flex;\n    justify-content: center;\n    margin-top: 30px;\n}\n\n.save-button {\n    padding: 14px 32px;\n    background: linear-gradient(135deg, #0094FF 0%, #0066CC 100%);\n    color: white;\n    border: none;\n    border-radius: 8px;\n    font-size: 16px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(0, 148, 255, 0.3);\n    min-width: 120px;\n}\n\n.save-button:hover:not(:disabled) {\n    background: linear-gradient(135deg, #0066CC 0%, #004499 100%);\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(0, 148, 255, 0.4);\n}\n\n.save-button:disabled {\n    background: #333;\n    cursor: not-allowed;\n    transform: none;\n    box-shadow: none;\n    opacity: 0.6;\n}\n\n.loading-text {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n/* Loading Animation */\n.loading-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(25, 27, 31, 0.8);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 12px;\n}\n\n.spinner {\n    width: 40px;\n    height: 40px;\n    border: 4px solid #333;\n    border-top: 4px solid #0094FF;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n/* Success Message */\n.success-message {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: linear-gradient(135deg, #4CAF50 0%, #45A049 100%);\n    color: white;\n    padding: 16px 24px;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    box-shadow: 0 4px 20px rgba(76, 175, 80, 0.3);\n    animation: slideInRight 0.3s ease-out;\n    z-index: 1000;\n}\n\n.success-icon {\n    font-size: 20px;\n    font-weight: bold;\n}\n\n/* Error Message */\n.error-message {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);\n    color: white;\n    padding: 16px 24px;\n    border-radius: 8px;\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    box-shadow: 0 4px 20px rgba(244, 67, 54, 0.3);\n    animation: slideInRight 0.3s ease-out;\n    z-index: 1000;\n}\n\n.error-icon {\n    font-size: 20px;\n    font-weight: bold;\n}\n\n@keyframes slideInRight {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .presence-sensor-container {\n        padding: 16px;\n        margin: 0;\n        max-height: 100vh;\n        overflow-y: auto;\n    }\n    \n    .sensor-title {\n        font-size: 20px;\n    }\n    \n    .time-input-group {\n        flex-direction: column;\n        gap: 8px;\n    }\n    \n    .time-input,\n    .time-unit-select {\n        max-width: none;\n        min-width: auto;\n        width: 100%;\n    }\n    \n    .success-message,\n    .error-message {\n        position: fixed;\n        top: 10px;\n        left: 10px;\n        right: 10px;\n        margin: 0;\n    }\n}\n\n/* Focus and Interaction States */\ninput[type=\"number\"]::-webkit-outer-spin-button,\ninput[type=\"number\"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n}\n\ninput[type=\"number\"] {\n    -moz-appearance: textfield;\n}\n\n/* Smooth transitions for all interactive elements */\n* {\n    transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease, transform 0.3s ease;\n}\n\n/* Ensure proper scrolling in ThingsBoard widget container */\n:host {\n    display: block;\n    height: 100%;\n    overflow: hidden;\n    border: none !important;\n    outline: none !important;\n}\n\n/* Remove any default borders and margins from widget container */\n:host-context(.tb-widget) {\n    border: none !important;\n    box-shadow: none !important;\n    outline: none !important;\n}\n\n/* Remove borders from the main container and any parent elements */\n.presence-sensor-container {\n    border: none !important;\n    outline: none !important;\n}\n\n/* Custom scrollbar styling */\n.presence-sensor-container::-webkit-scrollbar {\n    width: 8px;\n}\n\n.presence-sensor-container::-webkit-scrollbar-track {\n    background: #1a1a1a;\n    border-radius: 4px;\n}\n\n.presence-sensor-container::-webkit-scrollbar-thumb {\n    background: #404040;\n    border-radius: 4px;\n}\n\n.presence-sensor-container::-webkit-scrollbar-thumb:hover {\n    background: #555;\n} ",
      "controllerScript" : "'esversion: 8'\n\n// Constants\nconst TIME_UNITS = {\n    SECONDS: 'seconds',\n    MINUTES: 'minutes', \n    HOURS: 'hours'\n};\n\n// Time conversion utilities\nfunction convertToSeconds(value, unit) {\n    switch(unit) {\n        case TIME_UNITS.MINUTES:\n            return value * 60;\n        case TIME_UNITS.HOURS:\n            return value * 3600;\n        default:\n            return value;\n    }\n}\n\nfunction convertFromSeconds(seconds, targetUnit) {\n    switch(targetUnit) {\n        case TIME_UNITS.MINUTES:\n            return Math.floor(seconds / 60);\n        case TIME_UNITS.HOURS:\n            return Math.floor(seconds / 3600);\n        default:\n            return seconds;\n    }\n}\n\n// RPC Service function\nasync function sendConfigurationRPC(centralId, body) {\n    const $http = self.ctx.$scope.$injector.get(\n        self.ctx.servicesMap.get('http')\n    );\n    const response = await $http.post(`https://${centralId}.y.myio.com.br/api/rpc`, body).toPromise();\n    return response;\n}\n\n// Save configuration function\nasync function saveConfiguration() {\n    const $scope = self.ctx.$scope;\n    \n    if (!$scope.isFormValid()) {\n        alert('Por favor, preencha todos os campos obrigatórios.');\n        return;\n    }\n\n    $scope.loading = true;\n    $scope.showSuccess = false;\n    $scope.showError = false;\n    self.ctx.detectChanges();\n\n    const { centralId } = self.ctx.settings;\n    const entityName = self.ctx.defaultSubscription.data[0].datasource.entityName;\n    \n    const formValues = $scope.formData;\n    \n    // Convert time values to seconds for storage\n    const presenceTimeInSeconds = convertToSeconds(\n        formValues.presenceTime, \n        formValues.presenceTimeUnit\n    );\n    \n    let repeatTimeInSeconds = null;\n    if (formValues.repeatCommand && formValues.repeatTime) {\n        repeatTimeInSeconds = convertToSeconds(\n            formValues.repeatTime, \n            formValues.repeatTimeUnit\n        );\n    }\n\n    const configurationData = {\n        presenceDetection: {\n            enabled: true,\n            triggerAfterSeconds: presenceTimeInSeconds,\n            command: formValues.selectedCommand ? {\n                commandId: formValues.selectedCommand.commandId,\n                slaveId: formValues.selectedCommand.slaveId,\n                name: formValues.selectedCommand.name\n            } : null\n        },\n        repeatCommand: {\n            enabled: formValues.repeatCommand,\n            intervalSeconds: repeatTimeInSeconds\n        },\n        lastUpdated: new Date().toISOString()\n    };\n\n    try {\n        // Send configuration via RPC\n        await sendConfigurationRPC(centralId, {\n            device: entityName,\n            method: \"configurePresenceSensor\",\n            params: configurationData\n        });\n\n        // Also save to device attributes for persistence\n        await saveToAttributes(configurationData);\n        \n        $scope.loading = false;\n        $scope.showSuccess = true;\n        self.ctx.detectChanges();\n        \n        // Hide success message after 3 seconds\n        setTimeout(() => {\n            $scope.showSuccess = false;\n            self.ctx.detectChanges();\n        }, 3000);\n        \n    } catch (error) {\n        console.error('Error saving presence sensor configuration:', error);\n        \n        $scope.loading = false;\n        $scope.showError = true;\n        self.ctx.detectChanges();\n        \n        // Hide error message after 3 seconds\n        setTimeout(() => {\n            $scope.showError = false;\n            self.ctx.detectChanges();\n        }, 3000);\n    }\n}\n\n// Save configuration to device attributes\nasync function saveToAttributes(configurationData) {\n    const attributeService = self.ctx.$scope.$injector.get(\n        self.ctx.servicesMap.get('attributeService')\n    );\n    \n    const entityId = self.ctx.defaultSubscription.data[0].datasource.entityId;\n    \n    await attributeService.saveEntityAttributes({\n        id: entityId,\n        entityType: 'DEVICE',\n    }, 'SERVER_SCOPE', [{\n        key: 'presenceSensorConfig',\n        value: configurationData\n    }]).toPromise();\n}\n\n// Load configuration from attributes\nasync function loadConfiguration() {\n    const $scope = self.ctx.$scope;\n    \n    // Prevent multiple simultaneous loads\n    if ($scope.loadingConfig) return;\n    $scope.loadingConfig = true;\n    \n    const attributeService = self.ctx.$scope.$injector.get(\n        self.ctx.servicesMap.get('attributeService')\n    );\n    \n    const entityId = self.ctx.defaultSubscription.data[0].datasource.entityId;\n    \n    try {\n        const attributes = await attributeService.getEntityAttributes({\n            id: entityId,\n            entityType: 'DEVICE',\n        }, 'SERVER_SCOPE').toPromise();\n        \n        const configAttribute = attributes.find(attr => attr.key === 'presenceSensorConfig');\n        \n        if (configAttribute && configAttribute.value) {\n            const config = configAttribute.value;\n            \n            // Convert seconds back to appropriate units for display\n            let presenceTime = config.presenceDetection.triggerAfterSeconds;\n            let presenceTimeUnit = TIME_UNITS.SECONDS;\n            \n            // Choose the most appropriate unit\n            if (presenceTime >= 3600 && presenceTime % 3600 === 0) {\n                presenceTime = presenceTime / 3600;\n                presenceTimeUnit = TIME_UNITS.HOURS;\n            } else if (presenceTime >= 60 && presenceTime % 60 === 0) {\n                presenceTime = presenceTime / 60;\n                presenceTimeUnit = TIME_UNITS.MINUTES;\n            }\n            \n            let repeatTime = null;\n            let repeatTimeUnit = TIME_UNITS.SECONDS;\n            \n            if (config.repeatCommand.enabled && config.repeatCommand.intervalSeconds) {\n                repeatTime = config.repeatCommand.intervalSeconds;\n                \n                // Choose the most appropriate unit\n                if (repeatTime >= 3600 && repeatTime % 3600 === 0) {\n                    repeatTime = repeatTime / 3600;\n                    repeatTimeUnit = TIME_UNITS.HOURS;\n                } else if (repeatTime >= 60 && repeatTime % 60 === 0) {\n                    repeatTime = repeatTime / 60;\n                    repeatTimeUnit = TIME_UNITS.MINUTES;\n                }\n            }\n            \n            // Find the command in the available commands\n            let selectedCommand = null;\n            if (config.presenceDetection.command) {\n                selectedCommand = $scope.commands.find(cmd => \n                    cmd.commandId === config.presenceDetection.command.commandId\n                );\n            }\n            \n            // Update form with loaded values\n            $scope.formData.presenceTime = presenceTime;\n            $scope.formData.presenceTimeUnit = presenceTimeUnit;\n            $scope.formData.selectedCommand = selectedCommand;\n            $scope.formData.repeatCommand = config.repeatCommand.enabled;\n            $scope.formData.repeatTime = repeatTime;\n            $scope.formData.repeatTimeUnit = repeatTimeUnit;\n        }\n    } catch (error) {\n        console.error('Error loading configuration:', error);\n    } finally {\n        $scope.loadingConfig = false;\n    }\n}\n\n// Handle repeat command toggle\nfunction onRepeatToggle() {\n    const $scope = self.ctx.$scope;\n    \n    if (!$scope.formData) return;\n    \n    const repeatEnabled = $scope.formData.repeatCommand;\n    \n    if (!repeatEnabled) {\n        // Clear repeat time fields when disabled\n        $scope.formData.repeatTime = null;\n        $scope.formData.repeatTimeUnit = TIME_UNITS.SECONDS;\n    }\n    \n    // Only trigger change detection for this specific case\n    self.ctx.detectChanges();\n}\n\n// Generic form data update function\nfunction updateFormData(field, value) {\n    const $scope = self.ctx.$scope;\n    if (!$scope.formData) return;\n    \n    $scope.formData[field] = value;\n    // Remove automatic detectChanges to prevent spam\n    // self.ctx.detectChanges();\n}\n\n// Handle command selection by index\nfunction updateSelectedCommand(index) {\n    const $scope = self.ctx.$scope;\n    if (!$scope.formData) return;\n    \n    if (index === \"\" || !$scope.commands || !$scope.commands[index]) {\n        $scope.formData.selectedCommand = null;\n    } else {\n        $scope.formData.selectedCommand = $scope.commands[index];\n    }\n    // Remove automatic detectChanges to prevent spam\n    // self.ctx.detectChanges();\n}\n\n// Get the index of the currently selected command\nfunction getSelectedCommandIndex() {\n    const $scope = self.ctx.$scope;\n    if (!$scope.formData?.selectedCommand || !$scope.commands) {\n        return \"\";\n    }\n    const index = $scope.commands.findIndex(cmd => \n        cmd.commandId === $scope.formData.selectedCommand.commandId\n    );\n    return index >= 0 ? index : \"\";\n}\n\n\n\n// Fetch commands from device attributes\nasync function fetchCommands() {\n    const $scope = self.ctx.$scope;\n    \n    // Prevent multiple simultaneous fetches\n    if ($scope.fetchingCommands) return;\n    $scope.fetchingCommands = true;\n    \n    const attributeService = self.ctx.$scope.$injector.get(\n        self.ctx.servicesMap.get('attributeService')\n    );\n\n    const entityId = self.ctx.defaultSubscription.data[0].datasource.entityId;\n    \n    try {\n        const attributes = await attributeService.getEntityAttributes({\n            id: entityId,\n            entityType: 'DEVICE',\n        }, 'SERVER_SCOPE').toPromise();\n        \n        const commandsAttribute = attributes.find(attr => attr.key === 'commands');\n        if (commandsAttribute) {\n            $scope.commands = commandsAttribute.value.map(cmd => ({\n                name: cmd.name,\n                commandId: cmd.commandId,\n                slaveId: cmd.slaveId\n            }));\n        } else {\n            $scope.commands = [];\n        }\n    } catch (error) {\n        console.error('Error fetching commands:', error);\n        $scope.commands = [];\n    } finally {\n        $scope.fetchingCommands = false;\n    }\n}\n\n\n\n// Fetch data and initialize\nasync function fetchData() {\n    const $scope = self.ctx.$scope;\n    \n    // Get entity information\n    const entityName = self.ctx.defaultSubscription.data[0].datasource.entityName;\n    const entityLabel = self.ctx.defaultSubscription.data[0].datasource.entityLabel;\n    \n    // Initialize scope variables\n    $scope.entityName = entityLabel || entityName;\n    $scope.loading = false;\n    $scope.showSuccess = false;\n    $scope.showError = false;\n    $scope.commands = [];\n    \n    // Fetch commands and load existing configuration\n    await fetchCommands();\n    await loadConfiguration();\n}\n\n// Widget lifecycle methods\nself.onInit = async function() {\n    console.log('Presence sensor widget initializing...');\n    const $scope = self.ctx.$scope;\n    \n    // Initialize form data immediately to prevent undefined errors\n    $scope.formData = {\n        presenceTime: null,\n        presenceTimeUnit: TIME_UNITS.SECONDS,\n        selectedCommand: null,\n        repeatCommand: false,\n        repeatTime: null,\n        repeatTimeUnit: TIME_UNITS.SECONDS\n    };\n    \n    // Bind functions to scope first\n    $scope.saveConfiguration = saveConfiguration;\n    $scope.onRepeatToggle = onRepeatToggle;\n    $scope.updateFormData = updateFormData;\n    $scope.updateSelectedCommand = updateSelectedCommand;\n    $scope.getSelectedCommandIndex = getSelectedCommandIndex;\n    \n    // Simple validation function\n    $scope.isFormValid = function() {\n        const data = $scope.formData;\n        if (!data || !data.presenceTime || data.presenceTime < 1) return false;\n        if (!data.selectedCommand) return false;\n        if (data.repeatCommand && (!data.repeatTime || data.repeatTime < 1)) return false;\n        return true;\n    };\n    \n    // Initialize other form data and fetch data\n    await fetchData();\n    $scope.dataInitialized = true;\n    \n    console.log('Presence sensor widget initialized successfully', $scope.formData);\n    self.ctx.detectChanges();\n}\n\nself.onDataUpdated = async function() {\n    // Only refetch data if not already initialized and not currently fetching\n    const $scope = self.ctx.$scope;\n    if (!$scope.dataInitialized && !$scope.fetchingCommands && !$scope.loadingConfig) {\n        await fetchData();\n        $scope.dataInitialized = true;\n        self.ctx.detectChanges();\n    }\n}\n\nself.onDestroy = function() {\n    // Clean up any resources if needed\n} ",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"centralId\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Id da Central\"\r\n            }\r\n        },\r\n        \"required\": [\"centralId\", \"customerId\"]\r\n    },\r\n    \"form\": [\r\n        \"centralId\"\r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "dataKeySettingsDirective" : "tb-value-card-widget-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Attributes card\",\"decimals\":null}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "154d8d00-3fc0-11f0-bdaa-1bbe0793dcff"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}