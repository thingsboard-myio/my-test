{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "report",
    "name" : "Report",
    "deprecated" : false,
    "image" : "tb-image;/api/images/tenant/Capturar_(31).PNG",
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 14,
      "sizeY" : 11.5,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      } ],
      "templateHtml" : "<div class=\"wat\">\n    <header id=\"ReportHeader\">\n    <div>\n        <img src=\"https://myio.com.br/app/uploads/2020/05/Logotest01.png\" alt=\"Myio\" id=\"Myio\" />\n        <p>Sistema Myio | Registro de Consumo</p>\n        <p>{{subtitle}}</p>\n        <p>Data de Emissão: {{emissionDate}}<span id=\"issue-date\"></span></p>\n        <button class=\"hide-in-pdf button\" (click)=\"downloadPDF()\">\n            <i class=\"fa-solid fa-file-arrow-down\" style=\"color: #0a0a0a;\"></i>\n        </button>\n        <button class=\"hide-in-csv button\" (click)=\"downloadCSV()\">\n            <i class=\"fa-solid fa-file-csv\" style=\"color: #0a0a0a;\"></i>\n        </button>\n    </div>\n    <div id=\"datePicker\">\n    <mat-form-field class=\"example-form-field hide-in-pdf\">\n      <mat-label>Selecione um intervalo</mat-label>\n      <mat-date-range-input [rangePicker]=\"rangePicker\">\n        <input matStartDate placeholder=\"Data Inicial\" \n               (dateChange)=\"handleStartDateChange($event)\">\n        <input matEndDate placeholder=\"Data Final\" \n               (dateChange)=\"handleEndDateChange($event)\">\n      </mat-date-range-input>\n      <mat-datepicker-toggle matIconSuffix [for]=\"rangePicker\"></mat-datepicker-toggle>\n      <mat-date-range-picker #rangePicker>\n        <mat-date-range-picker-actions>\n          <button mat-button matDateRangePickerCancel>Cancelar</button>\n          <button mat-raised-button matDateRangePickerApply>Selecionar</button>\n        </mat-date-range-picker-actions>\n      </mat-date-range-picker>\n    </mat-form-field>\n    </div>\n    </header>\n    <div id=\"main\" class=\"loading\" *ngIf=\"loading\">\n        <mat-progress-spinner mode=\"indeterminate\" color=\"accent\" style=\"width: 32px;\"></mat-progress-spinner>\n    </div>\n    <mat-table [dataSource]=\"dados\" matSort (matSortChange)=\"sortData($event)\" class=\"mat-elevation-z8\">\n      <ng-container matColumnDef=\"deviceName\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Loja</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{ row.name }}  </mat-cell>\n      </ng-container>\n      <ng-container matColumnDef=\"deviceId\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Identificador</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{ row.deviceId }}  </mat-cell>\n      </ng-container>\n      <ng-container matColumnDef=\"kWh\">\n        <mat-header-cell *matHeaderCellDef mat-sort-header>Leitura</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{ (row.kWh).toFixed(2) }} kWh </mat-cell>\n      </ng-container>\n      <mat-header-row *matHeaderRowDef=\"['deviceName', 'deviceId', 'kWh']\"></mat-header-row>\n      <mat-row *matRowDef=\"let row; columns: ['deviceName', 'deviceId', 'kWh']\"></mat-row>\n    </mat-table>\n</div>",
      "templateCss" : "#container {\r\n    overflow-y: auto;\r\n}\r\n\r\n#main.loading {\r\n    height: 100%;\r\n    width: 100%;\r\n    padding: 0;\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n}\r\n\r\n#Myio{\r\n    width: 150px;\r\n    background-color: #3e1a7d;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n}\r\n\r\n#ReportHeader{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    padding: 5px;\r\n}\r\n\r\np{\r\n    font-size: 13px;\r\n    margin: 0;\r\n    font-family: Roboto;\r\n}\r\n\r\n.button{\r\n    all: unset;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 40px;\r\n}\r\n\r\n.example-form-field{\r\n    margin: 0;\r\n}\r\n.hide-in-csv.button{\r\n    right: 60px;\r\n}\r\n\r\n",
      "controllerScript" : "/* jshint esversion: 11 */\n\n// Constants\nconst PURPLE_COLOR = [92, 48, 125];\nconst STRIPE_COLOR = [245, 247, 250];\nconst PAGE_MARGIN = 10;\nconst LINE_HEIGHT = 10;\nconst LOGO_URL = 'https://dashboard.myio-bas.com/api/images/public/TAfpmF6jEKPDi6hXHbnMUT8MWOHv5lKD';\n\n// State management\nconst state = {\n    startDate: null,\n    endDate: null,\n    deviceNameLabelMap: {},\n    loading: false,\n    data: []\n};\n\n// Utility functions\nfunction formatDate(date) {\n    return new Date(date).toLocaleDateString('pt-BR');\n}\n\nfunction toFixed(value) {\n    if (value == null) return value;\n    return Number(value).toFixed(2);\n}\n\nfunction exportToCSV(reportData) {\n    if (!reportData?.length) {\n        alert('Erro: Nenhum dado disponível para exportar.');\n        return;\n    }\n    const rows = [\n        ['Loja', 'Identificador', 'Consumo']\n    ];\n    reportData.forEach(data => {\n        rows.push([\n            data.name || '-',\n            data.deviceId || '-',\n            data.kWh ? toFixed(data.kWh) : '0.00',\n        ]);\n    });\n    const csvContent = \"data:text/csv;charset=utf-8,\" + rows.map(e => e.join(\";\")).join(\"\\n\");\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodeURI(csvContent));\n    link.setAttribute(\"download\", `relatorio_consumo_${new Date().toISOString().slice(0,10)}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\nfunction exportToPDF(reportData, startDate, endDate) {\n    if (!reportData || !Array.isArray(reportData) || reportData.length === 0) {\n        alert('Erro: Nenhum dado disponível para exportar.');\n        return;\n    }\n    \n    const doc = new window.jspdf.jsPDF();\n    const pageWidth = doc.internal.pageSize.width;\n    const pageHeight = doc.internal.pageSize.height;\n    const purple = [92, 48, 125];\n    const margin = 10;\n    const lineHeight = 10;\n    const colWidth = (pageWidth - 2 * margin) / 2;\n\n    function addHeader() {\n        doc.setFillColor(...purple);\n        doc.rect(0, 0, pageWidth, 50, 'F');\n\n        const logoHeight = 25;\n        const logoWidth = Math.round(logoHeight * (512 / 194));\n        const logoX = 15;\n        const logoY = 12;\n\n        doc.addImage(\n            LOGO_URL,\n            'PNG',\n            logoX,\n            logoY,\n            logoWidth,\n            logoHeight\n        );\n\n        const textStartX = logoX + logoWidth + 20;\n        const availableWidth = pageWidth - textStartX - 15;\n        const textCenterX = textStartX + availableWidth / 2;\n \n        doc.setFontSize(12);\n        doc.setTextColor(255, 255, 255);\n        doc.text('Sistema Myio | Registro de Consumo Kwh', textCenterX, 15, { align: 'center' });\n        doc.text(`${self.ctx.$scope.subtitle}`, textCenterX, 23, { align: 'center' })\n        doc.text(`Data de Emissão: ${new Date().toLocaleDateString('pt-BR')}`, textCenterX, 31, { align: 'center' });\n\n        const fromDate = new Date(startDate.setDate(startDate.getDate()+1)).toLocaleDateString('pt-BR');\n        const toDate = new Date(endDate.setDate(endDate.getDate() - 1)).toLocaleDateString('pt-BR');\n        \n        doc.text(`Período de ${fromDate} até ${toDate}`, textCenterX, 39, { align: 'center' });\n    }\n\n    function addTableHeader(startY) {\n        doc.setFillColor(...purple);\n        doc.rect(margin, startY, pageWidth - 2 * margin, lineHeight, 'F');\n\n        const headers = ['Loja','Identificador','Consumo'];\n        doc.setTextColor(255, 255, 255);\n        doc.setFontSize(10);\n        headers.forEach((header, i) => {\n            doc.text(header, margin + i * colWidth + colWidth / 2, startY + 7, { align: 'center' });\n        });\n    }\n\n    function addTableRow(rowData, startY, isStriped) {\n        if (isStriped) {\n            doc.setFillColor(245, 247, 250);\n            doc.rect(margin, startY, pageWidth - 2 * margin, lineHeight, 'F');\n        }\n\n        rowData.forEach((text, i) => {\n            doc.setTextColor(0, 0, 0);\n            doc.text(String(text), margin + i * colWidth + colWidth / 2, startY + 7, { align: 'center' });\n        });\n    }\n\n    addHeader();\n\n    let startY = 60;\n    addTableHeader(startY);\n    startY += lineHeight;\n\n    reportData.forEach((data, index) => {\n        if (startY > pageHeight - 20) {\n            doc.addPage();\n            startY = 20;\n            addTableHeader(startY);\n            startY += lineHeight;\n        }\n       \n        const rowData = [\n            data.name || '-',\n            data.deviceId || '-',\n            data.kWh ? `${toFixed(data.kWh)} kWh` : '-'\n        ];\n\n        addTableRow(rowData, startY, index % 2 === 0);\n        startY += lineHeight;\n    });\n\n    doc.setFontSize(10);\n    doc.setTextColor(0, 0, 0);\n    doc.text(`Página 1 de 1`, pageWidth / 2, pageHeight - 10, { align: 'center' });\n\n    doc.save(`relatorio_consumo_${new Date().toISOString().slice(0,10)}.pdf`);\n}\n\nself.onInit = async function() {\n    // Scope Initialization\n    self.ctx.$scope.widgetTitle = self.ctx.settings.widgetTitle || \"Energy Consumption Report\";\n    self.ctx.$scope.apiBaseUrl = self.ctx.settings.apiBaseUrl || 'https://ingestion.myio-bas.com';\n    self.ctx.$scope.consumptionDecimals = self.ctx.settings.consumptionDecimals !== undefined ? self.ctx.settings.consumptionDecimals : 2;\n    self.ctx.$scope.exportFileName = self.ctx.settings.exportFileName || 'energy_consumption_report';\n\n    self.ctx.$scope.isLoading = true;\n    self.ctx.$scope.errorMessage = null;\n    self.ctx.$scope.reportData = [];\n    self.ctx.$scope.reportDataSorted = [];\n\n    // Sorting state\n    self.ctx.$scope.sortColumn = 'deviceName';\n    self.ctx.$scope.sortReverse = false;\n\n    try {\n        const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n        const datasources = self.ctx.defaultSubscription.datasources;\n\n        if (!datasources || datasources.length === 0) {\n            self.ctx.$scope.errorMessage = \"Nenhum dispositivo configurado. Adicione dispositivos à fonte de dados do widget.\";\n            self.ctx.$scope.isLoading = false;\n            self.ctx.detectChanges();\n            return;\n        }\n\n        const attributeFetchPromises = datasources.map(async (ds) => {\n            const entityLabel = ds.entityName || ds.label || `Dispositivo (ID: ${ds.entityId.substring(0,5)})`;\n            let deviceReportEntry = {\n                entityId: ds.entityId,\n                entityAliasId: ds.entityAliasId,\n                deviceName: entityLabel,\n                centralId: null,\n                slaveId: null,\n                consumptionKwh: null,\n                error: null\n            };\n\n            try {\n                if (!ds.entityId || !ds.entityType) {\n                    throw new Error(\"Contexto do dispositivo (entityId/entityType) ausente na fonte de dados.\");\n                }\n                const deviceAttributes = await attributeService.getEntityAttributes(\n                    { id: ds.entityId, entityType: ds.entityType },\n                    'SERVER_SCOPE',\n                    ['centralId', 'slaveId']\n                ).toPromise();\n\n                const centralIdAttr = deviceAttributes.find(attr => attr.key === 'centralId');\n                const slaveIdAttr = deviceAttributes.find(attr => attr.key === 'slaveId');\n\n                const centralIdValue = centralIdAttr ? centralIdAttr.value : null;\n                const slaveIdRawValue = slaveIdAttr ? slaveIdAttr.value : null;\n                const slaveIdValue = typeof slaveIdRawValue === 'string' ? parseInt(slaveIdRawValue, 10) : slaveIdRawValue;\n\n                if (!centralIdValue || slaveIdValue === null || typeof slaveIdValue !== 'number' || isNaN(slaveIdValue)) {\n                    throw new Error(\"Atributos centralId/slaveId ausentes ou inválidos.\");\n                }\n                deviceReportEntry.centralId = centralIdValue;\n                deviceReportEntry.slaveId = slaveIdValue;\n            } catch (attrError) {\n                console.error(`Erro ao buscar atributos para ${entityLabel} (ID: ${ds.entityId}):`, attrError);\n                deviceReportEntry.error = attrError.message || \"Falha ao buscar atributos.\";\n            }\n            return deviceReportEntry;\n        });\n\n        self.ctx.$scope.reportData = await Promise.all(attributeFetchPromises);\n        applySortAndDetectChanges();\n        \n    } catch (initError) {\n        console.error(\"Erro durante a inicialização do widget de relatório:\", initError);\n        self.ctx.$scope.errorMessage = initError.message || \"Ocorreu um erro inesperado ao inicializar.\";\n        applySortAndDetectChanges();\n    } finally {\n        self.ctx.$scope.isLoading = false;\n        self.ctx.detectChanges();\n    }\n\n    self.ctx.$scope.sortBy = function(columnName) {\n        if (self.ctx.$scope.sortColumn === columnName) {\n            self.ctx.$scope.sortReverse = !self.ctx.$scope.sortReverse;\n        } else {\n            self.ctx.$scope.sortColumn = columnName;\n            self.ctx.$scope.sortReverse = false;\n        }\n        applySortAndDetectChanges();\n    };\n};\n\nfunction applySortAndDetectChanges() {\n    if (!self.ctx.$scope.reportData) {\n        self.ctx.$scope.reportDataSorted = [];\n        self.ctx.detectChanges();\n        return;\n    }\n\n    let sortedData = [...self.ctx.$scope.reportData];\n\n    sortedData.sort((a, b) => {\n        let valA = a[self.ctx.$scope.sortColumn];\n        let valB = b[self.ctx.$scope.sortColumn];\n\n        // Handle consumption sorting with error cases\n        if (self.ctx.$scope.sortColumn === 'consumptionKwh') {\n            const errorOrNullA = a.error !== null || a.consumptionKwh === null;\n            const errorOrNullB = b.error !== null || b.consumptionKwh === null;\n\n            if (errorOrNullA && !errorOrNullB) return 1;\n            if (!errorOrNullA && errorOrNullB) return -1;\n            if (errorOrNullA && errorOrNullB) {\n                // Fallback to device name sorting when both have errors\n                valA = a.deviceName || '';\n                valB = b.deviceName || '';\n            }\n        }\n        \n        // Handle null/undefined values\n        if (valA === null || valA === undefined) {\n            valA = typeof valB === 'number' ? Infinity : '';\n        }\n        if (valB === null || valB === undefined) {\n            valB = typeof valA === 'number' ? Infinity : '';\n        }\n\n        // Perform comparison based on value types\n        let comparison = 0;\n        if (typeof valA === 'string' && typeof valB === 'string') {\n            comparison = valA.localeCompare(valB);\n        } else if (typeof valA === 'number' && typeof valB === 'number') {\n            comparison = valA - valB;\n        } else {\n            comparison = String(valA).localeCompare(String(valB));\n        }\n\n        return self.ctx.$scope.sortReverse ? -comparison : comparison;\n    });\n\n    self.ctx.$scope.reportDataSorted = sortedData;\n    self.ctx.detectChanges();\n}\n\nasync function fetchConsumptionData() {\n    if (!self.ctx.$scope.reportData || !Array.isArray(self.ctx.$scope.reportData) || self.ctx.$scope.reportData.length === 0) {\n        console.log(\"Relatório: Nenhum dispositivo com atributos para buscar dados.\");\n        return;\n    }\n\n    self.ctx.$scope.isLoading = true;\n    self.ctx.$scope.errorMessage = null;\n    \n    // Ensure each device has the required properties\n    self.ctx.$scope.reportData = self.ctx.$scope.reportData.map(device => ({\n        ...device,\n        deviceName: device.deviceName || 'Unknown Device',\n        centralId: device.centralId || null,\n        slaveId: device.slaveId || null,\n        consumptionKwh: null,\n        error: device.error || null\n    }));\n\n    self.ctx.detectChanges();\n\n    const devicesToFetch = self.ctx.$scope.reportData\n        .filter(d => d.centralId && d.slaveId !== null && !d.error)\n        .map(d => ({ centralId: d.centralId, slaveId: d.slaveId }));\n\n    if (devicesToFetch.length === 0) {\n        self.ctx.$scope.isLoading = false;\n        console.log(\"Relatório: Nenhum dispositivo válido para buscar dados de consumo.\");\n        self.ctx.detectChanges();\n        return;\n    }\n\n    try {\n        const params = {\n            devices: devicesToFetch,\n            startTs: new Date(self.ctx.timeWindow.minTime).toISOString(),\n            endTs: new Date(self.ctx.timeWindow.maxTime).toISOString(),\n            timezone: self.ctx.timeWindow.timezone || undefined \n        };\n\n        const response = await fetch(`${self.ctx.$scope.apiBaseUrl}/api/v1/energy-readings/batch-period-sum`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(params)\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({ error: `API request failed with status ${response.status}` }));\n            throw new Error(errorData.error || `API request failed with status ${response.status}`);\n        }\n\n        const data = await response.json();\n        \n        // Update consumption data for each device\n        self.ctx.$scope.reportData = self.ctx.$scope.reportData.map(device => {\n            if (device.error) return device; // Keep devices with errors unchanged\n            \n            const deviceData = data.find(d => \n                d.centralId === device.centralId && \n                d.slaveId === device.slaveId\n            );\n            \n            return {\n                ...device,\n                consumptionKwh: deviceData ? deviceData.consumptionKwh : null,\n                error: deviceData ? null : \"No consumption data found for the selected period\"\n            };\n        });\n\n        applySortAndDetectChanges();\n    } catch (error) {\n        console.error(\"Error fetching consumption data:\", error);\n        self.ctx.$scope.errorMessage = error.message || \"Failed to fetch consumption data\";\n        self.ctx.$scope.reportData = self.ctx.$scope.reportData.map(device => ({\n            ...device,\n            error: device.error || \"Failed to fetch consumption data\"\n        }));\n        applySortAndDetectChanges();\n    } finally {\n        self.ctx.$scope.isLoading = false;\n        self.ctx.detectChanges();\n    }\n}\n\nself.onDataUpdated = function() {\n    fetchConsumptionData();\n};\n\nself.onResize = function() {\n    self.ctx.detectChanges();\n};\n\nself.onEditModeChanged = function() {\n    self.ctx.detectChanges();\n};\n\nself.onMobileModeChanged = function() {\n    self.ctx.detectChanges();\n};\n\nself.onSettingsChanged = function() {\n    self.ctx.detectChanges();\n};\n",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"subtitle\":{\r\n                \"type\":\"string\",\r\n                \"title\": \"Subtítulo do Relatorio\"\r\n            }\r\n        },\r\n        \"required\": [\"subtitle\"]\r\n    },\r\n    \"form\": [\r\n        \"subtitle\"\r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "hasBasicMode" : false,
      "defaultConfig" : "{\"showTitle\":false,\"backgroundColor\":\"#FFFFFF\",\"color\":\"rgb(0, 0, 0)\",\"padding\":\"8px\",\"settings\":{\"centralId\":\"6354365436543654-Sdvzs2f5dbv4z2sd5f4v3z6d\"},\"title\":\"Report\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"borderRadius\":\"10px\",\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"enableDataExport\":false,\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.25096343243849395,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}}}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "66476500-350c-11f0-8cbd-2b87fdb093e1"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}