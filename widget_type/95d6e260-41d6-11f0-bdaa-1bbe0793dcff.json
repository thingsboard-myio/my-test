{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "indoor_temperature_card",
    "name" : "Indoor temperature card MYIO",
    "deprecated" : false,
    "image" : "tb-image;/api/images/system/indoor_temperature_card_system_widget_image.png",
    "description" : "Displays the latest indoor temperature telemetry in a scalable rectangle card.",
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 3,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"card-grid\" *ngIf=\"ctxList?.length\">\r\n  <tb-value-card-widget *ngIf=\"ctxList[0]\" [ctx]=\"ctxList[0]\" [widgetTitlePanel]=\"true\"></tb-value-card-widget>\r\n  <tb-value-card-widget *ngIf=\"ctxList[1]\" [ctx]=\"ctxList[1]\" [widgetTitlePanel]=\"true\"></tb-value-card-widget>\r\n  <tb-value-card-widget *ngIf=\"ctxList[2]\" [ctx]=\"ctxList[2]\" [widgetTitlePanel]=\"true\"></tb-value-card-widget>\r\n  <tb-value-card-widget *ngIf=\"ctxList[3]\" [ctx]=\"ctxList[3]\" [widgetTitlePanel]=\"true\"></tb-value-card-widget>\r\n</div>\r\n",
      "templateCss" : ".value-card-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n  overflow-y: auto;\r\n}\r\n\r\n.value-card-container {\r\n  flex: 1 1 200px;\r\n  min-width: 200px;\r\n  max-width: 300px;\r\n  box-shadow: 0 4px 10px rgba(0,0,0,0.1);\r\n  border-radius: 12px;\r\n  background: #fff;\r\n  padding: 12px;\r\n}\r\n\r\n.card-grid {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 16px;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  padding: 10px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n",
      "controllerScript" : "self.onInit = function () {\r\n  try {\r\n    const ctx = self.ctx;\r\n    ctx.$scope.ctxList = [];\r\n\r\n    if (!ctx.data || !ctx.datasources || ctx.data.length === 0) {\r\n      console.warn('[Widget] Nenhum datasource disponível.');\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < Math.min(ctx.data.length, 4); i++) {\r\n      const localCtx = {\r\n        ...ctx,\r\n        datasources: [ctx.datasources[i]],\r\n        data: [ctx.data[i]],\r\n        settings: ctx.settings,\r\n        timeWindow: ctx.timeWindow,\r\n        widgetConfig: ctx.widgetConfig,\r\n        units: ctx.units,\r\n        decimals: ctx.decimals\r\n      };\r\n      ctx.$scope.ctxList.push(localCtx);\r\n    }\r\n\r\n    console.log('[Widget] ctxList inicializado:', ctx.$scope.ctxList);\r\n  } catch (err) {\r\n    console.error('[Widget] Erro no onInit:', err);\r\n  }\r\n};\r\n\r\nself.onDataUpdated = function () {\r\n  try {\r\n    const ctx = self.ctx;\r\n    if (!ctx.$scope?.ctxList || ctx.$scope.ctxList.length === 0) {\r\n      console.warn('[Widget] ctxList ainda não foi definido.');\r\n      return;\r\n    }\r\n\r\n    ctx.data.forEach((ds, i) => {\r\n      if (ctx.$scope.ctxList[i]) {\r\n        ctx.$scope.ctxList[i].data = [ds];\r\n      }\r\n    });\r\n\r\n    console.log('[Widget] ctxList atualizado com novos dados');\r\n  } catch (err) {\r\n    console.error('[Widget] Erro no onDataUpdated:', err);\r\n  }\r\n};\r\n",
      "settingsSchema" : "",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "tb-value-card-widget-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "tb-value-card-basic-config",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Temperature\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.2392660816082064,\"funcBody\":\"var value = prevValue + Math.random() * 20 - 10;\\nif (value < 15) {\\n\\tvalue = 15;\\n} else if (value > 30) {\\n\\tvalue = 30;\\n}\\nreturn value;\",\"aggregationType\":null,\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgba(0, 0, 0, 0)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"labelPosition\":\"top\",\"layout\":\"square\",\"showLabel\":true,\"labelFont\":{\"family\":\"Roboto\",\"size\":16,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"500\"},\"labelColor\":{\"type\":\"constant\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"colorFunction\":\"var temperature = value;\\nif (typeof temperature !== undefined) {\\n  var percent = (temperature + 60)/120 * 100;\\n  return tinycolor.mix('blue', 'red', percent).toHexString();\\n}\\nreturn 'blue';\"},\"showIcon\":true,\"iconSize\":40,\"iconSizeUnit\":\"px\",\"icon\":\"thermostat\",\"iconColor\":{\"type\":\"range\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"rangeList\":[{\"from\":null,\"to\":18,\"color\":\"#234CC7\"},{\"from\":18,\"to\":24,\"color\":\"#3FA71A\"},{\"from\":24,\"to\":null,\"color\":\"#D81838\"}],\"colorFunction\":\"var temperature = value;\\nif (typeof temperature !== undefined) {\\n  var percent = (temperature + 60)/120 * 100;\\n  return tinycolor.mix('blue', 'red', percent).toHexString();\\n}\\nreturn 'blue';\"},\"valueFont\":{\"family\":\"Roboto\",\"size\":52,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"500\"},\"valueColor\":{\"type\":\"range\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"colorFunction\":\"var temperature = value;\\nif (typeof temperature !== undefined) {\\n  var percent = (temperature + 60)/120 * 100;\\n  return tinycolor.mix('blue', 'red', percent).toHexString();\\n}\\nreturn 'blue';\",\"rangeList\":[{\"from\":null,\"to\":18,\"color\":\"#234CC7\"},{\"from\":18,\"to\":24,\"color\":\"#3FA71A\"},{\"from\":24,\"to\":null,\"color\":\"#D81838\"}]},\"showDate\":true,\"dateFormat\":{\"format\":null,\"lastUpdateAgo\":true,\"custom\":false},\"dateFont\":{\"family\":\"Roboto\",\"size\":12,\"sizeUnit\":\"px\",\"style\":\"normal\",\"weight\":\"500\"},\"dateColor\":{\"type\":\"constant\",\"color\":\"rgba(0, 0, 0, 0.38)\",\"colorFunction\":\"var temperature = value;\\nif (typeof temperature !== undefined) {\\n  var percent = (temperature + 60)/120 * 100;\\n  return tinycolor.mix('blue', 'red', percent).toHexString();\\n}\\nreturn 'blue';\"},\"background\":{\"type\":\"color\",\"color\":\"#fff\",\"overlay\":{\"enabled\":false,\"color\":\"rgba(255,255,255,0.72)\",\"blur\":3}},\"autoScale\":true},\"title\":\"Temperature card\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"units\":\"°C\",\"decimals\":0,\"useDashboardTimewindow\":true,\"showLegend\":false,\"widgetStyle\":{},\"actions\":{},\"configMode\":\"basic\",\"displayTimewindow\":true,\"margin\":\"0px\",\"borderRadius\":\"0px\",\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"titleFont\":{\"size\":12,\"sizeUnit\":\"px\",\"family\":null,\"weight\":null,\"style\":null,\"lineHeight\":\"1.6\"},\"titleIcon\":\"\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"14px\",\"timewindowStyle\":{\"showIcon\":true,\"iconSize\":\"14px\",\"icon\":\"query_builder\",\"iconPosition\":\"left\",\"font\":{\"size\":12,\"sizeUnit\":\"px\",\"family\":null,\"weight\":null,\"style\":null,\"lineHeight\":\"1\"},\"color\":null},\"enableDataExport\":false}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "95d6e260-41d6-11f0-bdaa-1bbe0793dcff"
    },
    "scada" : false,
    "tags" : [ "temperature", "environment", "indoor" ]
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}