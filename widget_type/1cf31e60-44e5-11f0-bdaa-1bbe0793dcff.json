{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "blinking_status_motor_list_with_link_v1",
    "name" : "Blinking status Motor List with link v1",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"device-card-centered clickable\"\r\n     id=\"device-0\"\r\n     data-state= \"{{state}}\"\r\n     data-entity-id=\"...\"\r\n     data-entity-type=\"ASSET\">\r\n  <div class=\"device-title\">sem dispositivo</div>\r\n  <img class=\"device-image blink\" src=\"...\" />\r\n  <div class=\"device-data-row\">\r\n    <div class=\"consumption\">⚡ <span>-- kW</span></div>\r\n  </div>\r\n</div>\r\n",
      "templateCss" : ".status-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 6px;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.device-card-centered {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-radius: 12px;\r\n  background: #fff;\r\n  padding: 6px;\r\n  box-shadow: 0px 10px 10px rgba(0,0,0,0.06), 0px -6px 6px rgba(0,0,0,0.04);\r\n  text-align: center;\r\n  width: 99%;\r\n  margin: 0 2px 12px 2px;\r\n  cursor: pointer;\r\n  transition: box-shadow 0.2s ease, transform 0.1s ease;\r\n}\r\n\r\n.device-card-centered:hover {\r\n  box-shadow: 0px 8px 24px rgba(0,0,0,0.12), 0px -4px 16px rgba(0,0,0,0.08);\r\n  transform: scale(1.1);\r\n}\r\n\r\n.device-title {\r\n  font-weight: bold;\r\n  font-size: 0.9rem;\r\n  margin-bottom: 6px;\r\n  color: #333;\r\n}\r\n\r\n.device-image {\r\n  width: 90px;\r\n  height: auto;\r\n  margin-bottom: 6px;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.blink {\r\n  animation: blink 1.2s infinite;\r\n}\r\n\r\n.device-data-row {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  font-size: 0.95rem;\r\n  color: #444;\r\n  padding: 0 8px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.consumption span {\r\n  color: #28a745;\r\n  font-weight: 600;\r\n}\r\n\r\n@keyframes blink {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.3; }\r\n}\r\n",
      "controllerScript" : "const motorOffline = '/api/images/public/XutAQB6zI47vEoy7RWO2nk0o4pGmx7Cd';\r\nconst motorOn      = '/api/images/public/Rge8Q3t0CP5PW8XyTn9bBK9aVP6uzSTT';\r\nconst motorOff     = '/api/images/public/8Ezn8qVBJ3jXD0iDfnEAZ0MZhAP1b5Ts';\r\n\r\nconst style = document.createElement('style');\r\nstyle.innerHTML = `/* CSS acima aqui */`;\r\ndocument.head.appendChild(style);\r\n\r\nfunction extractBaseLabel(label) {\r\n  // Captura algo como: \"9° Andar\", \"Sala Online 9° Andar\", etc.\r\n  const match = label.match(/(?:Sala Online\\s)?\\d{1,2}[°ª] Andar/i);\r\n  return match ? match[0].trim().toLowerCase() : null;\r\n}\r\n\r\nfunction extractContextKey(label) {\r\n  const normalized = label.toLowerCase();\r\n\r\n  // se houver \"sala online\" e um andar\r\n  if (/sala online/i.test(normalized)) {\r\n    const andar = normalized.match(/\\d{1,2}[°ª]/)?.[0];\r\n    return andar ? `sala_online_${andar}` : null;\r\n  }\r\n\r\n  // se houver \"área comum\" e um andar\r\n  if (/área comum/i.test(normalized)) {\r\n    const andar = normalized.match(/\\d{1,2}[°ª]/)?.[0];\r\n    return andar ? `area_comum_${andar}` : null;\r\n  }\r\n\r\n  // fallback: apenas pelo andar\r\n  const andar = normalized.match(/\\d{1,2}[°ª]/)?.[0];\r\n  return andar ? `generico_${andar}` : null;\r\n}\r\n\r\nfunction extractAndar(label) {\r\n  return label.match(/\\d{1,2}[°ª]/i)?.[0]?.toLowerCase();\r\n}\r\nself.onInit = function () {\r\n  const ctx = self.ctx;\r\n  ctx.entityMap = {};\r\n  ctx.$container.empty();\r\n  self.ctx.$scope.state = ctx.settings.self_contained\r\n  const $main = $('<div class=\"status-container\"></div>');\r\n  ctx.$container.append($main);\r\n\r\n  const cards = ctx.data.filter(ds => ds.dataKey?.name === 'consumption')\r\n    .sort((a, b) => (a.datasource?.entityLabel || '').localeCompare(b.datasource?.entityLabel || '', 'pt-BR'));\r\n\r\n  cards.forEach((ds, index) => {\r\n    const label = ds.datasource?.entityLabel;\r\n    const entityId = ds.datasource?.entityId;\r\n    const entityType = ds.datasource?.entityType;\r\n    const safeId = `card-${label.replace(/\\s+/g, '_')}`;\r\n    const andar = extractAndar(label);\r\n    const $card = $(`\r\n      <div class=\"device-card-centered clickable\"\r\n           id=\"${safeId}\"\r\n           data-state=\"default\"\r\n           data-entity-id=\"${entityId}\"\r\n           data-entity-type=\"${entityType}\">\r\n        <div class=\"device-title\">⚡ ${label}</div>\r\n        <img class=\"device-image\" src=\"${motorOffline}\" />\r\n        <div class=\"device-data-row\">\r\n          <div class=\"consumption\">⚡ <span>-- kW</span></div>\r\n        </div>\r\n      </div>\r\n    `);\r\n\r\n    const backColor = ds.dataKey?.settings?.backGroundColor;\r\n    if (backColor) $card.css('background-color', backColor);\r\n\r\n    ctx.entityMap[label] = {\r\n      el: $card,\r\n      label,\r\n      consumption: null\r\n    };\r\n\r\n     if (andar) {\r\n      const isSalaOnline = /sala online/i.test(label);\r\n      const contextKey = (isSalaOnline ? 'sala_online_' : 'area_comum_') + andar;\r\n\r\n      if (!ctx.contextIndexMap[contextKey]) {\r\n        ctx.contextIndexMap[contextKey] = [];\r\n      }\r\n\r\n      if (!ctx.contextIndexMap[contextKey].includes(label)) {\r\n        ctx.contextIndexMap[contextKey].push(label);\r\n      }\r\n    }\r\n\r\n    $main.append($card);\r\n  });\r\n\r\n  ctx.$container.on('click', '.device-card-centered', function (e) {\r\n    e.preventDefault();\r\n    const entityId = $(this).data('entity-id');\r\n    const entityType = $(this).data('entity-type');\r\n    ctx.stateController.openState(self.ctx.$scope.state, {\r\n      entityId: { id: entityId, entityType }\r\n    }, false);\r\n  });\r\n};\r\n\r\nself.onDataUpdated = function () {\r\n  const ctx = self.ctx;\r\n\r\n  ctx.data.forEach(ds => {\r\n    //console.log(\"LOG Widget MOTOR >>> \" , ds);\r\n    \r\n    const label = ds.datasource?.entityLabel;\r\n    const key = ds.dataKey?.name;\r\n    const val = ds.data?.[ds.data.length - 1]?.[1];\r\n    const isValid = typeof val === 'number' && !isNaN(val);\r\n    \r\n    console.log(\"LOG Widget MOTOR >>> ctx.entityMap >>> \" , ctx.entityMap);\r\n    \r\n    if (key === 'consumption' && ctx.entityMap[label]) {\r\n      const entry = ctx.entityMap[label];\r\n      const isOn = isValid && val > 0;\r\n      const img = !isValid ? motorOffline : (isOn ? motorOn : motorOff);\r\n      const consumo = isValid ? `${(val / 1000).toFixed(2)} kW` : '-- kW';\r\n      const color = isOn ? '#28a745' : '#777';\r\n\r\n      entry.el.find('.device-image').attr('src', img).toggleClass('blink', isOn);\r\n      entry.el.find('.consumption span').text(consumo).css('color', color);\r\n      entry.consumption = consumo;\r\n    }\r\n  });\r\n};\r\n",
      "settingsSchema" : "{\r\n  \"schema\": {\r\n    \"type\": \"object\",\r\n    \"title\": \"Settings\",\r\n    \"properties\": {\r\n        \"self_contained\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de Ar Tipo Self Contained\",\r\n        \"default\": \"\"\r\n        }\r\n    }\r\n  }\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Blinking status Motor List with link v1\",\"decimals\":null}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "1cf31e60-44e5-11f0-bdaa-1bbe0793dcff"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}