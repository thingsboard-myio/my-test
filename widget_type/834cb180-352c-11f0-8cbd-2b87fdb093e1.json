{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "report_single_device",
    "name" : "Report - Single Device",
    "deprecated" : false,
    "image" : "tb-image;/api/images/tenant/Capturar_(31).PNG",
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 14,
      "sizeY" : 11.5,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      } ],
      "templateHtml" : "<div class=\"widget-container\">\n    <div class=\"widget-header\">\n        <h2 class=\"widget-title\">{{widgetTitle}}</h2>\n        <div class=\"date-range\">\n            <input type=\"date\" \n                   [(ngModel)]=\"startDate\" \n                   (ngModelChange)=\"handleStartDateChange($event)\"\n                   [max]=\"endDateFormatted\">\n            <span>até</span>\n            <input type=\"date\" \n                   [(ngModel)]=\"endDate\" \n                   (ngModelChange)=\"handleEndDateChange($event)\"\n                   [min]=\"startDateFormatted\">\n            <button class=\"load-button\" (click)=\"loadData()\" [disabled]=\"isLoading\">\n                <i class=\"material-icons\">refresh</i>\n                Carregar\n            </button>\n        </div>\n        <div class=\"export-buttons\">\n            <button class=\"export-button\" (click)=\"exportToCSV()\" [disabled]=\"!reportDataSorted || reportDataSorted.length === 0\">\n                <i class=\"material-icons\">file_download</i>\n                CSV\n            </button>\n        </div>\n    </div>\n\n    <div *ngIf=\"errorMessage\" class=\"error-message\">\n        {{errorMessage}}\n    </div>\n\n    <div class=\"table-container\" style=\"position: relative;\">\n        <div *ngIf=\"isLoading\" class=\"loading-overlay\">\n            <i class=\"material-icons\" style=\"font-size: 48px; color: #5c307d;\">hourglass_empty</i>\n        </div>\n        <table>\n            <thead>\n                <tr>\n                    <th (click)=\"sortBy('date')\">\n                        Data\n                        <span class=\"sort-icon\" *ngIf=\"sortColumn === 'date'\">\n                            {{sortReverse ? '▼' : '▲'}}\n                        </span>\n                    </th>\n                    <th (click)=\"sortBy('consumptionKwh')\">\n                        Consumo (kWh)\n                        <span class=\"sort-icon\" *ngIf=\"sortColumn === 'consumptionKwh'\">\n                            {{sortReverse ? '▼' : '▲'}}\n                        </span>\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngIf=\"!reportDataSorted || reportDataSorted.length === 0\">\n                    <td colspan=\"2\" class=\"no-data\">\n                        Nenhum dado disponível\n                    </td>\n                </tr>\n                <tr *ngFor=\"let day of reportDataSorted\">\n                    <td>{{day.date}}</td>\n                    <td>{{day.consumptionKwh != null ? formatNumberReadable(day.consumptionKwh) : '-'}}</td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div> \n",
      "templateCss" : "#container {\n    overflow-y: auto;\n}\n\n#main.loading {\n    height: 100%;\n    width: 100%;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n}\n\n#Myio{\n    width: 150px;\n    background-color: #3e1a7d;\n    padding: 10px;\n    border-radius: 5px;\n}\n\n#ReportHeader{\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-end;\n    padding: 5px;\n}\n\np{\n    font-size: 13px;\n    margin: 0;\n    font-family: Roboto;\n}\n\n.button{\n    all: unset;\n    cursor: pointer;\n    position: absolute;\n    top: 8px;\n    right: 40px;\n}\n\n.example-form-field{\n    margin: 0;\n}\n.hide-in-csv.button{\n    right: 60px;\n}\n\n.widget-container {\n    font-family: 'Roboto', sans-serif;\n    padding: 20px;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.widget-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 20px;\n    flex-wrap: wrap;\n    gap: 16px;\n}\n\n.widget-title {\n    font-size: 18px;\n    font-weight: 500;\n    color: #333;\n    margin: 0;\n}\n\n.date-range {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.date-range input[type=\"date\"] {\n    padding: 8px;\n    border: 1px solid #e0e0e0;\n    border-radius: 4px;\n    font-family: 'Roboto', sans-serif;\n    font-size: 14px;\n    color: #333;\n    background-color: white;\n}\n\n.date-range input[type=\"date\"]:focus {\n    outline: none;\n    border-color: #5c307d;\n}\n\n.date-range span {\n    color: #666;\n    font-size: 14px;\n}\n\n.export-buttons {\n    display: flex;\n    gap: 10px;\n}\n\n.export-button {\n    padding: 8px 16px;\n    border: none;\n    border-radius: 4px;\n    background-color: #5c307d;\n    color: white;\n    cursor: pointer;\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    transition: background-color 0.2s;\n}\n\n.export-button:hover {\n    background-color: #4a265f;\n}\n\n.export-button:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n}\n\n.table-container {\n    flex: 1;\n    overflow: auto;\n    border: 1px solid #e0e0e0;\n    border-radius: 4px;\n}\n\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    background-color: white;\n}\n\nth {\n    background-color: #5c307d;\n    color: white;\n    padding: 12px;\n    text-align: left;\n    font-weight: 500;\n    cursor: pointer;\n    user-select: none;\n    position: sticky;\n    top: 0;\n    z-index: 1;\n}\n\nth:hover {\n    background-color: #4a265f;\n}\n\ntd {\n    padding: 12px;\n    border-bottom: 1px solid #e0e0e0;\n}\n\ntr:nth-child(even) {\n    background-color: #f5f7fa;\n}\n\ntr:hover {\n    background-color: #f0f2f5;\n}\n\n.loading-overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(255, 255, 255, 0.8);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    z-index: 2;\n}\n\n.error-message {\n    color: #d32f2f;\n    padding: 12px;\n    background-color: #ffebee;\n    border-radius: 4px;\n    margin-bottom: 16px;\n}\n\n.no-data {\n    text-align: center;\n    padding: 32px;\n    color: #666;\n}\n\n.sort-icon {\n    margin-left: 4px;\n    font-size: 12px;\n}\n\n.error-cell {\n    color: #d32f2f;\n    font-style: italic;\n}\n\n.invalid-device {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    color: #d32f2f;\n}\n\n.invalid-device .material-icons {\n    font-size: 16px;\n    color: #d32f2f;\n}\n\n.load-button {\n    padding: 8px 16px;\n    border: none;\n    border-radius: 4px;\n    background-color: #5c307d;\n    color: white;\n    cursor: pointer;\n    font-size: 14px;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    transition: background-color 0.2s;\n}\n\n.load-button:hover {\n    background-color: #4a265f;\n}\n\n.load-button:disabled {\n    background-color: #ccc;\n    cursor: not-allowed;\n}\n\n.load-button .material-icons {\n    font-size: 18px;\n}",
      "controllerScript" : "/* jshint esversion: 11 */\n\n// Constants\nconst PURPLE_COLOR = [92, 48, 125];\nconst STRIPE_COLOR = [245, 247, 250];\nconst PAGE_MARGIN = 10;\nconst LINE_HEIGHT = 10;\nconst LOGO_URL = 'https://dashboard.myio-bas.com/api/images/public/TAfpmF6jEKPDi6hXHbnMUT8MWOHv5lKD';\n\n// State management\nconst state = {\n  startDate: null,\n  endDate: null,\n  deviceNameLabelMap: {},\n  loading: false,\n  data: []\n};\n\n// Utility functions\nfunction formatDate(date) {\n  if (!date || isNaN(new Date(date).getTime())) {\n    // Return today's date if invalid\n    const today = new Date();\n    return today.toISOString().split('T')[0];\n  }\n  const d = new Date(date);\n  return d.toISOString().split('T')[0];\n}\n\nfunction getValidDate(date) {\n  if (!date || isNaN(new Date(date).getTime())) {\n    return new Date();\n  }\n  return new Date(date);\n}\n\nfunction toFixed(value) {\n  if (value == null) return value;\n  return Number(value).toFixed(2);\n}\n\nfunction formatNumberReadable(value) {\n  if (value == null || isNaN(value)) return '-';\n  return value.toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n}\n\nfunction exportToCSV(reportData) {\n  if (!reportData?.length) {\n    alert('Erro: Nenhum dado disponível para exportar.');\n    return;\n  }\n  const rows = [\n    ['Loja', 'Identificador', 'Consumo']\n  ];\n  reportData.forEach(data => {\n    rows.push([\n      data.entityLabel || data.deviceName || '-',\n      data.deviceId || '-',\n      data.consumptionKwh != null ? formatNumberReadable(data.consumptionKwh) : '0,00',\n    ]);\n  });\n  const csvContent = \"data:text/csv;charset=utf-8,\" + rows.map(e => e.join(\";\")).join(\"\\n\");\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"href\", encodeURI(csvContent));\n  link.setAttribute(\"download\", `relatorio_consumo_${new Date().toISOString().slice(0, 10)}.csv`);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\nfunction exportToPDF(reportData, startDate, endDate) {\n  if (!reportData || !Array.isArray(reportData) || reportData.length === 0) {\n    alert('Erro: Nenhum dado disponível para exportar.');\n    return;\n  }\n\n  const doc = new window.jspdf.jsPDF();\n  const pageWidth = doc.internal.pageSize.width;\n  const pageHeight = doc.internal.pageSize.height;\n  const purple = [92, 48, 125];\n  const margin = 10;\n  const lineHeight = 10;\n  const colWidth = (pageWidth - 2 * margin) / 2;\n\n  function addHeader() {\n    doc.setFillColor(...purple);\n    doc.rect(0, 0, pageWidth, 50, 'F');\n\n    const logoHeight = 25;\n    const logoWidth = Math.round(logoHeight * (512 / 194));\n    const logoX = 15;\n    const logoY = 12;\n\n    doc.addImage(\n      LOGO_URL,\n      'PNG',\n      logoX,\n      logoY,\n      logoWidth,\n      logoHeight\n    );\n\n    const textStartX = logoX + logoWidth + 20;\n    const availableWidth = pageWidth - textStartX - 15;\n    const textCenterX = textStartX + availableWidth / 2;\n\n    doc.setFontSize(12);\n    doc.setTextColor(255, 255, 255);\n    doc.text('Sistema Myio | Registro de Consumo Kwh', textCenterX, 15, { align: 'center' });\n    doc.text(`${self.ctx.$scope.subtitle}`, textCenterX, 23, { align: 'center' })\n    doc.text(`Data de Emissão: ${new Date().toLocaleDateString('pt-BR')}`, textCenterX, 31, { align: 'center' });\n\n    const fromDate = new Date(startDate.setDate(startDate.getDate() + 1)).toLocaleDateString('pt-BR');\n    const toDate = new Date(endDate.setDate(endDate.getDate() - 1)).toLocaleDateString('pt-BR');\n\n    doc.text(`Período de ${fromDate} até ${toDate}`, textCenterX, 39, { align: 'center' });\n  }\n\n  function addTableHeader(startY) {\n    doc.setFillColor(...purple);\n    doc.rect(margin, startY, pageWidth - 2 * margin, lineHeight, 'F');\n\n    const headers = ['Loja', 'Identificador', 'Consumo'];\n    doc.setTextColor(255, 255, 255);\n    doc.setFontSize(10);\n    headers.forEach((header, i) => {\n      doc.text(header, margin + i * colWidth + colWidth / 2, startY + 7, { align: 'center' });\n    });\n  }\n\n  function addTableRow(rowData, startY, isStriped) {\n    if (isStriped) {\n      doc.setFillColor(245, 247, 250);\n      doc.rect(margin, startY, pageWidth - 2 * margin, lineHeight, 'F');\n    }\n\n    rowData.forEach((text, i) => {\n      doc.setTextColor(0, 0, 0);\n      doc.text(String(text), margin + i * colWidth + colWidth / 2, startY + 7, { align: 'center' });\n    });\n  }\n\n  addHeader();\n\n  let startY = 60;\n  addTableHeader(startY);\n  startY += lineHeight;\n\n  reportData.forEach((data, index) => {\n    if (startY > pageHeight - 20) {\n      doc.addPage();\n      startY = 20;\n      addTableHeader(startY);\n      startY += lineHeight;\n    }\n\n    const rowData = [\n      data.name || '-',\n      data.deviceId || '-',\n      data.kWh ? `${toFixed(data.kWh)} kWh` : '-'\n    ];\n\n    addTableRow(rowData, startY, index % 2 === 0);\n    startY += lineHeight;\n  });\n\n  doc.setFontSize(10);\n  doc.setTextColor(0, 0, 0);\n  doc.text(`Página 1 de 1`, pageWidth / 2, pageHeight - 10, { align: 'center' });\n\n  doc.save(`relatorio_consumo_${new Date().toISOString().slice(0, 10)}.pdf`);\n}\n\nfunction formatDateYMD(date) {\n  if (!date) return '';\n  if (typeof date === 'string' && /^\\d{4}-\\d{2}-\\d{2}$/.test(date)) return date;\n  const d = new Date(date);\n  return d.toISOString().slice(0, 10);\n}\n\n// Helper to get ISO string in America/Sao_Paulo with -03:00 offset\nfunction getSaoPauloISOString(dateStr, endOfDay = false) {\n    if (!dateStr) return '';\n    if (endOfDay) {\n        return `${dateStr}T23:59:59.999-03:00`;\n    } else {\n        return `${dateStr}T00:00:00.000-03:00`;\n    }\n}\n\nfunction getDateRangeArray(startDateStr, endDateStr) {\n    const arr = [];\n    let current = new Date(startDateStr);\n    const end = new Date(endDateStr);\n    while (current <= end) {\n        arr.push(current.toISOString().slice(0, 10));\n        current.setDate(current.getDate() + 1);\n    }\n    return arr;\n}\n\nself.onInit = async function() {\n    self.ctx.settings = self.ctx.settings || {};\n    self.ctx.$scope.widgetTitle = self.ctx.settings.widgetTitle || \"Relatório Diário de Consumo\";\n    self.ctx.$scope.apiBaseUrl = self.ctx.settings.apiBaseUrl || 'https://ingestion.myio-bas.com';\n    self.ctx.$scope.exportFileName = self.ctx.settings.exportFileName || 'relatorio_diario_consumo';\n\n    // Date handling\n    const minTime = self.ctx.timeWindow?.minTime;\n    const maxTime = self.ctx.timeWindow?.maxTime;\n    self.ctx.$scope.startDate = formatDateYMD(minTime);\n    self.ctx.$scope.endDate = formatDateYMD(maxTime);\n    self.ctx.$scope.startDateFormatted = self.ctx.$scope.startDate;\n    self.ctx.$scope.endDateFormatted = self.ctx.$scope.endDate;\n\n    self.ctx.$scope.isLoading = false;\n    self.ctx.$scope.errorMessage = null;\n    self.ctx.$scope.reportData = [];\n    self.ctx.$scope.reportDataSorted = [];\n    self.ctx.$scope.sortColumn = 'date';\n    self.ctx.$scope.sortReverse = false;\n    self.ctx.$scope.formatNumberReadable = formatNumberReadable;\n\n    self.ctx.$scope.handleStartDateChange = function(newDate) {\n        self.ctx.$scope.startDate = newDate;\n        self.ctx.$scope.startDateFormatted = newDate;\n        if (self.ctx.$scope.endDate < newDate) {\n            self.ctx.$scope.endDate = newDate;\n            self.ctx.$scope.endDateFormatted = newDate;\n        }\n    };\n    self.ctx.$scope.handleEndDateChange = function(newDate) {\n        self.ctx.$scope.endDate = newDate;\n        self.ctx.$scope.endDateFormatted = newDate;\n        if (self.ctx.$scope.startDate > newDate) {\n            self.ctx.$scope.startDate = newDate;\n            self.ctx.$scope.startDateFormatted = newDate;\n        }\n    };\n\n    self.ctx.$scope.loadData = async function() {\n        self.ctx.$scope.isLoading = true;\n        self.ctx.$scope.errorMessage = null;\n        self.ctx.detectChanges();\n        try {\n            const datasources = self.ctx.defaultSubscription.datasources;\n            if (!datasources || datasources.length === 0) {\n                self.ctx.$scope.errorMessage = \"Nenhum dispositivo configurado.\";\n                self.ctx.$scope.isLoading = false;\n                self.ctx.detectChanges();\n                return;\n            }\n            const ds = datasources[0];\n            // Get centralId and slaveId from attributes\n            const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n            const deviceAttributes = await attributeService.getEntityAttributes(\n                { id: ds.entityId, entityType: ds.entityType },\n                'SERVER_SCOPE',\n                ['centralId', 'slaveId']\n            ).toPromise();\n            const centralIdAttr = deviceAttributes.find(attr => attr.key === 'centralId');\n            const slaveIdAttr = deviceAttributes.find(attr => attr.key === 'slaveId');\n            const centralId = centralIdAttr ? centralIdAttr.value : null;\n            const slaveIdRaw = slaveIdAttr ? slaveIdAttr.value : null;\n            const slaveId = typeof slaveIdRaw === 'string' ? parseInt(slaveIdRaw, 10) : slaveIdRaw;\n            if (!centralId || slaveId == null || isNaN(slaveId)) {\n                self.ctx.$scope.errorMessage = \"Dispositivo não configurado corretamente.\";\n                self.ctx.$scope.isLoading = false;\n                self.ctx.detectChanges();\n                return;\n            }\n            // Prepare API call\n            const startTs = getSaoPauloISOString(self.ctx.$scope.startDate, false);\n            const endTs = getSaoPauloISOString(self.ctx.$scope.endDate, true);\n            const params = new URLSearchParams({\n                gatewayId: centralId,\n                slaveId: String(slaveId),\n                startTs,\n                endTs,\n                interval: '1 day',\n                timezone: 'America/Sao_Paulo'\n            });\n            const url = `${self.ctx.$scope.apiBaseUrl}/api/v1/energy-readings/aggregate?${params.toString()}`;\n            const response = await fetch(url, { method: 'GET' });\n            if (!response.ok) {\n                const errorData = await response.json().catch(() => ({}));\n                throw new Error(errorData.error || `API request failed with status ${response.status}`);\n            }\n            const data = await response.json();\n            // Map to {date, consumptionKwh} and fill missing days\n            const dateRange = getDateRangeArray(self.ctx.$scope.startDate, self.ctx.$scope.endDate);\n            const buckets = Array.isArray(data) ? data : [];\n            // Group and sum by date\n            const dailyMap = {};\n            buckets.forEach(b => {\n                const dateTime = b.bucket || b.date || (b.bucket_ts_local ? b.bucket_ts_local : null);\n                if (dateTime) {\n                    const date = dateTime.slice(0, 10);\n                    if (!dailyMap[date]) dailyMap[date] = 0;\n                    dailyMap[date] += b.total_kwh != null ? Number(b.total_kwh) : 0;\n                }\n            });\n            const reportData = dateRange.map(date => ({\n                date,\n                consumptionKwh: dailyMap[date] != null ? dailyMap[date] : 0\n            }));\n            self.ctx.$scope.reportData = reportData;\n            applySortAndDetectChanges();\n        } catch (error) {\n            self.ctx.$scope.errorMessage = error.message || \"Erro ao buscar dados de consumo.\";\n            self.ctx.$scope.reportData = [];\n            applySortAndDetectChanges();\n        } finally {\n            self.ctx.$scope.isLoading = false;\n            self.ctx.detectChanges();\n        }\n    };\n\n    self.ctx.$scope.exportToCSV = function() {\n        if (!self.ctx.$scope.reportDataSorted?.length) {\n            alert('Erro: Nenhum dado disponível para exportar.');\n            return;\n        }\n        const rows = [\n            ['Data', 'Consumo (kWh)']\n        ];\n        self.ctx.$scope.reportDataSorted.forEach(day => {\n            rows.push([\n                day.date,\n                formatNumberReadable(day.consumptionKwh)\n            ]);\n        });\n        const csvContent = \"data:text/csv;charset=utf-8,\" + rows.map(e => e.join(\";\")).join(\"\\n\");\n        const link = document.createElement(\"a\");\n        link.setAttribute(\"href\", encodeURI(csvContent));\n        link.setAttribute(\"download\", `${self.ctx.$scope.exportFileName}_${new Date().toISOString().slice(0, 10)}.csv`);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    };\n\n    self.ctx.$scope.sortBy = function(columnName) {\n        if (self.ctx.$scope.sortColumn === columnName) {\n            self.ctx.$scope.sortReverse = !self.ctx.$scope.sortReverse;\n        } else {\n            self.ctx.$scope.sortColumn = columnName;\n            self.ctx.$scope.sortReverse = false;\n        }\n        applySortAndDetectChanges();\n    };\n};\n\nfunction applySortAndDetectChanges() {\n    if (!self.ctx.$scope.reportData) {\n        self.ctx.$scope.reportDataSorted = [];\n        self.ctx.detectChanges();\n        return;\n    }\n    let sortedData = [...self.ctx.$scope.reportData];\n    sortedData.sort((a, b) => {\n        let valA = a[self.ctx.$scope.sortColumn];\n        let valB = b[self.ctx.$scope.sortColumn];\n        if (self.ctx.$scope.sortColumn === 'consumptionKwh') {\n            valA = Number(valA);\n            valB = Number(valB);\n        }\n        if (valA < valB) return self.ctx.$scope.sortReverse ? 1 : -1;\n        if (valA > valB) return self.ctx.$scope.sortReverse ? -1 : 1;\n        return 0;\n    });\n    self.ctx.$scope.reportDataSorted = sortedData;\n    self.ctx.detectChanges();\n}\n\nself.onDataUpdated = function() {\n  // Do NOT call fetchConsumptionData here\n};\n\nself.onEditModeChanged = function() {\n  self.ctx.detectChanges();\n};\n\nself.onMobileModeChanged = function() {\n  self.ctx.detectChanges();\n};\n\nself.onSettingsChanged = function() {\n  self.ctx.detectChanges();\n};\n",
      "settingsSchema" : "{\n  \"title\": \"Relatório Diário de Consumo (Dispositivo)\",\n  \"description\": \"Widget para relatório diário de consumo de energia de um único dispositivo.\",\n  \"type\": \"report-daily-device\",\n  \"settingsSchema\": {\n    \"type\": \"object\",\n    \"title\": \"Configurações do Relatório Diário de Consumo\",\n    \"properties\": {\n      \"widgetTitle\": {\n        \"title\": \"Título do Widget\",\n        \"type\": \"string\",\n        \"default\": \"Relatório Diário de Consumo\"\n      },\n      \"apiBaseUrl\": {\n        \"title\": \"API Base URL\",\n        \"type\": \"string\",\n        \"default\": \"https://ingestion.myio-bas.com\"\n      },\n      \"exportFileName\": {\n        \"title\": \"Nome do Arquivo de Exportação\",\n        \"type\": \"string\",\n        \"default\": \"relatorio_diario_consumo\"\n      }\n    },\n    \"required\": [\"widgetTitle\", \"apiBaseUrl\", \"exportFileName\"]\n  }\n} ",
      "dataKeySettingsSchema" : "{}\n",
      "hasBasicMode" : false,
      "defaultConfig" : "{\"showTitle\":false,\"backgroundColor\":\"#FFFFFF\",\"color\":\"rgb(0, 0, 0)\",\"padding\":\"8px\",\"settings\":{\"centralId\":\"6354365436543654-Sdvzs2f5dbv4z2sd5f4v3z6d\"},\"title\":\"Report - Single Device\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"borderRadius\":\"10px\",\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"enableDataExport\":false,\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.25096343243849395,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}}}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "834cb180-352c-11f0-8cbd-2b87fdb093e1"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}