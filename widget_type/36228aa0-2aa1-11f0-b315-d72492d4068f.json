{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "config_estouro_demanda",
    "name" : "Config Estouro Demanda",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 14,
      "sizeY" : 9.5,
      "resources" : [ ],
      "templateHtml" : "<div id=\"main\" class=\"loading\" *ngIf=\"loading\">\n    <mat-progress-spinner mode=\"indeterminate\" color=\"accent\" style=\"width: 32px;\">\n    </mat-progress-spinner>\n</div>\n\n<div id=\"main\" *ngIf=\"!loading && demandRules && demandRules.length > 0\" [formGroup]=\"demandRules[0].ruleFormGroup\">\n    <!-- Main fieldset for the single demand rule -->\n    <fieldset id=\"cloneable-fieldset\">\n        <legend id=\"titulo\">Configuração de Demanda ({{entityName}})</legend>\n\n        <!-- Power Thresholds Section -->\n        <fieldset class=\"form-group power-form\">\n            <legend>Limites de Potência (kW)</legend>\n            <div class=\"power-inputs\">\n                <!-- Min Power Input -->\n                <mat-form-field appearance=\"fill\" class=\"power-field\">\n                    <mat-label>Potência Mínima (kW)</mat-label>\n                    <input matInput type=\"number\" formControlName=\"minPower\" placeholder=\"Ex: 5.5\" step=\"0.1\" required>\n                    <mat-error *ngIf=\"demandRules[0].ruleFormGroup.get('minPower').hasError('required')\">\n                        Potência mínima é obrigatória.\n                    </mat-error>\n                     <mat-error *ngIf=\"demandRules[0].ruleFormGroup.get('minPower').hasError('min')\">\n                        Valor deve ser positivo.\n                    </mat-error>\n                </mat-form-field>\n\n                <!-- Max Power Input -->\n                <mat-form-field appearance=\"fill\" class=\"power-field\">\n                    <mat-label>Potência Máxima (kW)</mat-label>\n                    <input matInput type=\"number\" formControlName=\"maxPower\" placeholder=\"Ex: 10.0\" step=\"0.1\" required>\n                    <mat-error *ngIf=\"demandRules[0].ruleFormGroup.get('maxPower').hasError('required')\">\n                        Potência máxima é obrigatória.\n                    </mat-error>\n                    <mat-error *ngIf=\"demandRules[0].ruleFormGroup.get('maxPower').hasError('min')\">\n                        Valor deve ser positivo.\n                    </mat-error>\n                </mat-form-field>\n            </div>\n             <!-- Power Range Error -->\n             <mat-error *ngIf=\"demandRules[0].ruleFormGroup.hasError('powerRange') && (demandRules[0].ruleFormGroup.get('minPower').touched || demandRules[0].ruleFormGroup.get('maxPower').touched)\" class=\"power-range-error\">\n                Potência mínima não pode ser maior que a máxima.\n            </mat-error>\n        </fieldset>\n\n        <!-- Control Devices Section -->\n        <fieldset class=\"form-group device-control\">\n            <legend>Dispositivos a Desligar</legend>\n            <!-- Multi-Select Device Dropdown -->\n            <mat-form-field appearance=\"fill\" class=\"device-select-field\">\n                <mat-label>Selecionar Dispositivos</mat-label>\n                <mat-select formControlName=\"controlDevices\" multiple required [compareWith]=\"compareDeviceObjects\">\n                    <!-- Search input inside the dropdown panel -->\n                    <div (click)=\"$event.stopPropagation()\" style=\"padding: 0px 16px; position: sticky; top: 0; background: white; z-index: 100;\">\n                        <input\n                            style=\"width: 100%; padding: 12px 0px; border: none; border-bottom: 1px solid #e0e0e0; margin-bottom: 8px; outline: none; font-size: inherit;\"\n                            type=\"text\"\n                            placeholder=\"Buscar dispositivo...\"\n                            [(ngModel)]=\"deviceSearchText\"\n                            [ngModelOptions]=\"{standalone: true}\"\n                            (input)=\"onDeviceSearchInputChange($event.target.value)\"\n                            (keydown)=\"$event.stopPropagation()\"> \n                    </div>\n\n                    <mat-option *ngFor=\"let device of filteredDevices\" [value]=\"device\">\n                        {{ device.name }}\n                    </mat-option>\n                    <mat-option *ngIf=\"filteredDevices.length === 0 && deviceSearchText.length >= 2\" disabled>\n                       Nenhum dispositivo encontrado para \"{{deviceSearchText}}\"\n                    </mat-option>\n                     <mat-option *ngIf=\"filteredDevices.length === 0 && deviceSearchText.length < 2\" disabled>\n                       Digite 2+ caracteres para buscar\n                    </mat-option>\n                </mat-select>\n                 <mat-error *ngIf=\"demandRules[0].ruleFormGroup.get('controlDevices').hasError('required') && demandRules[0].ruleFormGroup.get('controlDevices').touched\">\n                    Selecione ao menos um dispositivo.\n                </mat-error>\n            </mat-form-field>\n\n             <!-- Display Selected Devices (Optional: using mat-chip-list) -->\n             <mat-chip-list aria-label=\"Selected Devices\" *ngIf=\"demandRules[0].ruleFormGroup.get('controlDevices').value?.length > 0\">\n                <mat-chip *ngFor=\"let device of demandRules[0].ruleFormGroup.get('controlDevices').value\">\n                    {{device.name}}\n                </mat-chip>\n            </mat-chip-list>\n        </fieldset>\n\n        <!-- Remove Button was here - now removed -->\n\n    </fieldset>\n\n    <!-- Buttons at the bottom -->\n    <div class=\"divButtons\">\n        <!-- Add Rule Button was here - now removed -->\n        <button type=\"button\"\n            (click)=\"submit()\"\n            [disabled]=\"saveButtonDisabled\"\n            color=\"accent\"\n            mat-raised-button> Salvar Configuração\n        </button>\n    </div>\n</div>\n\n",
      "templateCss" : "#container {\n    overflow-y: auto;\n}\n\n#main.loading {\n    background: rgba(30,30,30,0.3);    \n    height: 100%;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#main {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    padding-bottom: 80px;\n}\n\nfieldset {\n    border: none;\n    border-radius: 5px;\n    display: flex;\n    flex-direction: column;\n    margin: 10px;\n    width: auto;\n    font-size: 14px;\n    background-color: #1F2126;\n    padding: 16px;\n    color: #FFFFFF;\n}\n\n#cloneable-fieldset {\n    background-color: #1F2126;\n    border: none;\n    width: auto;\n    margin: 10px;\n}\n\n#titulo {\n    font-size: 16px;\n    margin-bottom: 16px;\n    color: #FFFFFF;\n}\n\n.form-control {\n    /* Removed - use form-group */\n}\n\n.form-group {\n    width: 100%;\n    padding: 0;\n    margin-bottom: 16px;\n    background: none;\n    border: none;\n}\n\n.power-form {\n    flex-direction: column;\n    width: 100%;\n}\n\nfieldset legend {\n    margin-bottom: 16px;\n}\n\n.power-inputs {\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    gap: 16px;\n    margin-bottom: 8px;\n}\n\n.power-field {\n    flex: 1;\n    background-color: transparent !important;\n    margin: 0 !important;\n}\n\n.device-control {\n    width: 100%;\n    margin-top: 8px;\n}\n\n.device-search-field {\n    width: 100%;\n    background-color: transparent !important;\n    margin-bottom: 8px;\n}\n\n.device-select-field {\n     width: 100%;\n     background-color: transparent !important;\n     margin-bottom: 8px;\n}\n\n/* Removed .custom-select styles */\n\n/* Error message styles */\n.mat-error {\n    color: #ff4d4f;\n    font-size: 12px;\n    margin-top: -4px;\n    padding-left: 2px;\n    display: block;\n}\n\n/* Override Material styles */\n.mat-mdc-form-field {\n    display: inline-flex;\n    flex-direction: column;\n    min-width: 0;\n    text-align: left;\n    width: 100%;\n    padding: 0;\n    margin-bottom: 8px;\n}\n\n/* Input text color */\ninput.mat-mdc-input-element {\n    color: #FFFFFF !important;\n}\n\n/* Label styles */\n.mat-mdc-floating-label, .mat-mdc-form-field-label {\n    color: rgba(255, 255, 255, 0.7) !important;\n}\n\n.mat-mdc-form-field-label.mdc-floating-label--float-above {\n    color: #FFFFFF !important;\n}\n\n/* Remove black background from form fields */\n.mdc-text-field {\n    background-color: transparent !important;\n}\n\n.mdc-text-field--filled:not(.mdc-text-field--disabled) {\n    background-color: transparent !important;\n}\n\n/* Fix form field appearance */\n.mat-mdc-form-field-flex {\n    background-color: #2A2C33 !important;\n    border-radius: 4px !important;\n    padding: 0 16px !important; \n}\n\n.mat-mdc-form-field-infix {\n/*    padding-top: 12px !important;\n    padding-bottom: 8px !important; */\n}\n\n.mat-mdc-form-field-subscript-wrapper {\n/*    padding: 0 16px !important; */\n    box-sizing: border-box;\n}\n\n.mdc-line-ripple {\n    display: none !important;\n}\n\n.power-range-error {\n    margin: -4px 0 8px 2px;\n    font-size: 12px;\n}\n\n/* Removed .warning styles */\n\n\n/* Keep button styles */\nbutton {\n    background-color: #673AB5;\n    color: white;\n    padding: 10px;\n    border-radius: 5px;\n    margin: 5px;\n    font-size: 16px;\n    border: none;\n    cursor: pointer;\n}\n\nbutton:hover {\n    box-shadow: 5px 5px 5px 0px black, 0 10px 20px 0 black;\n}\n\nbutton:active {\n    box-shadow: 2px 2px 2px 0px black, 0 5px 10px 0 black;\n    transform: translateY(2px);\n}\n\n.divButtons {\n    position: fixed;\n    right: 0;\n    bottom: 0;\n    width: calc(100% - 16px);\n    height: fit-content;\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    margin: 8px;\n    padding: 8px;\n    background-color: #1F2126;\n    border-top: 1px solid #2A2C33;\n    box-sizing: border-box;\n}\n\n.remove-button-container {\n    display: flex;\n    justify-content: flex-end;\n    width: 100%;\n    margin-top: 16px;\n}\n\n/* Material styles overrides */\n.mat-form-field {\n    -webkit-font-smoothing: antialiased !important;\n    -moz-osx-font-smoothing: grayscale !important;\n}\n\n.mat-mdc-select-value-text {\n    color: #FFFFFF !important;\n}\n\nmat-label {\n    color: white !important;\n}\n\nmat-select {\n    width: 100% !important;\n}\n\nsvg {\n    color: white;\n}\n\n.mat-mdc-select-arrow {\n     color: #FFFFFF !important;\n}\n\n/* Style the select panel */\n.mat-mdc-select-panel {\n    background-color: #2A2C33 !important;\n}\n\n.mat-mdc-option {\n    color: #FFFFFF !important;\n    min-height: 40px !important;\n    line-height: 24px !important;\n    padding: 8px 16px !important;\n}\n\n.mat-mdc-option:hover:not(.mat-mdc-option-disabled) {\n    background-color: rgba(255, 255, 255, 0.1) !important;\n}\n\n.mat-mdc-option.mat-mdc-option-active {\n    background-color: rgba(255, 255, 255, 0.2) !important;\n}\n\n.mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple):not(.mat-mdc-option-disabled) {\n    background-color: rgba(255, 255, 255, 0.15) !important;\n}\n\n.mat-mdc-option .mdc-list-item__primary-text {\n     color: #FFFFFF !important;\n}\n\n/* Disabled option style */\n.mat-mdc-option-disabled {\n    color: rgba(255, 255, 255, 0.5) !important;\n}\n\n/* Required field indicator */\n.mat-mdc-form-field-required-marker {\n    color: #ff4d4f !important;\n}\n\n/* Styles for Mat Chips (optional display of selected devices) */\nmat-chip-list {\n    display: block;\n    margin-top: 8px;\n}\n\nmat-chip {\n    background-color: rgba(255, 255, 255, 0.15) !important;\n    color: #FFFFFF !important;\n    margin: 2px !important;\n    padding: 4px 8px !important;\n    font-size: 12px;\n}\n\n/* Remove styles for elements that no longer exist */\n/* .alarm-type-form, .users-form, #alarm-switchCase, etc. */",
      "controllerScript" : "'esversion: 8'\n// async function getAlarms() {}\n\n// ----- CONSTANTS -----\n// Remove ALARM_TYPES as we only have one type now.\n\n// ----- INTERNAL STATE UPDATE FUNCTIONS -----\nfunction _updateSaveButtonState() {\n    const $scope = self.ctx.$scope;\n    if (!$scope) return; // Safety check\n\n    let isDisabled = false;\n    if ($scope.loading) {\n        isDisabled = true;\n    } else if (!$scope.demandRules || $scope.demandRules.length === 0) { // Should always have one rule\n        isDisabled = true;\n    } else if (!$scope.demandRules[0] || !$scope.demandRules[0].ruleFormGroup || !$scope.demandRules[0].ruleFormGroup.valid) {\n        isDisabled = true;\n    }\n    $scope.saveButtonDisabled = isDisabled;\n    // console.log('Save button disabled state updated:', $scope.saveButtonDisabled);\n}\n\n// ----- DEMAND RULE MANAGEMENT FUNCTIONS -----\nfunction initializeDemandRule(rule = {}) {\n    const $scope = self.ctx.$scope;\n    \n    // Custom validator for power range\n    const powerRangeValidator = (formGroup) => {\n        const minPower = formGroup.get('minPower').value;\n        const maxPower = formGroup.get('maxPower').value;\n        \n        if (minPower !== null && maxPower !== null && minPower > maxPower) {\n            return { powerRange: true };\n        }\n        return null;\n    };\n\n    // Custom validator for control devices (ensure at least one selected)\n    const controlDevicesRequiredValidator = (control) => {\n        if (!control.value || control.value.length === 0) {\n            return { required: true };\n        }\n        return null;\n    };\n    \n    // Initialize form group with demand control fields\n    const ruleFormGroup = $scope.fb.group({\n        'minPower': [null, [ $scope.validators.required, $scope.validators.min(0) ]],\n        'maxPower': [null, [ $scope.validators.required, $scope.validators.min(0) ]],\n        'controlDevices': [[], [ controlDevicesRequiredValidator ]]\n    }, { validators: powerRangeValidator });\n\n    // Subscribe to value changes to update save button state\n    ruleFormGroup.valueChanges.subscribe(() => {\n        _updateSaveButtonState();\n    });\n     ruleFormGroup.statusChanges.subscribe(() => { \n        _updateSaveButtonState();\n    });\n\n    // Initialize patch values - Convert Watts to kW for display\n    const patchValues = {\n        minPower: rule.minPower !== null && rule.minPower !== undefined ? rule.minPower / 1000 : null,\n        maxPower: rule.maxPower !== null && rule.maxPower !== undefined ? rule.maxPower / 1000 : null,\n        controlDevices: []\n    };\n\n    if (rule.controlDevices && Array.isArray(rule.controlDevices)) {\n        patchValues.controlDevices = rule.controlDevices.map(device => ({\n            id: device.id ? (typeof device.id === 'object' ? device.id.id : device.id) : null,\n            name: device.name || device.label || 'Unknown device'\n        })).filter(d => d.id);\n    }\n\n    ruleFormGroup.patchValue(patchValues);\n    ruleFormGroup.updateValueAndValidity();\n\n    const _rule = {\n        minPower: patchValues.minPower,\n        maxPower: patchValues.maxPower,\n        controlDevices: patchValues.controlDevices,\n        ruleFormGroup\n    };\n    \n    self.ctx.$scope.demandRules = [_rule]; // Always a single rule\n    _updateSaveButtonState(); \n    self.ctx.detectChanges();\n}\n\n// ----- API Functions -----\nasync function sendRPC(centralId, body) {\n    const $http = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('http'),);\n    const response = await $http.post(`https://${centralId}.y.myio.com.br/api/rpc`, body).toPromise();\n    \n    //console.log(response);\n    \n    return response;\n}\n\nasync function submit() {\n    self.ctx.$scope.submitted = true;\n    _updateSaveButtonState(); \n\n    if (self.ctx.$scope.saveButtonDisabled) { \n        alert('Por favor, corrija os erros no formulário antes de salvar.');\n        return;\n    }\n\n    const { centralId, customerId } = self.ctx.settings;\n    const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n\n    const singleRuleFormValues = self.ctx.$scope.demandRules[0].ruleFormGroup.value;\n\n    let controlDevicesToSave = [];\n    if (singleRuleFormValues.controlDevices && Array.isArray(singleRuleFormValues.controlDevices)) {\n        controlDevicesToSave = singleRuleFormValues.controlDevices.map(device => ({\n            id: device.id ? (typeof device.id === 'object' ? device.id.id : device.id) : null,\n            name: device.name || device.label || 'Unknown device'\n        })).filter(d => d.id);\n    }\n    \n    // Convert kW to Watts for storage\n    const minPowerWatts = singleRuleFormValues.minPower * 1000;\n    const maxPowerWatts = singleRuleFormValues.maxPower * 1000;\n    \n    const attributes = [\n        { key: 'minPower', value: minPowerWatts },\n        { key: 'maxPower', value: maxPowerWatts },\n        { key: 'controlDevices', value: controlDevicesToSave }\n    ];\n\n    // Data for RPC - send in kW (original form values)\n    const rpcParams = {\n        minPower: singleRuleFormValues.minPower,\n        maxPower: singleRuleFormValues.maxPower,\n        controlDevices: controlDevicesToSave\n    };\n\n    const entityName = self.ctx.defaultSubscription\n        .data[0].datasource.entityName;\n    const entityId = {\n        id: self.ctx.defaultSubscription.data[0]\n            .datasource.entityId,\n        entityType: self.ctx.defaultSubscription.data[0].datasource.entityType || 'DEVICE',\n    };\n\n    console.log('Entity id: ', entityId);\n    console.log('Saving attributes (in Watts): ', attributes);\n    console.log('RPC params (in kW): ', rpcParams);\n\n    try {\n        await sendRPC(centralId, {\n            device: entityName,\n            method: 'updateDemand',\n            params: rpcParams, // Send data as a single object for RPC\n        });\n\n        await attributeService\n             .saveEntityAttributes(entityId, 'SHARED_SCOPE',\n                 attributes) // Save attributes individually\n             .toPromise();\n             \n        alert('Salvo com sucesso.');\n\n    } catch (e) {\n        console.log('E:', e);\n        alert('Erro ao salvar ou dispositivo inativo.');\n    }\n}\n\n// ----- Lifecycle Hooks -----\nself.onInit = async function() {\n    self.ctx.$scope.loading = true; \n    self.ctx.$scope.saveButtonDisabled = true;\n    console.log('v1.1 - Single Demand Control Widget Init');\n\n    if (!self.ctx.$scope.fb) {\n        console.error('FormBuilder (fb) is not available on the scope.');\n        self.ctx.$scope.loading = false;\n        _updateSaveButtonState();\n        self.ctx.detectChanges(); \n        return;\n    }\n\n    self.ctx.$scope.onDeviceSearchInputChange = onDeviceSearchInputChange;\n    self.ctx.$scope.displayDeviceFn = displayDeviceFn;\n    self.ctx.$scope.submit = submit;\n    self.ctx.$scope.compareDeviceObjects = compareDeviceObjects;\n    self.ctx.$scope.initializeDemandRule = initializeDemandRule; // Expose for potential re-initialization if needed\n\n    self.ctx.$scope.demandRules = []; // Will contain a single rule object\n    self.ctx.$scope.filteredDevices = [];\n    self.ctx.$scope.deviceSearchText = '';\n    \n    try {\n        const entityDatasource = self.ctx.defaultSubscription.data[0].datasource;\n        self.ctx.$scope.entityName = entityDatasource.entityLabel;\n        self.ctx.$scope.entityId = entityDatasource.entityId;\n        const entityType = entityDatasource.entityType || 'DEVICE';\n\n        const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n        // Fetch individual attributes\n        const attributeKeys = ['minPower', 'maxPower', 'controlDevices'];\n        const attributesData = await attributeService.getEntityAttributes(\n            { id: self.ctx.$scope.entityId, entityType: entityType },\n            'SHARED_SCOPE',\n            attributeKeys\n        ).toPromise();\n\n        const savedRuleData = {};\n        attributesData.forEach(attr => {\n            savedRuleData[attr.key] = attr.value;\n        });\n        \n        console.log('Loaded saved attributes:', savedRuleData);\n\n        // Ensure controlDevices is an array, even if null/undefined from attributes\n        const controlDevices = Array.isArray(savedRuleData.controlDevices) ? savedRuleData.controlDevices.map(d => ({\n            id: d.id ? (typeof d.id === 'object' ? d.id.id : d.id) : null,\n            name: d.name || d.label || 'Unknown device'\n        })).filter(d => d.id) : [];\n\n        const initialRule = {\n            minPower: savedRuleData.minPower !== undefined ? savedRuleData.minPower : null,\n            maxPower: savedRuleData.maxPower !== undefined ? savedRuleData.maxPower : null,\n            controlDevices: controlDevices\n        };\n        \n        initializeDemandRule(initialRule);\n\n    } catch (error) {\n        console.error('Error during onInit (loading attributes, entity info, or processing rule):', error);\n        // Initialize with an empty rule if loading fails\n        initializeDemandRule({}); \n    } finally {\n        self.ctx.$scope.loading = false;\n        _updateSaveButtonState(); \n        self.ctx.detectChanges();     \n    }\n};\n\nself.onDataUpdated = function() {\n    _updateSaveButtonState(); // Update on any external data update\n    self.ctx.detectChanges();\n}\n\nself.onDestroy = function() {\n    // Unsubscribe from form changes if necessary, though usually handled by Angular's destruction\n    self.ctx.detectChanges();\n}\n\n// ----- Device Search Functions -----\nasync function searchDevices(searchText) {\n    try {\n        console.log(\"Searching for devices with text:\", searchText);\n        const deviceService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('deviceService'));\n        const customerId = self.ctx.settings.customerId;\n        \n        if (!customerId) {\n            console.warn(\"No customer ID available for device search, trying tenant level\");\n            // Attempt tenant level search if customerId is missing\n             const pageLink = {\n                page: 0,\n                pageSize: 50,\n                textSearch: searchText,\n                toQuery: function() {\n                    let query = `?pageSize=${this.pageSize}&page=${this.page}`;\n                    if (this.textSearch && this.textSearch.trim().length) {\n                        const textSearch = encodeURIComponent(this.textSearch.trim());\n                        query += `&textSearch=${textSearch}`;\n                    }\n                    return query;\n                }\n            };\n            try {\n                const result = await deviceService.getTenantDeviceInfos(pageLink).toPromise();\n                 if (result && result.data) {\n                    return result.data;\n                }\n            } catch (tenantError) {\n                 console.error(\"Tenant device search also failed:\", tenantError);\n                 return [];\n            }\n            return [];\n        }\n        \n        // Create a plain object that matches the expected PageLink structure\n        const pageLink = {\n            page: 0,\n            pageSize: 50,\n            textSearch: searchText,\n            toQuery: function() {\n                let query = `?pageSize=${this.pageSize}&page=${this.page}`;\n                if (this.textSearch && this.textSearch.trim().length) {\n                    const textSearch = encodeURIComponent(this.textSearch.trim());\n                    query += `&textSearch=${textSearch}`;\n                }\n                return query;\n            }\n        };\n        \n        try {\n            let result = await deviceService.getCustomerDeviceInfos(false, customerId, pageLink).toPromise();\n            \n            if (!result || !result.data || result.data.length === 0) {\n                result = await deviceService.getCustomerDeviceInfos(true, customerId, pageLink).toPromise();\n            }\n            \n            if (result && result.data) {\n                return result.data;\n            }\n            return [];\n        } catch (e) {\n            console.error(\"Error calling getCustomerDeviceInfos:\", e);\n            return [];\n        }\n    } catch (e) {\n        console.error(\"Error in device search:\", e);\n        return [];\n    }\n}\n\nfunction displayDeviceFn(device) {\n    if (!device) return '';\n    \n    if (typeof device === 'string') return device;\n    if (device.name) return device.name;\n    if (device.label) return device.label;\n    if (device.title) return device.title;\n    \n    if (device.id) {\n        if (typeof device.id === 'string') return device.id;\n        if (device.id.id) return device.id.id;\n    }\n    \n    return 'Unknown device';\n}\n\nfunction onDeviceSearchInputChange(searchText) {\n    const effectiveSearchText = searchText !== undefined ? searchText : self.ctx.$scope.deviceSearchText;\n\n    if (effectiveSearchText && effectiveSearchText.length >= 2) {\n        console.log('Device search triggered for:', effectiveSearchText);\n        // Set loading for device search if you want UI feedback\n        // self.ctx.$scope.deviceSearchLoading = true; \n        // _updateSaveButtonState(); // If device search affects save button\n        // self.ctx.detectChanges();\n\n        searchDevices(effectiveSearchText).then(devices => {\n            console.log('Found devices:', devices.length);\n            \n            const formattedDevices = devices.map(device => {\n                const deviceId = device.id ? (typeof device.id === 'object' ? device.id.id : device.id) : null;\n                const displayName = device.name || device.label || deviceId || 'Unknown device';\n                return {\n                    id: deviceId,\n                    name: displayName\n                };\n            }).filter(d => d.id);\n            \n            self.ctx.$scope.filteredDevices = formattedDevices;\n        }).catch(err => {\n            console.error(\"Error in device search:\", err);\n            self.ctx.$scope.filteredDevices = [];\n        }).finally(() => {\n            // self.ctx.$scope.deviceSearchLoading = false;\n            // _updateSaveButtonState();\n            self.ctx.detectChanges();\n        });\n    } else {\n        self.ctx.$scope.filteredDevices = [];\n        self.ctx.detectChanges();\n    }\n}\n\nfunction compareDeviceObjects(o1, o2) {\n    return o1 && o2 ? o1.id === o2.id : o1 === o2;\n}",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"centralId\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Id da Central\"\r\n            },\r\n            \"customerId\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Id do CustomerId\"\r\n            }\r\n        },\r\n        \"required\": [\"centralId\", \"customerId\"]\r\n    },\r\n    \"form\": [\r\n        \"centralId\",\r\n        \"customerId\"\r\n    ]\r\n}",
      "dataKeySettingsSchema" : "",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "tb-value-card-widget-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "",
      "defaultConfig" : "{\"timewindow\":{\"realtime\":{\"interval\":1000,\"timewindowMs\":86400000},\"aggregation\":{\"type\":\"NONE\",\"limit\":200}},\"showTitle\":true,\"backgroundColor\":\"#191B1F\",\"color\":\"rgb(255, 255, 255)\",\"padding\":\"4px\",\"settings\":{\"customerId\":\"2a7b1be0-4eab-11ef-ad2c-53aeabe7d3fa\",\"centralId\":\"2a7b1be0-4eab-11ef-ad2c-53aeabe7d3fa\"},\"title\":\"Config Estouro Demanda\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400,\"padding\":\"5px 10px 5px 10px\"},\"useDashboardTimewindow\":false,\"showLegend\":false,\"alarmSearchStatus\":\"ANY\",\"alarmsPollingInterval\":5,\"showTitleIcon\":false,\"titleIcon\":\"warning\",\"iconColor\":\"rgba(0, 0, 0, 0.87)\",\"iconSize\":\"24px\",\"titleTooltip\":\"\",\"widgetStyle\":{},\"displayTimewindow\":false,\"actions\":{},\"alarmStatusList\":[],\"alarmSeverityList\":[],\"alarmTypeList\":[],\"searchPropagatedAlarms\":false,\"configMode\":\"advanced\",\"alarmFilterConfig\":null,\"borderRadius\":\"10px\",\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"titleFont\":null,\"titleColor\":null,\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.36735227486958455,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}]}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "36228aa0-2aa1-11f0-b315-d72492d4068f"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}