{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "somat_rio_do_per_odo",
    "name" : "Somatório do Período",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 8,
      "sizeY" : 5.5,
      "resources" : [ ],
      "templateHtml" : "<mat-card\n    [ngStyle]=\"{'background-color': numericCurrentConsumption > numericLastConsumption ? 'rgba(219, 50, 35, 0.9)' : 'unset', \n    'color': numericCurrentConsumption > numericLastConsumption ? '#ffffff' : 'unset'}\"\n    class=\"myio-comparativeConsumption-card\">\n     \n    <mat-card-content class=\"myio-comparativeConsumption-card-header\">\n       <div>  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32px\" height=\"32px\" viewBox=\"0 -880 960 960\"  fill=\"#fcba03\">\n            <path d=\"m456-200 174-340H510v-220L330-420h126v220Zm24 120q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5-156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z\"/>\n        </svg>\n        </div>\n        <!-- Loading and Error States -->\n        <div *ngIf=\"isLoading\" class=\"myio-loading-message\">Carregando...</div>\n        <div *ngIf=\"errorMessage && !isLoading\" class=\"myio-error-message\">{{errorMessage}}</div>\n\n        <div *ngIf=\"!isLoading && !errorMessage\" class=\"myio-header-percentages\">\n            <span class=\"myio-icon\">{{percentages}}%</span>\n                <svg *ngIf=\"percentageType === 'decrease'\" xmlns=\"http://www.w3.org/2000/svg\" height=\"35px\" viewBox=\"0 -960 960 960\" width=\"35px\" style=\"fill: currentColor;\">\n                    <path d=\"M440-240v-368L296-464l-56-56 240-240 240 240-56 56-144-144v368h-80Z\"/>\n                </svg>\n                <svg *ngIf=\"percentageType === 'increase'\" xmlns=\"http://www.w3.org/2000/svg\" height=\"35px\" viewBox=\"0 -960 960 960\" width=\"35px\" style=\"fill: currentColor;\">\n                    <path d=\"M480-240 240-480l56-56 144 144v-368h80v368l144-144 56 56-240 240Z\"/>\n                </svg>\n        </div> \n    </mat-card-content>\n    <mat-card-content *ngIf=\"!isLoading && !errorMessage\" class=\"myio-comparativeConsumption-card-content\">\n        <mat-card-content class=\"card-content\">\n            <mat-card-title class=\"content-telemetry-title\">{{title}} {{entityName}}</mat-card-title>\n            <mat-card-title class=\"content-telemetry-consumption\">{{currentConsumption}} {{measurement}}</mat-card-title>\n        </mat-card-content>\n        <mat-card-content class=\"card-content\">\n            <mat-card-title class=\"content-latest-telemetry-title\">Último periodo:</mat-card-title>\n            <mat-card-title class=\"content-latest-telemetry-consumption\">{{lastConsumption}} {{measurement}}</mat-card-title>\n        </mat-card-content>\n    </mat-card-content>\n\n    <mat-card-footer class=\"myio-comparativeConsumption-card-footer\">\n        \n    </mat-card-footer>    \n</mat-card>",
      "templateCss" : ".myio-comparativeConsumption-card{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    box-shadow: none;\n}\n.myio-comparativeConsumption-card-content{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n\n.myio-comparativeConsumption-card-header {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start; \n}\n\n.myio-svg-container {\n    display: flex;\n    align-items: center;\n}\n\n.myio-header-percentages {\n    display: flex;\n    align-items: center; \n    font-size: 12px !important;\n}\n\n.myio-icon{\n    font-size: 20px;\n}\n\n.card-content{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.content-telemetry-title{\n    text-align: center;\n    font-size: 18px;\n\n}\n.content-telemetry-consumption{\n    font-size: 24px;\n    font-weight: bold\n}\n.content-latest-telemetry-title{\n    font-weight: 400;\n    text-align: center;\n    font-size: 12px;\n}\n.content-latest-telemetry-consumption{\n    font-size: 13px;\n}",
      "controllerScript" : "// Helper function to format a millisecond timestamp to YYYY-MM-DD\nfunction formatDateToYMD(timestampMs, tzIdentifier) {\n    const date = new Date(timestampMs);\n    const formatter = new Intl.DateTimeFormat('default', {\n        timeZone: tzIdentifier,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n    });\n    \n    const parts = formatter.formatToParts(date);\n    const year = parts.find(p => p.type === 'year').value;\n    const month = parts.find(p => p.type === 'month').value;\n    const day = parts.find(p => p.type === 'day').value;\n    \n    return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n}\n\n// Helper function to determine a suitable interval based on time duration\nfunction determineInterval(startTimeMs, endTimeMs) {\n    const durationMs = endTimeMs - startTimeMs;\n    const durationDays = durationMs / (1000 * 60 * 60 * 24);\n\n    console.log('Duration days: ', durationDays);\n    if (durationDays > 2) { // More than 2 days\n        return '1 month';\n    } else { // 2 days or less\n        return '1 day';\n    }\n}\n\nvar widgetUtils = {\n    percentageDisplayElem: null,\n    widgetTitleElem: null,\n    currentSumDisplayElem: null,\n    previousSumDisplayElem: null,\n    chartContainerElement: null, // Moved here for consistency if needed elsewhere\n\n    fetchAndDisplayComparisonData: async function() {\n        if (!window.EnergyChartSDK || typeof window.EnergyChartSDK.getEnergyComparisonSum !== 'function') {\n            console.error('EnergyChartSDK.getEnergyComparisonSum is not available.');\n            if (widgetUtils.percentageDisplayElem) widgetUtils.percentageDisplayElem.textContent = 'SDK indisponível';\n            return;\n        }\n\n        const { centralId, slaveId } = self.ctx.$scope;\n        const timeWindow = self.ctx.timeWindow;\n        const settings = self.ctx.settings || {};\n        const apiBaseUrl = settings.apiBaseUrl || 'https://ingestion.myio-bas.com';\n\n        if (!centralId || slaveId === undefined || slaveId === null || !timeWindow || !timeWindow.minTime || !timeWindow.maxTime) {\n            console.error('Dados insuficientes para buscar soma de comparação (centralId, slaveId, timeWindow).');\n            if (widgetUtils.percentageDisplayElem) widgetUtils.percentageDisplayElem.textContent = 'Dados insuficientes';\n            if (widgetUtils.currentSumDisplayElem) widgetUtils.currentSumDisplayElem.textContent = '--,-- kWh';\n            if (widgetUtils.previousSumDisplayElem) widgetUtils.previousSumDisplayElem.textContent = '--,-- kWh';\n            return;\n        }\n\n        const startTs = new Date(timeWindow.minTime).toISOString();\n        const endTs = new Date(timeWindow.maxTime).toISOString();\n\n        try {\n            const comparisonData = await window.EnergyChartSDK.getEnergyComparisonSum({\n                gatewayId: centralId,\n                slaveId: Number(slaveId),\n                startTs,\n                endTs,\n                apiBaseUrl\n            });\n\n            const currentKwh = comparisonData.currentPeriod.totalKwh;\n            const previousKwh = comparisonData.previousPeriod.totalKwh;\n\n            if (widgetUtils.currentSumDisplayElem) {\n                widgetUtils.currentSumDisplayElem.textContent = `${currentKwh.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 })} kWh`;\n            }\n            if (widgetUtils.previousSumDisplayElem) {\n                widgetUtils.previousSumDisplayElem.textContent = `${previousKwh.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 })} kWh`;\n            }\n\n            let percentageText = '--%';\n            if (previousKwh !== 0) {\n                const percentage = ((currentKwh - previousKwh) / previousKwh) * 100;\n                const arrow = percentage >= 0 ? '↑' : '↓';\n                const displayPercentage = Math.abs(percentage) < 0.05 ? 0 : Math.abs(percentage);\n                percentageText = `${displayPercentage.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 1, maximumFractionDigits: 1 })}% ${arrow}`;\n            } else if (currentKwh > 0) {\n                percentageText = 'Novo ↑';\n            } else {\n                percentageText = '0,0% --';\n            }\n            \n            if (widgetUtils.percentageDisplayElem) {\n                widgetUtils.percentageDisplayElem.textContent = percentageText;\n            }\n\n        } catch (error) {\n            console.error('Erro ao buscar ou exibir soma de comparação de energia:', error);\n            if (widgetUtils.percentageDisplayElem) widgetUtils.percentageDisplayElem.textContent = 'Erro API';\n            if (widgetUtils.currentSumDisplayElem) widgetUtils.currentSumDisplayElem.textContent = '--,-- kWh';\n            if (widgetUtils.previousSumDisplayElem) widgetUtils.previousSumDisplayElem.textContent = '--,-- kWh';\n        }\n    }\n};\n\n// Helper function to escape HTML special characters\nfunction escapeHtml(unsafe) {\n    if (typeof unsafe !== 'string') {\n        unsafe = String(unsafe);\n    }\n    return unsafe\n         .replace(/&/g, \"&amp;\")\n         .replace(/</g, \"&lt;\")\n         .replace(/>/g, \"&gt;\")\n         .replace(/\"/g, \"&quot;\")\n         .replace(/'/g, \"&#039;\");\n}\n\nself.onInit = async function() {\n    self.ctx.$scope.centralId = null;\n    self.ctx.$scope.slaveId = null;\n\n    const widgetWrapper = document.createElement('div');\n    widgetWrapper.style.backgroundColor = '#D32F2F';\n    widgetWrapper.style.color = 'white';\n    widgetWrapper.style.padding = '15px';\n    widgetWrapper.style.fontFamily = 'Roboto, \"Helvetica Neue\", Arial, sans-serif';\n    widgetWrapper.style.height = '100%';\n    widgetWrapper.style.display = 'flex';\n    widgetWrapper.style.flexDirection = 'column';\n    widgetWrapper.style.boxSizing = 'border-box';\n\n    const lightningBoltSvg = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"#FFEB3B\" width=\"28px\" height=\"28px\" style=\"border-radius: 50%; background: rgba(255,255,255,0.1); padding: 2px;\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M7 2v11h3v9l7-12h-4l4-8z\"/></svg>';\n    const sumComparisonHtml = `\n        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;\">\n            <span id=\"widgetEnergyIconContainer\">${lightningBoltSvg}</span>\n            <span id=\"widgetPercentageDisplay\" style=\"font-size: 22px; font-weight: 500;\">--%</span>\n        </div>\n        <div id=\"widgetTitleDisplay\" style=\"font-size: 15px; margin-bottom: 8px; text-align: center; line-height: 1.3; word-wrap: break-word; min-height: 38px;\">\n            Consumo de Energia\n        </div>\n        <div id=\"widgetCurrentSumDisplay\" style=\"font-size: 32px; font-weight: bold; margin-bottom: 15px; text-align: center;\">\n            --,-- kWh\n        </div>\n        <div style=\"font-size: 13px; text-align: center; opacity: 0.9;\">\n            Último período:\n            <div id=\"widgetPreviousSumDisplay\" style=\"font-size: 16px; font-weight: 500; margin-top: 4px;\">\n                --,-- kWh\n            </div>\n        </div>\n    `;\n\n    const sumComparisonContainer = document.createElement('div');\n    sumComparisonContainer.innerHTML = sumComparisonHtml;\n    widgetWrapper.appendChild(sumComparisonContainer);\n\n    widgetUtils.percentageDisplayElem = sumComparisonContainer.querySelector('#widgetPercentageDisplay');\n    widgetUtils.widgetTitleElem = sumComparisonContainer.querySelector('#widgetTitleDisplay');\n    widgetUtils.currentSumDisplayElem = sumComparisonContainer.querySelector('#widgetCurrentSumDisplay');\n    widgetUtils.previousSumDisplayElem = sumComparisonContainer.querySelector('#widgetPreviousSumDisplay');\n    widgetUtils.widgetTitleElem.textContent = self.ctx.widgetTitle || 'Consumo de Energia';\n\n    widgetUtils.chartContainerElement = document.createElement('div');\n    widgetUtils.chartContainerElement.style.width = '100%';\n    widgetUtils.chartContainerElement.style.flexGrow = '1';\n    widgetUtils.chartContainerElement.style.minHeight = '150px';\n    widgetUtils.chartContainerElement.style.marginTop = '15px';\n    widgetWrapper.appendChild(widgetUtils.chartContainerElement);\n\n    self.ctx.$container.html(''); \n    self.ctx.$container.append(widgetWrapper);\n    self.chartInstance = null;\n\n    try {\n        const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n        const { entityId, entityType } = self.ctx.defaultSubscription.data[0].datasource;\n        const deviceAttributes = await attributeService.getEntityAttributes({ id: entityId, entityType }, 'SERVER_SCOPE', ['centralId', 'slaveId']).toPromise();\n        \n        const centralIdAttr = deviceAttributes.find(attribute => attribute.key === 'centralId');\n        const slaveIdAttr = deviceAttributes.find(attribute => attribute.key === 'slaveId');\n        const centralId = centralIdAttr ? centralIdAttr.value : null;\n        const slaveIdStr = slaveIdAttr ? slaveIdAttr.value : null;\n        const slaveId = slaveIdStr ? parseInt(slaveIdStr) : null;\n\n        if (!centralId || slaveId === null || isNaN(slaveId)) {\n            const errorMsgContent = `Atributos do dispositivo ausentes ou inválidos: centralId='${centralId}', slaveId='${slaveIdStr}'. Não é possível inicializar.`;\n            console.error(errorMsgContent);\n            sumComparisonContainer.innerHTML = `<div style=\"padding: 20px; text-align: center;\">${escapeHtml(errorMsgContent)}</div>`;\n            if (widgetUtils.chartContainerElement) widgetUtils.chartContainerElement.innerHTML = '';\n            return;\n        }\n                \n        self.ctx.$scope.centralId = centralId;\n        self.ctx.$scope.slaveId = slaveId;\n\n        await widgetUtils.fetchAndDisplayComparisonData();\n        initChart(slaveId, centralId, self.ctx.timeWindow.timezone || self.ctx.settings.timezone || 'America/Sao_Paulo');\n\n    } catch (e) {\n        const errorMsgContent = `Erro ao inicializar: ${(e.message || 'Erro desconhecido')}`;\n        console.error('Erro ao buscar atributos do dispositivo ou inicializar:', e);\n        sumComparisonContainer.innerHTML = `<div style=\"padding: 20px; text-align: center;\">${escapeHtml(errorMsgContent)}</div>`;\n        if(widgetUtils.chartContainerElement) widgetUtils.chartContainerElement.innerHTML = '';\n    }\n};\n\nfunction initChart(slaveId, centralId, initialTimezone) {\n    // Destroy previous instance if it exists\n    if (self.chartInstance && typeof self.chartInstance.destroy === 'function') {\n        self.chartInstance.destroy();\n        self.chartInstance = null;\n    }\n    \n    // Ensure chart container is clean (SDK's destroy should handle iframe, but good practice)\n    if (widgetUtils.chartContainerElement) {\n        widgetUtils.chartContainerElement.innerHTML = ''; // Use the one from widgetUtils\n    } else { // Fallback if somehow not set, though it should be\n        console.error(\"chartContainerElement not found in widgetUtils for initChart\");\n        return;\n    }\n\n\n    let renderGraph;\n    if (window.EnergyChartSDK && typeof window.EnergyChartSDK.renderGraph === 'function') {\n        renderGraph = window.EnergyChartSDK.renderGraph;\n    } else {\n        console.error('EnergyChartSDK não carregado!');\n        if (widgetUtils.chartContainerElement) {\n            widgetUtils.chartContainerElement.innerHTML = '<div style=\"padding: 20px; text-align: center; color: orange;\">EnergyChartSDK não carregado.</div>';\n        }\n        return;\n    }\n\n    const settings = self.ctx.settings || {};\n    const timeWindow = self.ctx.timeWindow;\n\n    if (!timeWindow || typeof timeWindow.minTime === 'undefined' || typeof timeWindow.maxTime === 'undefined') {\n        console.error('Janela de tempo não disponível ou formato incorreto.');\n        if (widgetUtils.chartContainerElement) {\n             widgetUtils.chartContainerElement.innerHTML = '<div style=\"padding: 20px; text-align: center; color: orange;\">Janela de tempo não disponível.</div>';\n        }\n        return;\n    }\n\n    const gatewayId = centralId;\n    const startDate = formatDateToYMD(timeWindow.minTime, initialTimezone);\n    const endDate = formatDateToYMD(timeWindow.maxTime, initialTimezone);\n    const interval = determineInterval(timeWindow.minTime, timeWindow.maxTime);\n    const theme = settings.theme || 'light'; // This widget is dark, chart should adapt or be dark by default\n    const apiBaseUrl = settings.apiBaseUrl || 'https://ingestion.myio-bas.com';\n    const timezone = initialTimezone;\n\n    console.log(`Inicializando gráfico com: gatewayId=${gatewayId}, slaveId=${slaveId}, startDate=${startDate}, endDate=${endDate}, interval=${interval}, theme=${theme}, apiBaseUrl=${apiBaseUrl}, timezone=${timezone}`);\n\n    // Render graph into the chartContainerElement from widgetUtils\n    self.chartInstance = renderGraph(widgetUtils.chartContainerElement, {\n        gatewayId: gatewayId,\n        slaveId: slaveId,\n        startDate: startDate,\n        endDate: endDate,\n        interval: interval,\n        theme: 'dark', // Forcing dark theme for chart to match widget background\n        timezone: timezone,\n        iframeBaseUrl: settings.iframeBaseUrl || 'https://graphs.ingestion.myio-bas.com',\n        apiBaseUrl: apiBaseUrl,\n        chartPath: settings.chartPath || '/embed/energy-bar'\n    });\n\n    if (self.chartInstance && typeof self.chartInstance.on === 'function') {\n        self.chartInstance.on('drilldown', (data) => {\n            console.log('SDK Drilldown Event:', data);\n        });\n        self.chartInstance.on('error', (errorData) => {\n            console.error('SDK Error Event:', errorData);\n             if (widgetUtils.chartContainerElement) {\n                const safeErrorMessage = escapeHtml(errorData.message || 'Erro desconhecido');\n                widgetUtils.chartContainerElement.innerHTML = `<div style=\"padding: 20px; text-align: center; color: orange;\">Erro no Gráfico: ${safeErrorMessage}</div>`;\n            }\n        });\n    } else if(self.chartInstance) {\n        console.warn(\"EnergyChartSDK instance não possui método 'on' para listeners.\");\n    }\n}\n\nself.onTimewindowChanged = async function(newTimeWindow) {\n    const currentSlaveId = self.ctx.$scope.slaveId;\n    const currentCentralId = self.ctx.$scope.centralId;\n    const newTimezone = newTimeWindow.timezone || self.ctx.settings.timezone || 'America/Sao_Paulo';\n\n    if (currentCentralId && currentSlaveId !== undefined && currentSlaveId !== null) {\n        // Update comparison data first\n        await widgetUtils.fetchAndDisplayComparisonData(); // Uses self.ctx.timeWindow which is updated by TB\n\n        // Then update chart if instance exists and has changePeriod\n        if (self.chartInstance && typeof self.chartInstance.changePeriod === 'function') {\n            const startDate = formatDateToYMD(newTimeWindow.minTime, newTimezone);\n            const endDate = formatDateToYMD(newTimeWindow.maxTime, newTimezone);\n            const interval = determineInterval(newTimeWindow.minTime, newTimeWindow.maxTime);\n            \n            console.log(`Janela de tempo alterada. Atualizando gráfico para: startDate=${startDate}, endDate=${endDate}, interval=${interval}, timezone=${newTimezone}`);\n            self.chartInstance.changePeriod(startDate, endDate, interval);\n            // If SDK's changePeriod needs timezone or other options, consider self.chartInstance.updateOptions(...)\n            // Forcing dark theme on update if possible, or re-init if theme must change\n            // self.chartInstance.updateOptions({ theme: 'dark', timezone: newTimezone }); \n        } else {\n             console.warn(\"chartInstance.changePeriod não é uma função ou chartInstance não existe. Re-inicializando para mudança de janela de tempo.\");\n             initChart(currentSlaveId, currentCentralId, newTimezone); // Fallback to re-init\n        }\n    } else {\n        console.warn('Não é possível atualizar dados/gráfico na mudança de janela: centralId ou slaveId não prontos.');\n        // Potentially re-initialize if attributes might become available\n        // initChart(currentSlaveId, currentCentralId, newTimezone); // Or just wait if onInit will handle it.\n    }\n};\n\nself.onDataUpdated = async function() {\n    // This is often called when underlying data sources change,\n    // which might affect attributes or time window.\n    // Re-evaluating the time window is usually what's needed if it drives the display.\n    // The onTimewindowChanged handler will be called by ThingsBoard if the time window actually changes.\n    // If other data (like attributes) could change and require re-fetch of sums, call here:\n    // await widgetUtils.fetchAndDisplayComparisonData(); \n    // For now, let's assume onTimewindowChanged is sufficient for sum data refresh.\n    \n    // If the chart also needs to react to onDataUpdated beyond timewindow changes:\n    // (e.g. if entity alias changes, onInit would typically re-run or a more complex setup is needed)\n    // For simple cases, onTimewindowChanged driven by this might be enough.\n    // self.onTimewindowChanged(self.ctx.timeWindow); // This can cause loops if not careful.\n    // It's better to let TB call onTimewindowChanged.\n    // If you need to react to specific data updates for the sum, you might need to get specific data keys\n    // from self.ctx.defaultSubscription.data and compare.\n    // For now, keeping it simple. The main driver is timewindow.\n};\n\nself.onDestroy = function() {\n    if (self.chartInstance && typeof self.chartInstance.destroy === 'function') {\n        self.chartInstance.destroy();\n        self.chartInstance = null;\n    }\n    // Clean up widgetUtils elements if necessary, though widget destruction by TB should handle container\n    widgetUtils.percentageDisplayElem = null;\n    widgetUtils.widgetTitleElem = null;\n    widgetUtils.currentSumDisplayElem = null;\n    widgetUtils.previousSumDisplayElem = null;\n    widgetUtils.chartContainerElement = null;\n    // No need to remove widgetWrapper from self.ctx.$container, TB does this.\n};\n",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"title\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Título do Card\"\r\n            },\r\n            \"measurement\":{\r\n                \"type\":\"string\",\r\n                \"title\":\"Tipo de medição\"\r\n            }\r\n            \r\n        },\r\n        \"required\": [\"title\"]\r\n    },\r\n    \"form\": [\r\n        \"title\",\r\n        \"measurement\"\r\n        \r\n        \r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "",
      "latestDataKeySettingsDirective" : "tb-value-card-widget-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "",
      "defaultConfig" : "{\"showTitle\":false,\"backgroundColor\":\"rgba(0, 0, 0, 0)\",\"color\":\"rgba(33, 186, 79, 0.87)\",\"padding\":\"0px\",\"settings\":{\"title\":\"Título do Card\"},\"title\":\"Somatório do Período\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":null,\"mobileHeight\":null,\"configMode\":\"advanced\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\",\"useDashboardTimewindow\":false,\"displayTimewindow\":false,\"titleFont\":{\"size\":16,\"sizeUnit\":\"px\",\"family\":\"Roboto\",\"weight\":\"500\",\"style\":\"normal\",\"lineHeight\":\"24px\"},\"titleColor\":\"rgba(0, 0, 0, 0.87)\",\"titleTooltip\":\"\",\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"units\":\"\",\"decimals\":null,\"noDataDisplayMessage\":\"\",\"timewindowStyle\":{\"showIcon\":false,\"iconSize\":\"24px\",\"icon\":null,\"iconPosition\":\"left\",\"font\":{\"size\":12,\"sizeUnit\":\"px\",\"family\":\"Roboto\",\"weight\":\"400\",\"style\":\"normal\",\"lineHeight\":\"16px\"},\"color\":\"rgba(0, 0, 0, 0.38)\",\"displayTypePrefix\":true},\"margin\":\"0px\",\"borderRadius\":\"0px\",\"iconSize\":\"0px\",\"timewindow\":{\"realtime\":{\"timewindowMs\":86400000}},\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.0049099568976449515,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.29530602333210765,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"enableDataExport\":false}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "9fa00650-338f-11f0-8cbd-2b87fdb093e1"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}