{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "somat_rio_do_per_odo",
    "name" : "Somatório do Período",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 8,
      "sizeY" : 5.5,
      "resources" : [ ],
      "templateHtml" : "<mat-card\r\n    [ngStyle]=\"{'background-color': (+currentConsumption) > (+lastConsumption) ? 'rgba(219, 50, 35, 0.9)' : 'unset', \r\n    'color':(+currentConsumption) > (+lastConsumption) ? '#ffffff' : 'unset'}\"\r\n    class=\"myio-comparativeConsumption-card\">\r\n     \r\n    <mat-card-content class=\"myio-comparativeConsumption-card-header\">\r\n       <div>  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32px\" height=\"32px\" viewBox=\"0 -880 960 960\"  fill=\"#fcba03\">\r\n            <path d=\"m456-200 174-340H510v-220L330-420h126v220Zm24 120q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z\"/>\r\n        </svg>\r\n        </div>\r\n        <div class=\"myio-header-percentages\">\r\n            <span class=\"myio-icon\">{{percentages}}%</span>\r\n                <svg *ngIf=\"lastConsumption > currentConsumption\" xmlns=\"http://www.w3.org/2000/svg\" height=\"35px\" viewBox=\"0 -960 960 960\" width=\"35px\" style=\"fill: currentColor;\">\r\n                    <path d=\"M440-240v-368L296-464l-56-56 240-240 240 240-56 56-144-144v368h-80Z\"/>\r\n                </svg>\r\n                <svg *ngIf=\"lastConsumption < currentConsumption\" xmlns=\"http://www.w3.org/2000/svg\" height=\"35px\" viewBox=\"0 -960 960 960\" width=\"35px\" style=\"fill: currentColor;\">\r\n                    <path d=\"M480-240 240-480l56-56 144 144v-368h80v368l144-144 56 56-240 240Z\"/>\r\n                </svg>\r\n        </div> \r\n    </mat-card-content>\r\n    <mat-card-content class=\"myio-comparativeConsumption-card-content\">\r\n        <mat-card-content class=\"card-content\">\r\n            <mat-card-title class=\"content-telemetry-title\">{{title}} {{entityName}}</mat-card-title>\r\n            <mat-card-title class=\"content-telemetry-consumption\">{{currentConsumption}} {{measurement}}</mat-card-title>\r\n        </mat-card-content>\r\n        <mat-card-content class=\"card-content\">\r\n            <mat-card-title class=\"content-latest-telemetry-title\">Último periodo:</mat-card-title>\r\n            <mat-card-title class=\"content-latest-telemetry-consumption\">{{lastConsumption}} {{measurement}}</mat-card-title>\r\n        </mat-card-content>\r\n    </mat-card-content>\r\n\r\n    <mat-card-footer class=\"myio-comparativeConsumption-card-footer\">\r\n        \r\n    </mat-card-footer>    \r\n</mat-card>",
      "templateCss" : ".myio-comparativeConsumption-card{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    box-shadow: none;\n}\n.myio-comparativeConsumption-card-content{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n\n.myio-comparativeConsumption-card-header {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start; \n}\n\n.myio-svg-container {\n    display: flex;\n    align-items: center;\n}\n\n.myio-header-percentages {\n    display: flex;\n    align-items: center; \n    font-size: 12px !important;\n}\n\n.myio-icon{\n    font-size: 20px;\n}\n\n.card-content{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.content-telemetry-title{\n    text-align: center;\n    font-size: 18px;\n\n}\n.content-telemetry-consumption{\n    font-size: 24px;\n    font-weight: bold\n}\n.content-latest-telemetry-title{\n    font-weight: 400;\n    text-align: center;\n    font-size: 12px;\n}\n.content-latest-telemetry-consumption{\n    font-size: 13px;\n}",
      "controllerScript" : "function percentage(totalConsumptionLastMonth, totalConsumptionThisMonth) {\r\n    if (totalConsumptionLastMonth === 0) {\r\n        return 0; // evita divisao por zero se o consumo do mes passado for 0\r\n    }\r\n\r\n    if (totalConsumptionLastMonth > totalConsumptionThisMonth) {\r\n        return ((totalConsumptionLastMonth - totalConsumptionThisMonth) * 100) / totalConsumptionLastMonth;\r\n    } else if (totalConsumptionLastMonth < totalConsumptionThisMonth) {\r\n        // aumento no consumo: calcula a porcentagem de aumento em relacaoo ao mes passado\r\n        return ((totalConsumptionThisMonth - totalConsumptionLastMonth) * 100) / totalConsumptionLastMonth;\r\n    } else {\r\n        // consumos iguais: não tem variacao\r\n        return 0;\r\n    }\r\n}\r\n\r\nfunction getData(startTs, endTs) {\r\n    const datasource = self.ctx.datasources[0]\r\n    const dataKey = datasource.dataKeys[0]; \r\n    const deviceIds = datasource.entity.id.id;\r\n    const attributeService = self.ctx.attributeService;\r\n    \r\n   //// console.log('datasource', datasource)\r\n   // console.log('dataKey', dataKey)\r\n   // console.log('deviceIds', deviceIds)\r\n    \r\n    \r\n    return attributeService.getEntityTimeseries(\r\n        {\r\n            entityType: 'DEVICE',\r\n            id: deviceIds,\r\n        },\r\n        [dataKey.name], \r\n        startTs,\r\n        endTs,\r\n        null,\r\n        'SUM',\r\n        8000000\r\n    )\r\n    .toPromise()\r\n    .then((data)=>{\r\n        if(!data || !data[dataKey.name]){\r\n            console.error(\"Erro: Dados ausentes ou invelidados\", data);\r\n            return 0;\r\n        }\r\n\r\n        \r\n        const whData = data[dataKey.name]; \r\n        let totalConsumption = 0;\r\n\r\n        whData.forEach(entry => {\r\n            totalConsumption += parseFloat(entry.value);\r\n        });\r\n\r\n\r\n        return totalConsumption/1000; \r\n            \r\n        })\r\n        .catch((error) => {\r\n            console.error(\"Erro ao obter dados:\", error);\r\n        });\r\n        \r\n\r\n}\r\n\r\nasync function sum(startTs, endTs) {\r\n    const datasources = self.ctx.datasources;\r\n    const attributeService = self.ctx.attributeService;\r\n\r\n    // Pegando todos os dataKeys e deviceIds\r\n    const deviceRequests = datasources.map((datasource) => {\r\n        const dataKey = datasource.dataKeys[0]; \r\n        const deviceId = datasource.entity?.id?.id;\r\n\r\n        if (!dataKey || !deviceId) return null; // Se faltar algo, ignora esse dispositivo\r\n\r\n        // Retorna a promessa da requisição\r\n        return attributeService.getEntityTimeseries(\r\n            {\r\n                entityType: 'DEVICE',\r\n                id: deviceId,\r\n            },\r\n            [dataKey.name], \r\n            startTs,\r\n            endTs,\r\n            null,\r\n            'SUM',\r\n            8000000\r\n        )\r\n        .toPromise()\r\n        .then((data) => {\r\n            if (!data || !data[dataKey.name]) {\r\n                console.error(`Erro: Dados ausentes para dispositivo ${deviceId}`, data);\r\n                return 0;\r\n            }\r\n\r\n            // Somando os valores do dispositivo específico\r\n            return data[dataKey.name].reduce((total, entry) => total + parseFloat(entry.value), 0);\r\n        })\r\n        .catch((error) => {\r\n            console.error(`Erro ao obter dados do dispositivo ${deviceId}:`, error);\r\n            return 0; // Se der erro, assume 0\r\n        });\r\n    }).filter(Boolean); // Remove os `null` do array\r\n\r\n    // Aguarda todas as requisições e soma os resultados\r\n    const consumptionValues = await Promise.all(deviceRequests);\r\n    const totalConsumption = consumptionValues.reduce((sum, value) => sum + value, 0);\r\n    console.log(\"consumptionValues\",consumptionValues)\r\n    console.log(\"totalConsumption\",totalConsumption/1000)\r\n    return totalConsumption / 1000; // Convertendo para kWh\r\n}\r\n\r\n\r\nfunction lessMonthDate(timestape){\r\n    const date = new Date(timestape);\r\n    date.setMonth(date.getMonth()-1)\r\n    return date.getTime();\r\n}\r\n\r\nfunction formatTimestamp(timestamp) {\r\n    const date = new Date(timestamp);\r\n\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n\r\n    return `${day}/${month}/${year}`;\r\n}\r\n\r\nself.onInit = async function() {\r\n    let totalConsumptionLastMonth = null\r\n    let totalConsumptionThisMonth = null\r\n    const measurement = self.ctx.settings.measurement\r\n    const title = self.ctx.settings.title\r\n    const entityName = self.ctx.defaultSubscription.data[0].datasource.entityLabel\r\n    self.ctx.$scope.entityName = entityName\r\n    self.ctx.$scope.title = title\r\n    const data = self.ctx.data[0].data\r\n    const startDate = self.ctx.timeWindow.minTime\r\n    const lastMonthStartDate = lessMonthDate(startDate)\r\n    const endDate = self.ctx.timeWindow.maxTime\r\n    const lastMonthEndDate = lessMonthDate(endDate)\r\n\r\n    console.log('Dados: ', self.ctx.datasources)\r\n    if (self.ctx.datasources.length > 1) {\r\n        totalConsumptionLastMonth = await sum(lastMonthStartDate, lastMonthEndDate);\r\n        totalConsumptionThisMonth = await sum(startDate, endDate);\r\n    }else{\r\n        totalConsumptionLastMonth = await getData(lastMonthStartDate, lastMonthEndDate);\r\n        totalConsumptionThisMonth = await getData(startDate, endDate);\r\n    }\r\n    const percentages  = percentage(totalConsumptionLastMonth,totalConsumptionThisMonth);\r\n    console.log(\"percentage\",percentages);\r\n    self.ctx.$scope.lastStartDate = formatTimestamp(lastMonthStartDate)\r\n    self.ctx.$scope.lastEndDate = formatTimestamp(lastMonthEndDate)\r\n    self.ctx.$scope.percentages = percentages.toFixed(0);\r\n    self.ctx.$scope.lastestConsumption = totalConsumptionLastMonth.toFixed(2);\r\n    self.ctx.$scope.currentConsumption = totalConsumptionThisMonth.toFixed(2);\r\n    self.ctx.$scope.measurement = measurement;\r\n    self.ctx.detectChanges();\r\n\r\n};\r\n\r\nself.onDataUpdated = async function() { \r\n    let totalConsumptionLastMonth = null\r\n    let totalConsumptionThisMonth = null\r\n    const title = self.ctx.settings.title\r\n    self.ctx.$scope.title = title\r\n    const data = self.ctx.data[0].data\r\n    console.log(\"DATE\", data);\r\n    const startDate = self.ctx.timeWindow.minTime\r\n    const lastMonthStartDate = lessMonthDate(startDate)\r\n    const endDate = self.ctx.timeWindow.maxTime\r\n    const lastMonthEndDate = lessMonthDate(endDate)\r\n    if (self.ctx.datasources.length > 1) {\r\n        totalConsumptionLastMonth = await sum(lastMonthStartDate, lastMonthEndDate);\r\n        totalConsumptionThisMonth = await sum(startDate, endDate);\r\n    }else{\r\n        totalConsumptionLastMonth = await getData(lastMonthStartDate, lastMonthEndDate);\r\n        totalConsumptionThisMonth = await getData(startDate, endDate);\r\n    }\r\n    const percentages  = percentage(totalConsumptionLastMonth,totalConsumptionThisMonth);\r\n    self.ctx.$scope.lastStartDate = formatTimestamp(lastMonthStartDate)\r\n    self.ctx.$scope.lastEndDate = formatTimestamp(lastMonthEndDate)\r\n    self.ctx.$scope.percentages = Number(percentages.toFixed(0)).toLocaleString('pt');\r\n    self.ctx.$scope.lastConsumption = Number(totalConsumptionLastMonth.toFixed(2)).toLocaleString('pt');\r\n    self.ctx.$scope.currentConsumption = Number(totalConsumptionThisMonth.toFixed(2)).toLocaleString('pt');\r\n    self.ctx.detectChanges();\r\n}\r\n\r\nself.onLatestDataUpdated = function() {\r\n     self.ctx.detectChanges();   \r\n}\r\n\r\n\r\n",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"title\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Título do Card\"\r\n            },\r\n            \"measurement\":{\r\n                \"type\":\"string\",\r\n                \"title\":\"Tipo de medição\"\r\n            }\r\n            \r\n        },\r\n        \"required\": [\"title\"]\r\n    },\r\n    \"form\": [\r\n        \"title\",\r\n        \"measurement\"\r\n        \r\n        \r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "",
      "latestDataKeySettingsDirective" : "tb-value-card-widget-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "",
      "defaultConfig" : "{\"showTitle\":false,\"backgroundColor\":\"rgba(0, 0, 0, 0)\",\"color\":\"rgba(33, 186, 79, 0.87)\",\"padding\":\"0px\",\"settings\":{\"title\":\"Título do Card\"},\"title\":\"Somatório do Período\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":null,\"mobileHeight\":null,\"configMode\":\"advanced\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\",\"useDashboardTimewindow\":false,\"displayTimewindow\":false,\"titleFont\":{\"size\":16,\"sizeUnit\":\"px\",\"family\":\"Roboto\",\"weight\":\"500\",\"style\":\"normal\",\"lineHeight\":\"24px\"},\"titleColor\":\"rgba(0, 0, 0, 0.87)\",\"titleTooltip\":\"\",\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"units\":\"\",\"decimals\":null,\"noDataDisplayMessage\":\"\",\"timewindowStyle\":{\"showIcon\":false,\"iconSize\":\"24px\",\"icon\":null,\"iconPosition\":\"left\",\"font\":{\"size\":12,\"sizeUnit\":\"px\",\"family\":\"Roboto\",\"weight\":\"400\",\"style\":\"normal\",\"lineHeight\":\"16px\"},\"color\":\"rgba(0, 0, 0, 0.38)\",\"displayTypePrefix\":true},\"margin\":\"0px\",\"borderRadius\":\"0px\",\"iconSize\":\"0px\",\"timewindow\":{\"realtime\":{\"timewindowMs\":86400000}},\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.0049099568976449515,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.29530602333210765,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"enableDataExport\":false}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "9fa00650-338f-11f0-8cbd-2b87fdb093e1"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}