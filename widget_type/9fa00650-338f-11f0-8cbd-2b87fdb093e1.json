{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "somat_rio_do_per_odo",
    "name" : "Somatório do Período",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 8,
      "sizeY" : 5.5,
      "resources" : [ ],
      "templateHtml" : "<mat-card\n    [ngStyle]=\"{'background-color': numericCurrentConsumption > numericLastConsumption ? 'rgba(219, 50, 35, 0.9)' : 'unset', \n    'color': numericCurrentConsumption > numericLastConsumption ? '#ffffff' : 'unset'}\"\n    class=\"myio-comparativeConsumption-card\">\n     \n    <mat-card-content class=\"myio-comparativeConsumption-card-header\">\n       <div>  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"32px\" height=\"32px\" viewBox=\"0 -880 960 960\"  fill=\"#fcba03\">\n            <path d=\"m456-200 174-340H510v-220L330-420h126v220Zm24 120q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5-156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z\"/>\n        </svg>\n        </div>\n        <!-- Loading and Error States -->\n        <div *ngIf=\"isLoading\" class=\"myio-loading-message\">Carregando...</div>\n        <div *ngIf=\"errorMessage && !isLoading\" class=\"myio-error-message\">{{errorMessage}}</div>\n\n        <div *ngIf=\"!isLoading && !errorMessage\" class=\"myio-header-percentages\">\n            <span class=\"myio-icon\">{{percentages}}%</span>\n                <svg *ngIf=\"percentageType === 'decrease'\" xmlns=\"http://www.w3.org/2000/svg\" height=\"35px\" viewBox=\"0 -960 960 960\" width=\"35px\" style=\"fill: currentColor;\">\n                    <path d=\"M440-240v-368L296-464l-56-56 240-240 240 240-56 56-144-144v368h-80Z\"/>\n                </svg>\n                <svg *ngIf=\"percentageType === 'increase'\" xmlns=\"http://www.w3.org/2000/svg\" height=\"35px\" viewBox=\"0 -960 960 960\" width=\"35px\" style=\"fill: currentColor;\">\n                    <path d=\"M480-240 240-480l56-56 144 144v-368h80v368l144-144 56 56-240 240Z\"/>\n                </svg>\n        </div> \n    </mat-card-content>\n    <mat-card-content *ngIf=\"!isLoading && !errorMessage\" class=\"myio-comparativeConsumption-card-content\">\n        <mat-card-content class=\"card-content\">\n            <mat-card-title class=\"content-telemetry-title\">{{title}} {{entityName}}</mat-card-title>\n            <mat-card-title class=\"content-telemetry-consumption\">{{currentConsumption}} {{measurement}}</mat-card-title>\n        </mat-card-content>\n        <mat-card-content class=\"card-content\">\n            <mat-card-title class=\"content-latest-telemetry-title\">Último periodo:</mat-card-title>\n            <mat-card-title class=\"content-latest-telemetry-consumption\">{{lastConsumption}} {{measurement}}</mat-card-title>\n        </mat-card-content>\n    </mat-card-content>\n\n    <mat-card-footer class=\"myio-comparativeConsumption-card-footer\">\n        \n    </mat-card-footer>    \n</mat-card>",
      "templateCss" : ".myio-comparativeConsumption-card{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    box-shadow: none;\n}\n.myio-comparativeConsumption-card-content{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-evenly;\n}\n\n\n.myio-comparativeConsumption-card-header {\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start; \n}\n\n.myio-svg-container {\n    display: flex;\n    align-items: center;\n}\n\n.myio-header-percentages {\n    display: flex;\n    align-items: center; \n    font-size: 12px !important;\n}\n\n.myio-icon{\n    font-size: 20px;\n}\n\n.card-content{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.content-telemetry-title{\n    text-align: center;\n    font-size: 18px;\n\n}\n.content-telemetry-consumption{\n    font-size: 24px;\n    font-weight: bold\n}\n.content-latest-telemetry-title{\n    font-weight: 400;\n    text-align: center;\n    font-size: 12px;\n}\n.content-latest-telemetry-consumption{\n    font-size: 13px;\n}",
      "controllerScript" : "// Helper function to format a millisecond timestamp to YYYY-MM-DD\nfunction formatDateToYMD(timestampMs, tzIdentifier) {\n    const date = new Date(timestampMs);\n    const formatter = new Intl.DateTimeFormat('default', {\n        timeZone: tzIdentifier,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit'\n    });\n    \n    const parts = formatter.formatToParts(date);\n    const year = parts.find(p => p.type === 'year').value;\n    const month = parts.find(p => p.type === 'month').value;\n    const day = parts.find(p => p.type === 'day').value;\n    \n    return `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;\n}\n\n// Helper function to determine a suitable interval based on time duration\nfunction determineInterval(startTimeMs, endTimeMs) {\n    const durationMs = endTimeMs - startTimeMs;\n    const durationDays = durationMs / (1000 * 60 * 60 * 24);\n\n    console.log('Duration days: ', durationDays);\n    if (durationDays > 2) { // More than 2 days\n        return '1 month';\n    } else { // 2 days or less\n        return '1 day';\n    }\n}\n\nvar widgetUtils = {\n    percentageDisplayElem: null,\n    widgetTitleElem: null,\n    currentSumDisplayElem: null,\n    previousSumDisplayElem: null,\n    // chartContainerElement: null, // Removed - No chart in this widget\n\n    fetchAndDisplayComparisonData: async function() {\n        if (!window.EnergyChartSDK || typeof window.EnergyChartSDK.getEnergyComparisonSum !== 'function') {\n            console.error('EnergyChartSDK.getEnergyComparisonSum is not available.');\n            if (widgetUtils.percentageDisplayElem) widgetUtils.percentageDisplayElem.textContent = 'SDK indisponível';\n            return;\n        }\n\n        const { centralId, slaveId } = self.ctx.$scope;\n        const timeWindow = self.ctx.timeWindow;\n        const settings = self.ctx.settings || {};\n        const apiBaseUrl = settings.apiBaseUrl || 'https://ingestion.myio-bas.com';\n\n        if (!centralId || slaveId === undefined || slaveId === null || !timeWindow || !timeWindow.minTime || !timeWindow.maxTime) {\n            console.error('Dados insuficientes para buscar soma de comparação (centralId, slaveId, timeWindow).');\n            if (widgetUtils.percentageDisplayElem) widgetUtils.percentageDisplayElem.textContent = 'Dados insuficientes';\n            if (widgetUtils.currentSumDisplayElem) widgetUtils.currentSumDisplayElem.textContent = '--,-- kWh';\n            if (widgetUtils.previousSumDisplayElem) widgetUtils.previousSumDisplayElem.textContent = '--,-- kWh';\n            return;\n        }\n\n        const startTs = new Date(timeWindow.minTime).toISOString();\n        const endTs = new Date(timeWindow.maxTime).toISOString();\n\n        try {\n            // Ensure placeholders are updated during fetch\n            if (widgetUtils.percentageDisplayElem) widgetUtils.percentageDisplayElem.textContent = 'Carregando...';\n            if (widgetUtils.currentSumDisplayElem) widgetUtils.currentSumDisplayElem.textContent = '--,-- kWh';\n            if (widgetUtils.previousSumDisplayElem) widgetUtils.previousSumDisplayElem.textContent = '--,-- kWh';\n\n            const comparisonData = await window.EnergyChartSDK.getEnergyComparisonSum({\n                gatewayId: centralId,\n                slaveId: Number(slaveId),\n                startTs,\n                endTs,\n                apiBaseUrl\n            });\n\n            const currentKwh = comparisonData.currentPeriod.totalKwh;\n            const previousKwh = comparisonData.previousPeriod.totalKwh;\n\n            if (widgetUtils.currentSumDisplayElem) {\n                widgetUtils.currentSumDisplayElem.textContent = `${currentKwh.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 })} kWh`;\n            }\n            if (widgetUtils.previousSumDisplayElem) {\n                widgetUtils.previousSumDisplayElem.textContent = `${previousKwh.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 })} kWh`;\n            }\n\n            let percentageText = '--%';\n            if (previousKwh !== 0) {\n                const percentage = ((currentKwh - previousKwh) / previousKwh) * 100;\n                const arrow = percentage >= 0 ? '↑' : '↓';\n                const displayPercentage = Math.abs(percentage) < 0.05 ? 0 : Math.abs(percentage);\n                percentageText = `${displayPercentage.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 1, maximumFractionDigits: 1 })}% ${arrow}`;\n            } else if (currentKwh > 0) {\n                percentageText = 'Novo ↑';\n            } else {\n                percentageText = '0,0% --';\n            }\n            \n            if (widgetUtils.percentageDisplayElem) {\n                widgetUtils.percentageDisplayElem.textContent = percentageText;\n            }\n\n        } catch (error) {\n            console.error('Erro ao buscar ou exibir soma de comparação de energia:', error);\n            if (widgetUtils.percentageDisplayElem) widgetUtils.percentageDisplayElem.textContent = 'Erro API';\n            if (widgetUtils.currentSumDisplayElem) widgetUtils.currentSumDisplayElem.textContent = 'Erro kWh';\n            if (widgetUtils.previousSumDisplayElem) widgetUtils.previousSumDisplayElem.textContent = 'Erro kWh';\n        }\n    }\n};\n\n// Helper function to escape HTML special characters\nfunction escapeHtml(unsafe) {\n    if (typeof unsafe !== 'string') {\n        unsafe = String(unsafe);\n    }\n    return unsafe\n         .replace(/&/g, \"&amp;\")\n         .replace(/</g, \"&lt;\")\n         .replace(/>/g, \"&gt;\")\n         .replace(/\"/g, \"&quot;\")\n         .replace(/'/g, \"&#039;\");\n}\n\nself.onInit = async function() {\n    // Initialize scope variables for Angular template bindings\n    self.ctx.$scope.isLoading = true;\n    self.ctx.$scope.errorMessage = null;\n    self.ctx.$scope.percentages = '--';\n    self.ctx.$scope.percentageType = null; // 'increase', 'decrease'\n    self.ctx.$scope.title = self.ctx.settings.widgetTitle || self.ctx.widgetTitle || 'Consumo de Energia';\n    self.ctx.$scope.entityName = self.ctx.aliasController.entity?.name || ''; // Attempt to get entity name\n    self.ctx.$scope.currentConsumption = '--,--';\n    self.ctx.$scope.lastConsumption = '--,--';\n    self.ctx.$scope.measurement = 'kWh';\n    self.ctx.$scope.numericCurrentConsumption = 0;\n    self.ctx.$scope.numericLastConsumption = 0;\n    \n    // Store centralId and slaveId on the $scope if they are widget-global\n    // These might be better fetched once and stored, or re-fetched if they can change\n    self.ctx.$scope.centralId = null;\n    self.ctx.$scope.slaveId = null;\n\n    // No direct DOM manipulation here, Angular handles it via index.html\n\n    try {\n        const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n        // Ensure there is a subscription and datasource\n        if (!self.ctx.defaultSubscription || !self.ctx.defaultSubscription.data || !self.ctx.defaultSubscription.data.length > 0) {\n            throw new Error(\"Datasource não configurado ou dados não disponíveis.\");\n        }\n        const { entityId, entityType } = self.ctx.defaultSubscription.data[0].datasource;\n         if (!entityId || !entityType) {\n            throw new Error(\"ID da Entidade ou Tipo da Entidade não encontrado no datasource.\");\n        }\n\n        const deviceAttributes = await attributeService.getEntityAttributes(\n            { id: entityId, entityType },\n            'SERVER_SCOPE',\n            ['centralId', 'slaveId']\n        ).toPromise();\n        \n        const centralIdAttr = deviceAttributes.find(attribute => attribute.key === 'centralId');\n        const slaveIdAttr = deviceAttributes.find(attribute => attribute.key === 'slaveId');\n\n        self.ctx.$scope.centralId = centralIdAttr ? centralIdAttr.value : null;\n        const slaveIdStr = slaveIdAttr ? slaveIdAttr.value : null;\n        self.ctx.$scope.slaveId = slaveIdStr ? parseInt(slaveIdStr) : null;\n\n        if (!self.ctx.$scope.centralId || self.ctx.$scope.slaveId === null || isNaN(self.ctx.$scope.slaveId)) {\n            throw new Error(`Atributos do dispositivo ausentes ou inválidos: centralId='${self.ctx.$scope.centralId}', slaveId='${slaveIdStr}'.`);\n        }\n                \n        await fetchComparisonDataAndUpdateScope();\n\n    } catch (e) {\n        console.error('Erro em onInit:', e);\n        self.ctx.$scope.isLoading = false;\n        self.ctx.$scope.errorMessage = e.message || 'Erro ao inicializar o widget.';\n        self.ctx.detectChanges(); // Update view with error\n    }\n};\n\nasync function fetchComparisonDataAndUpdateScope() {\n    self.ctx.$scope.isLoading = true;\n    self.ctx.$scope.errorMessage = null;\n    self.ctx.detectChanges(); // Show loading state\n\n    if (!window.EnergyChartSDK || typeof window.EnergyChartSDK.getEnergyComparisonSum !== 'function') {\n        console.error('EnergyChartSDK.getEnergyComparisonSum is not available.');\n        self.ctx.$scope.errorMessage = 'SDK de gráfico indisponível.';\n        self.ctx.$scope.isLoading = false;\n        self.ctx.detectChanges();\n        return;\n    }\n\n    const { centralId, slaveId } = self.ctx.$scope;\n    const timeWindow = self.ctx.timeWindow;\n    const settings = self.ctx.settings || {};\n    const apiBaseUrl = settings.apiBaseUrl || 'https://ingestion.myio-bas.com'; // Use settings or default\n\n    if (!centralId || slaveId === undefined || slaveId === null || !timeWindow || !timeWindow.minTime || !timeWindow.maxTime) {\n        console.error('Dados insuficientes para buscar soma de comparação (centralId, slaveId, timeWindow).');\n        self.ctx.$scope.errorMessage = 'Dados de configuração insuficientes.';\n        self.ctx.$scope.isLoading = false;\n        self.ctx.detectChanges();\n        return;\n    }\n\n    const startTs = new Date(timeWindow.minTime).toISOString();\n    const endTs = new Date(timeWindow.maxTime).toISOString();\n\n    try {\n        const comparisonData = await window.EnergyChartSDK.getEnergyComparisonSum({\n            gatewayId: centralId,\n            slaveId: Number(slaveId),\n            startTs,\n            endTs,\n            apiBaseUrl\n        });\n\n        const currentKwh = comparisonData.currentPeriod.totalKwh;\n        const previousKwh = comparisonData.previousPeriod.totalKwh;\n\n        self.ctx.$scope.numericCurrentConsumption = currentKwh;\n        self.ctx.$scope.numericLastConsumption = previousKwh;\n\n        self.ctx.$scope.currentConsumption = currentKwh.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 });\n        self.ctx.$scope.lastConsumption = previousKwh.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 });\n\n        if (previousKwh !== 0) {\n            const percentage = ((currentKwh - previousKwh) / previousKwh) * 100;\n            self.ctx.$scope.percentageType = percentage >= 0 ? 'increase' : 'decrease';\n            // Ensure correct display for 0.0% which should be neutral or up arrow\n            const displayPercentage = Math.abs(percentage) < 0.05 ? 0 : Math.abs(percentage);\n            self.ctx.$scope.percentages = displayPercentage.toLocaleString('pt-BR', { style: 'decimal', minimumFractionDigits: 1, maximumFractionDigits: 1 });\n        } else if (currentKwh > 0) {\n            self.ctx.$scope.percentages = 'Novo'; \n            self.ctx.$scope.percentageType = 'increase'; // Or some other neutral/positive indication\n        } else { // previousKwh is 0 and currentKwh is 0\n            self.ctx.$scope.percentages = '0,0';\n            self.ctx.$scope.percentageType = null; // No change\n        }\n\n    } catch (error) {\n        console.error('Erro ao buscar ou exibir soma de comparação de energia:', error);\n        self.ctx.$scope.errorMessage = 'Erro ao carregar dados da API.';\n    } finally {\n        self.ctx.$scope.isLoading = false;\n        self.ctx.detectChanges();\n    }\n}\n\nself.onTimewindowChanged = async function(newTimeWindow) {\n    if (self.ctx.$scope.centralId && self.ctx.$scope.slaveId !== undefined && self.ctx.$scope.slaveId !== null) {\n        await fetchComparisonDataAndUpdateScope();\n    } else {\n        console.warn('Não é possível atualizar dados na mudança de janela: centralId ou slaveId não prontos.');\n        // Optionally set an error message or specific state on the scope\n        self.ctx.$scope.errorMessage = 'Configuração do dispositivo pendente.';\n        self.ctx.$scope.isLoading = false;\n        self.ctx.detectChanges();\n    }\n};\n\nself.onDataUpdated = async function() {\n    // This function is called when data source data is updated.\n    // For this widget, the primary driver for data refresh is the time window change.\n    // However, if entity attributes (centralId, slaveId) could change dynamically \n    // without a full widget re-init, we might need to re-fetch attributes and then data.\n    // For simplicity, we assume onInit and onTimewindowChanged cover most cases.\n    // If you have a scenario where attributes change and sums need refresh, uncomment and adapt:\n    // await self.onInit(); // This would re-run the full init logic.\n};\n\nself.onDestroy = function() {\n    // Cleanup, if any, like cancelling timers or subscriptions if they were set up.\n    // For this widget, no specific cleanup beyond what ThingsBoard does seems necessary.\n};\n",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"title\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Título do Card\"\r\n            },\r\n            \"measurement\":{\r\n                \"type\":\"string\",\r\n                \"title\":\"Tipo de medição\"\r\n            }\r\n            \r\n        },\r\n        \"required\": [\"title\"]\r\n    },\r\n    \"form\": [\r\n        \"title\",\r\n        \"measurement\"\r\n        \r\n        \r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "",
      "latestDataKeySettingsDirective" : "tb-value-card-widget-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "",
      "defaultConfig" : "{\"showTitle\":false,\"backgroundColor\":\"rgba(0, 0, 0, 0)\",\"color\":\"rgba(33, 186, 79, 0.87)\",\"padding\":\"0px\",\"settings\":{\"title\":\"Título do Card\"},\"title\":\"Somatório do Período\",\"dropShadow\":true,\"enableFullscreen\":false,\"titleStyle\":null,\"mobileHeight\":null,\"configMode\":\"advanced\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\",\"useDashboardTimewindow\":false,\"displayTimewindow\":false,\"titleFont\":{\"size\":16,\"sizeUnit\":\"px\",\"family\":\"Roboto\",\"weight\":\"500\",\"style\":\"normal\",\"lineHeight\":\"24px\"},\"titleColor\":\"rgba(0, 0, 0, 0.87)\",\"titleTooltip\":\"\",\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"units\":\"\",\"decimals\":null,\"noDataDisplayMessage\":\"\",\"timewindowStyle\":{\"showIcon\":false,\"iconSize\":\"24px\",\"icon\":null,\"iconPosition\":\"left\",\"font\":{\"size\":12,\"sizeUnit\":\"px\",\"family\":\"Roboto\",\"weight\":\"400\",\"style\":\"normal\",\"lineHeight\":\"16px\"},\"color\":\"rgba(0, 0, 0, 0.38)\",\"displayTypePrefix\":true},\"margin\":\"0px\",\"borderRadius\":\"0px\",\"iconSize\":\"0px\",\"timewindow\":{\"realtime\":{\"timewindowMs\":86400000}},\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.0049099568976449515,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.29530602333210765,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"enableDataExport\":false}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "9fa00650-338f-11f0-8cbd-2b87fdb093e1"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}