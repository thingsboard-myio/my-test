{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "fancoil_widget_v3",
    "name" : "Fancoil Widget V3",
    "deprecated" : false,
    "image" : "tb-image;/api/images/tenant/Screenshot from 2024-07-23 16-43-42.png",
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 10,
      "sizeY" : 15,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      } ],
      "templateHtml" : "<div id=\"main\">\n    \n\n<div class=\"status-container\">\n    <span class=\"status\">Status: {{status}}</span>\n \n</div>\n\n<div class=\"thermostat-container\" [ngStyle]=\"{'background-color': '#673AB5'}\">\n    <div class=\"title\">\n        {{valvulaName}}\n    </div>\n    <div class=\"thermostat\">\n        <div class=\"display\">\n            <span id=\"temperature\">{{ temperature }} °C</span>\n        </div>\n        <div class=\"controls\">\n            <button id=\"increase\" (click)=\"increaseTemperature()\">+</button>\n            <button id=\"decrease\" (click)=\"decreaseTemperature()\">-</button>\n        </div>\n    </div>\n</div>\n<!--<div class=\"info-container\">-->\n    <div class=\"temperature-container\" [ngStyle]=\"{'background-color': '#ED4465'}\">\n    <span class=\"temprature-title\">Temperatura</span>\n    <span class=\"temperature-current\">{{tempAtual}} °C</span>\n</div>\n\n<div class=\"temperature-container\" [ngStyle]=\"{'background-color': '#673AB5'}\">\n    <span class=\"temprature-title\">Consumo</span>\n    <span class=\"temperature-current\">{{consumo}} kW</span>\n</div>\n<!--</div>-->\n\n\n</div>",
      "templateCss" : "#container{\n    overflow: auto;\n}\n\n.thermostat-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap:10%;\n    width: 80%;\n    height: fit-content;\n    border-radius: 10px;\n    padding: 10px;\n}\n\n.thermostat {\n    color: white;\n    width: 100%;\n    text-align: center;\n    padding: 10px;\n    box-sizing: border-box;\n}\n\n.display {\n    font-size: 1.5em;\n    font-weight: bold;\n    padding-bottom: 3px;\n}\n\n.title{\n    padding:10px;\n    font-size: 1.2em;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.temprature-title{\n      padding: 10px;\n    font-size: 1.2em;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.temperature-current{\n    font-size: 1.6em;\n    font-weight: bold;\n}\n\n.controls button {\n    background-color: #0fc482;\n    border: none;\n    color: white;\n    padding: 10px;\n    font-size: 1.2em;\n    margin-right: 5px;\n    margin-left: 5px;\n    border-radius: 100px;\n    cursor: pointer;\n    width: 40%;\n    max-width: 60px;\n    box-sizing: border-box;\n}\n\n.controls button:hover {\n    background-color: #0fc48270;\n}\n\n\n.status{\n    font-weight: bold;\n     display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: center;\n    gap:10%;\n    width: fit-content;\n    height: fit-content;\n    border-radius: 10px;\n    background-color: #ED4465;\n    padding: 10px;\n    font-size: 1.1em;\n}\n\n.status-container{\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    width: 90%;\n    padding: 10px;\n}\n\n#main{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap:10px;\n\n}\n\n.temperature-container{\n     display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap:10%;\n    width: 80%;\n    height: fit-content;\n    border-radius: 10px;\n    padding: 10px;\n}\n\n.info-container{\n    width: 100%;\n    gap: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n",
      "controllerScript" : "const MAX_TEMP = 28;\nconst MIN_TEMP = 15;\n\n// Status\nfunction fetchFirstData() {\n     const subscriptionData = self.ctx.data[1].data;\n     data = !subscriptionData.length || !subscriptionData[0][1]  ? null : subscriptionData[0][1] \n    console.log(subscriptionData)\n    \n    self.ctx.$scope.status = data\n}\n\n// Temperatura\nfunction fetchSecondData() {\n     const subscriptionData = self.ctx.data[2].data;\n     data = !subscriptionData.length || !subscriptionData[0][1]  ? null : subscriptionData[0][1] \n    console.log(subscriptionData)\n\n    self.ctx.$scope.tempAtual = data;\n}\n\n// Consumo\nfunction fetchThirdData() {\n     const subscriptionData = self.ctx.data[3].data;\n     data = !subscriptionData.length || !subscriptionData[0][1]  ? 0 : subscriptionData[0][1] \n    console.log(subscriptionData)\n\n    self.ctx.$scope.consumo = data\n\n}\n\nasync function sendRPC(centralId, body) {\n    const $http = self.ctx.$scope.$injector.get(\n        self.ctx.servicesMap.get('http'),\n    );\n    const response = await $http.post(`https://${centralId}.y.myio.com.br/api/thermostat`, body).toPromise();\n    \n    return response;\n}\n\nasync function saveTemperature(temperature) {\n    const { centralId } = self.ctx.settings;\n    \n    const attributeService = self.ctx.$scope.$injector.get(\n    self.ctx.servicesMap.get('attributeService'));\n\n    let entityId = {\n        id: self.ctx.defaultSubscription.data[0]\n            .datasource.entityId,\n        entityType: 'DEVICE',\n    };\n    \n    const entityName = self.ctx.defaultSubscription\n        .data[0].datasource.entityName;\n    const temperatureDevice = self.ctx.defaultSubscription.data[2].datasource.entityName;\n    const valveDevice = self.ctx.defaultSubscription.data[0].datasource.entityName;\n\n\n    const attributes = [{\n        'key': 'temperatureSetpoint',\n        'value': temperature,\n        temperatureDevice,\n        valveDevice,\n    }];\n    \n    try {\n        await sendRPC(centralId, {\n            device: entityName,\n            temperature: temperature,\n            temperatureDevice,\n            valveDevice,\n        });\n\n        await attributeService\n            .saveEntityAttributes(\n                entityId,\n                'SHARED_SCOPE',\n                attributes\n            )\n            .toPromise();\n\n    } catch (e) {\n        console.log(e);\n        alert('Erro ao definir temperatura');\n    }\n}\n\n\n\nself.onInit = async function() {\n    fetchFirstData()\n    fetchSecondData()\n    fetchThirdData()\n    const debouncedSaveTemperature = _.debounce(saveTemperature, 500);\n    name =  self.ctx.defaultSubscription.data[0].datasource.entityName\n    self.ctx.$scope.valvulaName = name\n    self.ctx.$scope.temperature = '-';\n    self.ctx.$scope.increaseTemperature = () => {\n        if (self.ctx.$scope.temperature >= MAX_TEMP) {\n            self.ctx.$scope.temperature = MAX_TEMP;\n            return;\n        }\n        \n        if (self.ctx.$scope.temperature === '-') {\n            self.ctx.$scope.temperature = 20;\n        }\n        \n        self.ctx.$scope.temperature += 1;\n        \n        debouncedSaveTemperature(self.ctx.$scope.temperature);\n    };\n\n    self.ctx.$scope.decreaseTemperature = () => {\n        if (self.ctx.$scope.temperature <= MIN_TEMP) {\n            self.ctx.$scope.temperature = MIN_TEMP;\n            return;\n        }\n        \n        if (self.ctx.$scope.temperature === '-') {\n            self.ctx.$scope.temperature = 20;\n        }\n        \n        self.ctx.$scope.temperature -= 1;\n\n        debouncedSaveTemperature(self.ctx.$scope.temperature);\n    };\n    \n    const attributeService = self.ctx.$scope.$injector.get(\n        self.ctx.servicesMap.get('attributeService')\n    );\n\n    let entityId = {\n        id: self.ctx.defaultSubscription.data[0]\n            .datasource.entityId,\n        entityType: 'DEVICE',\n    };\n    \n    const assetAttributes = await attributeService.getEntityAttributes(\n        entityId,\n        'SHARED_SCOPE'\n    ).toPromise();\n    \n    const temperatureAttribute = assetAttributes.find((attribute) => attribute.key === 'temperatureSetpoint');\n\n    const temperature = temperatureAttribute ? temperatureAttribute.value : 20;\n    \n    self.ctx.$scope.temperature = temperature;\n    self.ctx.detectChanges();\n}\nself.onDataUpdated = function() {\n    fetchFirstData();\n    fetchSecondData();\n    fetchThirdData();\n\n    self.ctx.detectChanges();\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"centralId\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Id da Central\"\r\n            }\r\n        },\r\n        \"required\": [\"centralId\"]\r\n    },\r\n    \"form\": [\r\n        \"centralId\"\r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "dataKeySettingsDirective" : "tb-value-card-widget-settings",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]},{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#4caf50\",\"settings\":{},\"_hash\":0.4633291757703386,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]},{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 2\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.26936686266986287,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]},{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin 3\",\"color\":\"#ffc107\",\"settings\":{},\"_hash\":0.5192676984400322,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#0F0F17\",\"color\":\"rgba(255, 255, 255, 0.87)\",\"padding\":\"0\",\"settings\":{\"centralId\":\"34e6c830-6903-49e1-9223-e9bb75411fbd\"},\"title\":\"Fancoil Widget V3\",\"dropShadow\":true,\"enableFullscreen\":false,\"borderRadius\":\"10px\",\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"useDashboardTimewindow\":true,\"displayTimewindow\":true}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "7b9bca20-462f-11f0-9291-41f94c09a8a6"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}