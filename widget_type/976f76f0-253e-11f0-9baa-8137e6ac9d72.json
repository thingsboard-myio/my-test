{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "agendamento_setpoint_temperatura",
    "name" : "Agendamento Setpoint Temperatura",
    "deprecated" : false,
    "image" : "tb-image;/api/images/tenant/Screenshot from 2024-04-11 20-14-06.png",
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 5.5,
      "sizeY" : 8,
      "resources" : [ ],
      "templateHtml" : "<div id=\"main\" class=\"loading\" *ngIf=\"loading\">\n    <mat-progress-spinner mode=\"indeterminate\" color=\"accent\" style=\"width: 32px;\">\n    </mat-progress-spinner>\n</div>\n\n<div id=\"main\" *ngIf=\"!loading\">\n    <div *ngFor=\"let schedule of schedules; let i = index\" class=\"schedule-row\" [ngClass]=\"{ 'has-error': schedule.errors.overlap }\">\n        <fieldset id=\"cloneable-fieldset\">\n            <legend id=\"titulo\">{{entityName}}</legend>\n            <fieldset class=\"form-control\">\n                <legend for=\"Inicio\">Início</legend>\n                <input type=\"time\" name=\"Hora\"\n                    [(ngModel)]=\"schedule.startTime\"\n                    id=\"time\"\n                    required />\n                <span class=\"error-message\" *ngIf=\"schedule.errors.startTime\">{{ schedule.errors.startTime }}</span>\n            </fieldset>\n\n            <fieldset class=\"form-control\">\n                <legend for=\"Inicio\">Término</legend>\n                <input type=\"time\" name=\"Hora\"\n                    [(ngModel)]=\"schedule.endTime\"\n                    id=\"time\"\n                    required />\n                <span class=\"error-message\" *ngIf=\"schedule.errors.endTime\">{{ schedule.errors.endTime }}</span>\n            </fieldset>\n\n            <fieldset class=\"form-control\">\n                <legend>Dias:</legend>\n                <div class=\"selectDays\">\n                    <div class=\"checkboxDays\">\n                        <input\n                            [(ngModel)]=\"schedule.daysWeek.mon\"\n                            type=\"checkbox\" id=\"segunda\"\n                            name=\"daysWeek[]\" value=\"Segunda\"\n                            class=\"custom-checkbox\">\n\n                        <label for=\"segunda\">Segunda</label>\n                    </div>\n                    <div class=\"checkboxDays\">\n                        <input\n                            [(ngModel)]=\"schedule.daysWeek.tue\"\n                            type=\"checkbox\" id=\"terca\"\n                            name=\"daysWeek[]\" value=\"Terça\"\n                            class=\"custom-checkbox\">\n\n                        <label for=\"terca\">Terça</label>\n                    </div>\n                    <div class=\"checkboxDays\">\n                        <input\n                            [(ngModel)]=\"schedule.daysWeek.wed\"\n                            type=\"checkbox\" id=\"quarta\"\n                            name=\"daysWeek[]\" value=\"Quarta\"\n                            class=\"custom-checkbox\">\n                        <label for=\"quarta\">Quarta</label>\n                    </div>\n                    <div class=\"checkboxDays\">\n                        <input\n                            [(ngModel)]=\"schedule.daysWeek.thu\"\n                            type=\"checkbox\" id=\"quinta\"\n                            name=\"daysWeek[]\" value=\"Quinta\"\n                            class=\"custom-checkbox\">\n\n                        <label for=\"quinta\">Quinta</label>\n                    </div>\n                    <div class=\"checkboxDays\">\n                        <input\n                            [(ngModel)]=\"schedule.daysWeek.fri\"\n                            type=\"checkbox\" id=\"sexta\"\n                            name=\"daysWeek[]\" value=\"Sexta\"\n                            class=\"custom-checkbox\">\n\n                        <label for=\"sexta\">Sexta</label>\n                    </div>\n                    <div class=\"checkboxDays\">\n                        <input\n                            [(ngModel)]=\"schedule.daysWeek.sat\"\n                            type=\"checkbox\" id=\"sabado\"\n                            name=\"daysWeek[]\" value=\"Sábado\"\n                            class=\"custom-checkbox\">\n\n                        <label for=\"sabado\">Sábado</label>\n                    </div>\n                    <div class=\"checkboxDays\">\n                        <input\n                            [(ngModel)]=\"schedule.daysWeek.sun\"\n                            type=\"checkbox\" id=\"domingo\"\n                            name=\"daysWeek[]\" value=\"Domingo\"\n                            class=\"custom-checkbox\">\n\n                        <label for=\"domingo\">Domingo</label>\n                    </div>\n                    <div class=\"checkboxDays\">\n                        <input\n                            [(ngModel)]=\"schedule.holiday\"\n                            type=\"checkbox\" id=\"feriado\"\n                            name=\"Feriado\" value=\"Feriado\"\n                            class=\"custom-checkbox\">\n\n                        <label for=\"segunda\">Feriado</label>\n                    </div>\n                </div>\n                <span class=\"error-message\" *ngIf=\"schedule.errors.daysWeek\">{{ schedule.errors.daysWeek }}</span>\n            </fieldset>\n\n            <fieldset class=\"form-control\">\n                <legend>Setpoint (°C):</legend>\n                <input type=\"number\" name=\"setpoint\"\n                    [(ngModel)]=\"schedule.setpoint\"\n                    id=\"setpoint-{{i}}\"\n                    min=\"16\" max=\"26\" step=\"1\"\n                    required />\n                <span class=\"error-message\" *ngIf=\"schedule.errors.setpoint\">{{ schedule.errors.setpoint }}</span>\n            </fieldset>\n\n            <span class=\"error-message overlap-error\" *ngIf=\"schedule.errors.overlap\">{{ schedule.errors.overlap }}</span>\n\n            <button type=\"submit\" (click)=\"remove(schedule)\">\n                Remover\n            </button>\n\n        </fieldset>\n    </div>\n\n    <div class=\"divButtons\">\n        <button type=\"submit\" (click)=\"addSchedule()\">+\n            Intervalo</button>\n        <button type=\"submit\"\n            (click)=\"submit()\"\n            [disabled]=\"loading\">Salvar</button>\n    </div>\n</div>\n\n<style>\n    .error-message {\n        color: red;\n        font-size: 0.8em;\n        display: block; /* Or inline-block */\n    }\n    .schedule-row.has-error {\n      /* Optional: visually indicate rows with overlap errors */\n      /* border: 1px solid red; */\n      /* background-color: #ffebeb; */\n    }\n    .days-week label {\n        margin-right: 5px;\n    }\n    /* Add other styles as needed for layout */\n    .schedule-row > div {\n        margin-bottom: 10px;\n    }\n\n    /* Custom styles for inputs to match dark theme */\n    .form-control input[type=\"number\"] { /* Apply ONLY to number input */\n        background-color: #333; /* Dark background */\n        color: #eee; /* Light text */\n        border: 1px solid #555; /* Subtle border */\n        padding: 5px 8px; /* Adjust padding as needed */\n        border-radius: 4px; /* Optional: rounded corners */\n        /* Resetting default browser appearance (optional, might remove spinners) */\n        /* -webkit-appearance: none; \n           -moz-appearance: textfield; */\n    }\n\n    /* Style focus state */\n    .form-control input[type=\"number\"]:focus { /* Apply focus ONLY to number input */\n        outline: none;\n        border-color: #777;\n        box-shadow: 0 0 3px rgba(150, 150, 150, 0.5);\n    }\n</style>",
      "templateCss" : "#container {\n    overflow-y: auto;\n}\n\n#main.loading {\n    background: rgba(30,30,30,0.3);    \n    height: 100%;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n#main {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\nfieldset {\n    border: none;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n    flex-direction: row;\n    flex-wrap: wrap;\n    margin: 10px;\n    width: auto;\n    padding-left: 10px;\n    font-size: 14px;\n    background-color: #0f0f17;\n    padding-bottom: 5px;\n}\n\n\n#cloneable-fieldset {\n    background-color: #1F2126;\n    border: none;\n}\n\n\n#titulo {\n    font-size: 16px;\n}\n\n.selectDays {\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    margin: 10px;\n    flex: 1 1 5px;\n\n}\n\n.checkboxDays {\n    width: 100px;\n    height: 20px;\n    display: flex;\n    align-items: center;\n    margin: 10px;\n    margin-right: 10px;\n    font-size: 16px;\n}\n\n.checkboxRetain {\n    width: 100%;\n    display: flex;\n    align-items: center;\n    margin: 10px;\n    margin-right: 10px;\n    padding-left: 10px;\n    font-size: 16px;\n}\n\n.form-control {\n    width: 100%;\n}\n\ninput[type=\"checkbox\"] {\n    appearance: none;\n    background-color: #191B1F;\n    margin: 0;\n    margin-right: 7px;\n    font: inherit;\n    color: #191B1F;\n    width: 1.2em;\n    height: 1.2em;\n    font-size: 16px;\n    border: 1px solid rgba(192, 192, 192, 0.5);\n    border-radius: 0.15em;\n    transform: translateY(-0.075em);\n    display: grid;\n    place-content: center;\n}\n\ninput[type=\"checkbox\"]:hover {\n    background-color: rgba(192, 192, 192, 0.5);\n    cursor: pointer;\n}\n\ninput[type=\"checkbox\"]::before {\n    content: \"\";\n    width: 0.65em;\n    height: 0.65em;\n    transform: scale(0);\n    transition: 120ms transform ease-in-out;\n    box-shadow: inset 1em 1em white;\n    transform-origin: bottom left;\n    clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);\n}\n\n\ninput[type=\"checkbox\"]:checked {\n    background-color: #0FC080;\n\n}\n\ninput[type=\"checkbox\"]:checked::before {\n    transform: scale(1);\n}\n\n\ninput[type=\"time\"] {\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    appearance: none;\n    width: 100%;\n    padding: 10px;\n    font-size: 16px;\n    color: white;\n    border: none;\n    border-radius: 0;\n    background-color: inherit;\n}\n\ninput[type=\"time\"]::-webkit-inner-spin-button,\ninput[type=\"time\"]::-webkit-calendar-picker-indicator,\ninput[type=time]::-webkit-datetime-edit-ampm-field {\n    display: none;\n}\n\ninput[type=\"time\"]:focus {\n    outline: none;\n    box-shadow: none;\n}\n\n\nbutton {\n    background-color: #673AB5;\n    color: white;\n    padding: 10px;\n    border-radius: 5px;\n    margin: 5px;\n    font-size: 16px;\n    border: none;\n}\n\nbutton:hover {\n    box-shadow: 5px 5px 5px 0px black, 0 10px 20px 0 black;\n\n}\n\nbutton:active {\n    box-shadow: 2px 2px 2px 0px black, 0 5px 10px 0 black;\n    transform: translateY(2px);\n}\n\n.divButtons {\n    position: fixed;\n    right: 0;\n    bottom: 0;\n    width: 100%;\n    height: fit-content;\n    display: flex;\n    align-items: flex-end;\n    justify-content: flex-end;\n    margin: 8px;\n}\n\n.divButtons>button {\n    cursor: pointer;\n}\n\n.ligar{\n    margin-left: 10px;\n}\n.desligar{\n    margin-right: 10px;\n\n}\n\n.toggle-switch {\n  position: relative;\n  display: inline-block;\n  width: 40px;\n  height: 20px;\n  cursor: pointer;\n}\n\n.toggle-switch input[type=\"checkbox\"] {\n  display: none;\n}\n\n.toggle-switch-background {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #ddd;\n  border-radius: 20px;\n  box-shadow: inset 0 0 0 2px #ccc;\n  transition: background-color 0.3s ease-in-out;\n}\n\n.toggle-switch-handle {\n  position: absolute;\n  top:2px;\n  left: 2px;\n  width: 16px;\n  height: 16px;\n  background-color: #fff;\n  border-radius: 50%;\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);\n  transition: transform 0.3s ease-in-out;\n}\n\n.toggle-switch::before {\n  content: \"\";\n  position: absolute;\n  top: -25px;\n  right: -35px;\n  font-size: 12px;\n  font-weight: bold;\n  color: #aaa;\n  text-shadow: 1px 1px #fff;\n  transition: color 0.3s ease-in-out;\n}\n\n.toggle-switch input[type=\"checkbox\"]:checked + .toggle-switch-handle {\n  transform: translateX(5px);\n  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2), 0 0 0 3px #0FC080;\n}\n\n.toggle-switch input[type=\"checkbox\"]:checked + .toggle-switch-background {\n  background-color: #0FC080;\n  box-shadow: inset 0 0 0 2px #04b360;\n}\n\n.toggle-switch input[type=\"checkbox\"]:checked + .toggle-switch:before {\n  content: \"On\";\n  color: #0FC080;\n  right: -5px;\n}\n\n.toggle-switch input[type=\"checkbox\"]:checked + .toggle-switch-background .toggle-switch-handle {\n  transform: translateX(20px);\n}\n",
      "controllerScript" : "'esversion: 8';\n\nfunction addSchedule() {\n    self.ctx.$scope.schedules.push({\n        startTime: '00:00',\n        endTime: '00:00',\n        setpoint: 23,\n        daysWeek: {\n            mon: false,\n            tue: false,\n            wed: false,\n            thu: false,\n            fri: false,\n            sat: false,\n            sun: false,\n        },\n        holiday: false,\n        errors: {}\n    });\n}\n\n// Helper function to convert HH:MM time to minutes since midnight\nfunction timeToMinutes(time) {\n    if (!/^[0-2][0-9]:[0-5][0-9]$/.test(time)) {\n        return NaN; // Invalid format\n    }\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n}\n\n// Validation function for a single schedule entry\nfunction validateScheduleEntry(schedule) {\n    schedule.errors = {}; // Reset errors\n\n    const startMinutes = timeToMinutes(schedule.startTime);\n    const endMinutes = timeToMinutes(schedule.endTime);\n\n    if (isNaN(startMinutes)) {\n        schedule.errors.startTime = 'Formato inválido (HH:MM).';\n    }\n    if (isNaN(endMinutes)) {\n        schedule.errors.endTime = 'Formato inválido (HH:MM).';\n    }\n\n    if (!isNaN(startMinutes) && !isNaN(endMinutes) && startMinutes >= endMinutes) {\n        schedule.errors.endTime = 'Hora final deve ser após a hora inicial.';\n    }\n\n    const daysSelected = Object.values(schedule.daysWeek).some(day => day === true);\n    if (!daysSelected && !schedule.holiday) {\n        schedule.errors.daysWeek = 'Selecione pelo menos um dia ou feriado.';\n    }\n\n    const setpoint = schedule.setpoint;\n    if (setpoint === null || setpoint === undefined || setpoint === '') {\n        schedule.errors.setpoint = 'Setpoint é obrigatório.';\n    } else {\n        const setpointNum = Number(setpoint);\n        if (!Number.isInteger(setpointNum)) {\n            schedule.errors.setpoint = 'Deve ser um número inteiro.';\n        } else if (setpointNum < 16 || setpointNum > 26) {\n            schedule.errors.setpoint = 'Deve estar entre 16 e 26.';\n        }\n    }\n\n    return Object.keys(schedule.errors).length === 0;\n}\n\n// Validation function for overlaps\nfunction validateOverlaps(schedules) {\n    let hasOverlapError = false;\n    const days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];\n\n    for (let i = 0; i < schedules.length; i++) {\n        const scheduleA = schedules[i];\n        // Clear previous overlap errors for schedule A if not already set by other validation\n        if (scheduleA.errors && !scheduleA.errors.overlap) {\n             delete scheduleA.errors.overlap;\n        }\n\n        const startA = timeToMinutes(scheduleA.startTime);\n        const endA = timeToMinutes(scheduleA.endTime);\n\n        if (isNaN(startA) || isNaN(endA)) continue; // Skip if times are invalid\n\n        for (let j = i + 1; j < schedules.length; j++) {\n            const scheduleB = schedules[j];\n            // Clear previous overlap errors for schedule B if not already set by other validation\n            if (scheduleB.errors && !scheduleB.errors.overlap) {\n                 delete scheduleB.errors.overlap;\n            }\n\n            const startB = timeToMinutes(scheduleB.startTime);\n            const endB = timeToMinutes(scheduleB.endTime);\n\n            if (isNaN(startB) || isNaN(endB)) continue; // Skip if times are invalid\n\n            // Check for overlap on common active days\n            const commonDays = days.some(day => scheduleA.daysWeek[day] && scheduleB.daysWeek[day]);\n            const holidayOverlap = scheduleA.holiday && scheduleB.holiday;\n\n            if (commonDays || holidayOverlap) {\n                // Check for time interval overlap\n                if (startA < endB && endA > startB) {\n                    scheduleA.errors.overlap = 'Conflito com outro horário.';\n                    scheduleB.errors.overlap = 'Conflito com outro horário.';\n                    hasOverlapError = true;\n                }\n            }\n        }\n    }\n    return !hasOverlapError;\n}\n\n// Main validation function\nfunction validateSchedules(schedules) {\n    let allEntriesValid = true;\n    schedules.forEach(schedule => {\n        if (!validateScheduleEntry(schedule)) {\n            allEntriesValid = false;\n        }\n    });\n\n    // Only check overlaps if individual entries are potentially valid regarding time\n    let overlapsValid = true;\n    if (allEntriesValid) { // Optimization: Can skip overlap check if basic format/logic is wrong\n       overlapsValid = validateOverlaps(schedules);\n    } else {\n        // If entry validation failed, ensure any previous overlap errors are cleared\n        // unless the overlap check actually ran and set them.\n        validateOverlaps(schedules); // Run to clear/set overlap flags appropriately even if entries fail\n    }\n\n\n    return allEntriesValid && overlapsValid;\n}\n\nasync function sendRPC(centralId, payload) {\n    const $http = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('http'));\n\n    // Use the pre-constructed payload directly\n    const response = await $http.post(`https://${centralId}.y.myio.com.br/api/setpoint_schedules`, payload).toPromise();\n\n    console.log('Resposta RPC:', response);\n    return response;\n}\n\nasync function submit() {\n    // --- Pre-checks ---\n    if (self.ctx.$scope.loadError) {\n        alert('Erro de configuração: ' + self.ctx.$scope.loadError);\n        return;\n    }\n    const { fancoil, temperatureDevice, valveDevice } = self.ctx.$scope.deviceInfo;\n    if (!fancoil || !temperatureDevice || !valveDevice) {\n         alert('Erro interno: Informações do dispositivo ausentes. Verifique os aliases.');\n         console.error('Submit failed: Missing device info in scope', self.ctx.$scope.deviceInfo);\n         return;\n    }\n\n    // --- Validate Schedules ---\n    if (!validateSchedules(self.ctx.$scope.schedules)) {\n        console.log('Validation failed:', self.ctx.$scope.schedules);\n        alert('Existem erros nos agendamentos. Por favor, corrija-os.');\n        self.ctx.detectChanges();\n        return;\n    }\n    self.ctx.$scope.schedules.forEach(schedule => schedule.errors = {}); // Clear errors on success\n\n    // --- Prepare Data ---    \n    const { centralId } = self.ctx.settings;\n    const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n    const schedulesPayload = self.ctx.$scope.schedules.map(s => {\n        const { errors, ...rest } = s;\n        return rest; // Payload without errors\n    });\n\n    self.ctx.$scope.loading = true;\n    self.ctx.detectChanges();\n\n    try {\n        // --- Save Attributes to all 3 devices ---\n        const devicesToUpdate = [fancoil, temperatureDevice, valveDevice];\n        const attributesToSave = [{ key: 'schedules', value: schedulesPayload }];\n\n        for (const device of devicesToUpdate) {\n            const deviceEntityId = { id: device.id, entityType: device.entityType };\n            console.log(`Saving attributes to ${device.name} (${device.id})`);\n            await attributeService\n                .saveEntityAttributes(deviceEntityId, 'SERVER_SCOPE', attributesToSave)\n                .toPromise();\n        }\n\n        // --- Prepare and Send Consolidated RPC ---      \n        const rpcPayload = {\n            method: 'set_setpoints',\n            // 'device' field might not be needed by the API anymore if all info is in params,\n            // but keeping it as temperatureDevice for potential compatibility.\n            // Adjust or remove if the API doesn't expect it.\n            device: temperatureDevice.name, \n            params: {\n                schedules: schedulesPayload,\n                fancoilDevice: { name: fancoil.name, id: fancoil.id },\n                temperatureDevice: { name: temperatureDevice.name, id: temperatureDevice.id },\n                valveDevice: { name: valveDevice.name, id: valveDevice.id }\n            }\n        };\n\n        console.log('Enviando RPC consolidado com payload:', rpcPayload);\n        await sendRPC(centralId, rpcPayload);\n\n        alert('Agendamentos salvos com sucesso para os dispositivos configurados.');\n\n    } catch (e) {\n        console.error('Erro ao salvar agendamentos ou enviar RPC:', e);\n        alert('Erro ao salvar agendamentos. Por favor, tente novamente.');\n    } finally {\n        self.ctx.$scope.loading = false;\n        self.ctx.detectChanges();\n    }\n}\n\nasync function loadSchedules() {\n    self.ctx.$scope.loading = true; // Set loading true at the start\n    try {\n        const attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n        const tempDevice = self.ctx.$scope.deviceInfo.temperatureDevice;\n\n        // Ensure temperatureDevice was found in onInit\n        if (!tempDevice) {\n            console.error('TemperatureDevice not identified. Cannot load schedules.');\n            self.ctx.$scope.loadError = \"Dispositivo de temperatura não encontrado (alias 'temperatureDevice').\";\n            self.ctx.$scope.schedules = []; // Ensure schedules is empty\n            return; // Exit early\n        }\n\n        const deviceEntityId = { id: tempDevice.id, entityType: tempDevice.entityType };\n\n        console.log('Loading schedules from:', tempDevice.name);\n        const attributes = await attributeService.getEntityAttributes(deviceEntityId, 'SERVER_SCOPE', ['schedules']).toPromise();\n        const schedulesAttr = attributes.find(attr => attr.key === 'schedules');\n\n        if (schedulesAttr && schedulesAttr.value && Array.isArray(schedulesAttr.value)) {\n            self.ctx.$scope.schedules = schedulesAttr.value.map(s => ({\n                ...s,\n                setpoint: s.setpoint !== undefined ? s.setpoint : 23,\n                errors: s.errors || {}\n            }));\n            console.log('Agendamentos carregados:', self.ctx.$scope.schedules);\n        } else {\n            console.log('Nenhum agendamento salvo encontrado no dispositivo de temperatura.');\n            self.ctx.$scope.schedules = []; // Initialize if none found\n        }\n    } catch (e) {\n        console.error('Erro ao carregar agendamentos:', e);\n        self.ctx.$scope.loadError = \"Erro ao carregar agendamentos.\";\n        self.ctx.$scope.schedules = []; // Ensure schedules is empty on error\n    } finally {\n         self.ctx.$scope.loading = false; // Set loading false at the end\n         self.ctx.detectChanges();\n    }\n}\n\nfunction remove(schedule) {\n    const index = self.ctx.$scope.schedules.indexOf(schedule);\n    if (index > -1) { // Check if found\n        self.ctx.$scope.schedules.splice(index, 1);\n        // Re-validate after removing an item as overlaps might change\n        validateSchedules(self.ctx.$scope.schedules);\n        self.ctx.detectChanges();\n    }\n}\n\nself.onInit = async function() {\n    self.ctx.$scope.loading = true;\n    self.ctx.$scope.loadError = null; // Initialize load error message\n    self.ctx.$scope.deviceInfo = { // Store device details here\n        fancoil: null,\n        temperatureDevice: null,\n        valveDevice: null\n    };\n\n    // --- Identify Devices by Alias ---\n    const requiredAliases = ['fancoil', 'temperatureDevice', 'valveDevice'];\n    let foundAliases = new Set();\n\n    if (self.ctx.data && self.ctx.data.length > 0) {\n        self.ctx.data.forEach(datasource => {\n            // console.log('datasource:', datasource); // Keep this log for debugging if needed\n            // --- MODIFIED: Use dataKey.label instead of datasource.alias ---\n            const alias = datasource.dataKey ? datasource.dataKey.label : null;\n            // --------------------------------------------------------------\n            if (alias && requiredAliases.includes(alias)) {\n                 if (self.ctx.$scope.deviceInfo[alias]) {\n                     console.warn(`Duplicate alias (dataKey label) found: ${alias}. Using the first one encountered.`);\n                 } else {\n                     self.ctx.$scope.deviceInfo[alias] = {\n                         name: datasource.datasource.entityName,\n                         id: datasource.datasource.entityId,\n                         entityType: datasource.datasource.entityType\n                     };\n                     foundAliases.add(alias);\n                     console.log(`Identified ${alias}:`, self.ctx.$scope.deviceInfo[alias].name);\n                 }\n            }\n        });\n    }\n\n    // --- Check if all required devices were found ---\n    if (foundAliases.size !== requiredAliases.length) {\n         const missingAliases = requiredAliases.filter(a => !foundAliases.has(a));\n         console.error('Missing required device aliases:', missingAliases);\n         self.ctx.$scope.loadError = `Erro: Falta(m) alias(es) de dispositivo(s) obrigatório(s): ${missingAliases.join(', ')}.`;\n         self.ctx.$scope.loading = false;\n         self.ctx.detectChanges();\n         return; // Stop initialization\n    }\n\n    // --- Setup Scope Functions ---\n    self.ctx.$scope.addSchedule = addSchedule;\n    self.ctx.$scope.submit = submit; // submit will be modified next\n    self.ctx.$scope.remove = remove;\n\n    self.ctx.$scope.schedules = [];\n\n    // --- Load Schedules (now uses identified temperatureDevice) ---\n    await loadSchedules(); // loadSchedules now sets loading to false and detects changes\n\n    // self.ctx.$scope.loading = false; // Moved inside loadSchedules finally block\n    // self.ctx.detectChanges(); // Moved inside loadSchedules finally block\n}\n\nself.onDataUpdated = function() {}\n\nself.onDestroy = function() {}\n",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"centralId\": {\r\n                \"type\": \"string\",\r\n                \"title\": \"Id da Central\"\r\n            }\r\n        },\r\n        \"required\": [\"centralId\"]\r\n    },\r\n    \"form\": [\r\n        \"centralId\"\r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "dataKeySettingsDirective" : "tb-value-card-widget-settings",
      "hasBasicMode" : true,
      "defaultConfig" : "{\"showTitle\":true,\"backgroundColor\":\"#191B1F\",\"color\":\"#FFFFFF\",\"padding\":\"10px\",\"settings\":{\"centralId\":\"sdvsdv \"},\"title\":\"Agendamento Setpoint Temperatura\",\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"titleColor\":\"#FFFFFF\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":false,\"margin\":\"2px\",\"borderRadius\":\"10px\",\"widgetStyle\":{},\"widgetCss\":\".tb-widget-header{\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n}\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"targetDeviceAliasIds\":[\"de06b681-62f8-8f6c-e5f0-970bdc1ef03b\"],\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.2245365851758141,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"enableDataExport\":false}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "976f76f0-253e-11f0-9baa-8137e6ac9d72"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}