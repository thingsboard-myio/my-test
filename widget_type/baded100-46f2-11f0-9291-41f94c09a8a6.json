{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "blinking_air_list_with_consumption_and_temperature_v_2",
    "name" : "Blinking Air List With Consumption and Temperature - v.2",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 3,
      "resources" : [ ],
      "templateHtml" : "<div class=\"device-card-centered\" id=\"device-0\">\r\n  <div class=\"device-title\">sem dispositivo</div>\r\n  <img class=\"device-image blink\" src=\"...\" />\r\n  <div class=\"device-data-row\">\r\n    <div class=\"temperature\">üå°Ô∏è <span>--¬∞C</span></div>\r\n    <div class=\"consumption clickable\"\r\n         data-state=\"air_detail\"\r\n         data-entity-id=\"...\"\r\n         data-entity-type=\"ASSET\">\r\n      ‚ö° <span>-- kW</span>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
      "templateCss" : ".status-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 6px;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.device-card-centered {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n  border-radius: 12px;\r\n  background: #fff;\r\n  padding: 6px;\r\n  box-shadow: 0px 10px 10px rgba(0,0,0,0.06), 0px -6px 6px rgba(0,0,0,0.04);\r\n  text-align: center;\r\n  width: 99%;\r\n  max-width: 100%;\r\n  margin: 0 2px 12px 2px;\r\n  cursor: pointer;\r\n  transition: box-shadow 0.2s ease, transform 0.1s ease;\r\n}\r\n\r\n.device-card-centered:hover {\r\n  box-shadow: 0px 8px 24px rgba(0,0,0,0.12), 0px -4px 16px rgba(0,0,0,0.08);\r\n  transform: scale(1.1);\r\n}\r\n\r\n.device-title {\r\n  font-weight: bold;\r\n  font-size: 0.9rem;\r\n  margin-bottom: 6px;\r\n  color: #333;\r\n}\r\n\r\n/* Alinha imagem e dados lado a lado */\r\n.device-direction {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n\r\n/* Tamanho fixo da imagem */\r\n.device-image {\r\n  width: 90px;\r\n  height: 90px;\r\n  margin-right: 12px;\r\n  object-fit: contain;\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n/* Dados (temperatura e consumo) alinhados ao centro vertical da imagem */\r\n.device-data-row {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  height: 90px;\r\n  box-sizing: border-box;\r\n  text-align: left;\r\n  padding-left: 6px;\r\n}\r\n\r\n/* Temperatura */\r\n.temperature {\r\n  font-size: 0.9rem;\r\n  margin: 2px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.temperature span {\r\n  color: #007bff;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Consumo */\r\n.consumption {\r\n  font-size: 0.9rem;\r\n  margin: 2px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 4px;\r\n}\r\n\r\n.consumption span {\r\n  color: #28a745;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Efeito blink (para motores ligados) */\r\n.blink {\r\n  animation: blink 1.2s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n  0%, 100% { opacity: 1; }\r\n  50% { opacity: 0.3; }\r\n}\r\n",
      "controllerScript" : "const DEBUG = false;\r\nconst MinConsumption = 5;\r\n\r\nfunction log(...args) {\r\n  if (DEBUG) console.log('[DEBUG]', ...args);\r\n}\r\n\r\nconst noDevice = '/api/images/public/g7phsMSdCo51gWcoJgi3QrKUSwj9njtC'\r\nconst offlineImg = '/api/images/public/XVSlrbdXz5jAFfYNo4ymvu3jh76Iw6Ag';\r\nconst offImg = '/api/images/public/V3nAuG6sBlMJAAOeiXWhctFKZzBuo6IL';\r\nconst fanImg = '/api/images/public/4A8Sk4WP8QuPqyxwZXCF9I08HxQsbKBy';\r\nconst onImg = '/api/images/public/6ziChYbLxcZuCismHWEBvCWNj6LLUet0';\r\n\r\nconst arSelfContainedOfflineImg = '/api/images/public/j8gvUT86qM2e3k32WlzXyhA88Fnctloy';\r\nconst arSelfContainedOffImg = '/api/images/public/G5ldxE6QEljmGxLyUGkjHQt3ddUtbPax';\r\nconst arSelfContainedFanImg = '/api/images/public/nAqgFLTCDHSyrCaboKq6R31Q45xI4NNT';\r\nconst arSelfContainedOnImg = '/api/images/public/Huwu3DqdnwB1N9mqlcSRsWzKUD3dPwtJ';\r\n\r\nconst style = document.createElement('style');\r\nstyle.innerHTML = `/* cole o CSS acima aqui */`;\r\ndocument.head.appendChild(style);\r\n\r\nfunction extractBaseLabel(label) {\r\n  const match = label.match(/(?:Sala Online\\s)?\\d{1,2}[¬∞¬™] Andar/i);\r\n  return match ? match[0].trim().toLowerCase() : null;\r\n}\r\n\r\nfunction extractContextKey(label) {\r\n  const normalized = label.toLowerCase();\r\n  if (/sala online/i.test(normalized)) {\r\n    const andar = normalized.match(/\\d{1,2}[¬∞¬™]/)?.[0];\r\n    return andar ? `sala_online_${andar}` : null;\r\n  }\r\n  if (/√°rea comum/i.test(normalized)) {\r\n    const andar = normalized.match(/\\d{1,2}[¬∞¬™]/)?.[0];\r\n    return andar ? `area_comum_${andar}` : null;\r\n  }\r\n  const andar = normalized.match(/\\d{1,2}[¬∞¬™]/)?.[0];\r\n  return andar ? `generico_${andar}` : null;\r\n}\r\n\r\nfunction extractAndar(label) {\r\n  return label.match(/\\d{1,2}[¬∞¬™]/i)?.[0]?.toLowerCase();\r\n}\r\n\r\nfunction createCard(label, entityId, entityType, state, offlineImgToShow, backGroundColor) {\r\n  const safeId = `card-${label.replace(/\\s+/g, '_')}`;\r\n  const $card = $(`\r\n  <div class=\"device-card-centered clickable\"\r\n       id=\"${safeId}\"\r\n       data-state=\"${state}\"\r\n       data-entity-id=\"${entityId}\"\r\n       data-entity-type=\"${entityType}\">\r\n    <div class=\"device-title\">üìç ${label}</div>\r\n    <div class=\"device-direction\">\r\n      <img class=\"device-image\" src=\"${offlineImgToShow}\" />\r\n      <div class=\"device-data-row\">\r\n        <div class=\"temperature\">üå°Ô∏è <span>--¬∞C</span></div>\r\n        <div class=\"consumption\">‚ö° <span>-- kW</span></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  `);\r\n\r\n  if (backGroundColor) {\r\n    $card.css('background-color', backGroundColor);\r\n  }\r\n  return $card;\r\n}\r\n\r\nfunction getImageByState(isSalaOnline, isOn, isFan) {\r\n  if (isSalaOnline) {\r\n    return isOn ? (isFan ? fanImg : onImg) : offImg;\r\n  } else {\r\n    return isOn ? (isFan ? arSelfContainedFanImg : arSelfContainedOnImg) : arSelfContainedOffImg;\r\n  }\r\n}\r\n\r\nfunction updateCardTemperature(ctx, contextKey, tempText) {\r\n  try {\r\n    ctx.contextIndexMap[contextKey]?.forEach(label => {\r\n      const entry = ctx.entityMap[label];\r\n      if (entry) {\r\n        entry.el.find('.temperature span').text(tempText);\r\n        entry.temperature = tempText;\r\n      }\r\n    });\r\n  } catch (err) {\r\n    log('Erro ao atualizar temperatura:', err);\r\n  }\r\n}\r\n\r\nfunction updateCardConsumption(ctx, label, val) {\r\n  try {\r\n    const entry = ctx.entityMap[label];\r\n    \r\n    if (!entry) return;\r\n\r\n    const isOn = val > MinConsumption;\r\n    const isFan = val > MinConsumption && val <= ctx.settings.threshold;\r\n    const normalizedLabel = label.toLowerCase();\r\n    const isSalaOnline = /sala online/i.test(normalizedLabel);\r\n\r\n    const img = getImageByState(isSalaOnline, isOn, isFan);\r\n    const color = isOn ? (isFan ? '#b499eb' : '#45b2cc') : '#d6dcdd';\r\n    const consumoText = typeof val === 'number' ? `${(val / 1000).toFixed(2)} kW` : '-- kW';\r\n\r\n    entry.el.find('.device-image').attr('src', img).toggleClass('blink', isOn);\r\n    entry.el.find('.consumption span').text(consumoText).css('color', color);\r\n    entry.consumption = consumoText;\r\n\r\n    log(`Consumo de ${label}:`, consumoText, '| Fan:', isFan, '| On:', isOn);\r\n  } catch (err) {\r\n    log('Erro ao atualizar consumo:', err);\r\n  }\r\n}\r\n\r\nself.onInit = function () {\r\n    const ctx = self.ctx;\r\n    ctx.entityMap = {};\r\n    ctx.contextIndexMap = {};\r\n    ctx.$container.empty();\r\n    const settings = ctx.settings || {};\r\n\r\n    const $main = $('<div class=\"status-container\"></div>');\r\n    ctx.$container.append($main);\r\n\r\n    const cardsToRender = ctx.data\r\n    .sort((a, b) => {\r\n      const labelA = a.datasource?.entityLabel?.toLowerCase() || '';\r\n      const labelB = b.datasource?.entityLabel?.toLowerCase() || '';\r\n      return labelA.localeCompare(labelB, 'pt-BR');\r\n    });\r\n    \r\n    //console.log(\"Data cardsToRender\", cardsToRender);\r\n    \r\n    const dataConfig = {};\r\n    \r\n    cardsToRender.forEach((ds) => {\r\n        const entityLabel = ds?.datasource?.entityLabel;\r\n    \r\n        if (!entityLabel || typeof entityLabel !== 'string') {\r\n            //console.warn('entityLabel inv√°lido:', entityLabel);\r\n            return; // pula este item do loop\r\n        }\r\n        \r\n        const firstName = entityLabel.split(/[¬∞¬™¬∫ ]/)[0].trim();\r\n    \r\n        if (!firstName) {\r\n            //console.log(firstName)\r\n            return; // pula se firstName estiver vazio\r\n        }\r\n        \r\n        if (!dataConfig[firstName]) {\r\n            dataConfig[firstName] = [];\r\n        }\r\n        \r\n        if (entityLabel.includes(\"Online\")) {\r\n            dataConfig[firstName].push(\"Online \"+ds.dataKey.label);\r\n        } else {\r\n            dataConfig[firstName].push(\"Comum \"+ds.dataKey.label);\r\n        } \r\n    });\r\n\r\n    //console.log(\"dataConfig\",dataConfig);\r\n  \r\n    cardsToRender.forEach(ds => {\r\n        try {\r\n      \r\n            const label = ds.datasource?.entityLabel;\r\n            const entityId = ds.datasource?.entityId;\r\n            const entityType = ds.datasource?.entityType;\r\n            const entityLabel = ds?.datasource?.entityLabel;\r\n            const andar = extractAndar(label);\r\n            const backGroundColor = ds.dataKey?.settings?.backGroundColor;\r\n            const isOnline = label.includes(\"Online\");\r\n            const state = isOnline ? settings.split : settings.self_contained;\r\n            const offlineImgToShow = isOnline ? offlineImg : arSelfContainedOfflineImg;\r\n            //console.log(\"entity\",entityLabel)\r\n            const firstNames = entityLabel.split(/[¬∞¬™¬∫ ]/)[0].trim();\r\n            let $card;\r\n    \r\n            if (entityLabel.includes(\"Online\")) {\r\n                const hasOnlineTemp = dataConfig[firstNames]?.includes(\"Online temperature\");\r\n                const hasOnlineConsumption = dataConfig[firstNames]?.includes(\"Online consumption\");\r\n    \r\n                if (hasOnlineTemp && hasOnlineConsumption) {\r\n                    if (entityLabel.includes(\"Temperatura\")) {\r\n                        return;\r\n                    } else {\r\n                        $card = createCard(label, entityId, entityType, state, offlineImgToShow, backGroundColor);\r\n                        ctx.entityMap[label] = { el: $card, label, temperature: null, consumption: null };\r\n                    }\r\n                } else {\r\n                    $card = createCard(label, entityId, entityType, state, noDevice, backGroundColor);\r\n                    ctx.entityMap[label] = { el: $card, label, temperature: null, consumption: null };\r\n                }\r\n            } else {\r\n                if (entityLabel.includes(\"Temperatura\")) {\r\n                    return;\r\n                } else {\r\n                    $card = createCard(label, entityId, entityType, state, offlineImgToShow, backGroundColor);\r\n                    ctx.entityMap[label] = { el: $card, label, temperature: null, consumption: null };\r\n                }\r\n            }\r\n\r\n\r\n            // agrupamento por contexto\r\n            if (andar) {\r\n                const contextKey = (isOnline ? 'sala_online_' : 'area_comum_') + andar;\r\n                ctx.contextIndexMap[contextKey] = ctx.contextIndexMap[contextKey] || [];\r\n                \r\n                if (!ctx.contextIndexMap[contextKey].includes(label)) {\r\n                    ctx.contextIndexMap[contextKey].push(label);\r\n                }\r\n            }\r\n\r\n            $main.append($card);\r\n        } catch (err) {\r\n            log('Erro ao renderizar card:', err);\r\n        }\r\n    });\r\n   \r\n  // clique nos cards\r\n    ctx.$container.on('click', '.device-card-centered', function (e) {\r\n        e.preventDefault();\r\n        const targetState = $(this).data('state');\r\n        const entityId = $(this).data('entity-id');\r\n        const entityType = $(this).data('entity-type');\r\n        \r\n        ctx.stateController.openState(targetState, {\r\n          entityId: { id: entityId, entityType }\r\n        }, false);\r\n    });\r\n};\r\n\r\nself.onDataUpdated = function () {\r\n  const ctx = self.ctx;\r\n\r\n  ctx.data.forEach(ds => {\r\n    //console.log(\"Blinking Air List With Consumption and Temperature - v.1.0.0 >>> \", ds);\r\n    \r\n    try {\r\n      const label = ds.datasource?.entityLabel;\r\n      const key = ds.dataKey?.name;\r\n      const val = ds.data?.[ds.data.length - 1]?.[1];\r\n      const isValidNumber = typeof val === 'number' && !isNaN(val);\r\n\r\n      if (key === 'temperature') {\r\n        const contextKey = extractContextKey(label);\r\n        const tempText = isValidNumber ? `${val.toFixed(2)}¬∞C` : '--¬∞C';\r\n        updateCardTemperature(ctx, contextKey, tempText);\r\n      }\r\n\r\n      if (key === 'consumption') {\r\n        updateCardConsumption(ctx, label, val);\r\n      }\r\n    } catch (err) {\r\n      log('Erro ao processar dados de atualiza√ß√£o:', err);\r\n    }\r\n  });\r\n};\r\n",
      "settingsSchema" : "{\r\n  \"schema\": {\r\n    \"type\": \"object\",\r\n    \"title\": \"Settings\",\r\n    \"properties\": {\r\n        \"self_contained\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de Ar Tipo Self Contained\",\r\n        \"default\": \"\"\r\n        },\r\n        \"split\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"State de Ar Tipo Split\",\r\n        \"default\": \"\"\r\n        },\r\n        \"threshold\":{\r\n        \"type\": \"string\",\r\n        \"title\": \"Potencia que configura o start do compressor\",\r\n        \"default\": \"\"\r\n        }\r\n    }\r\n  }\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "settingsDirective" : "",
      "dataKeySettingsDirective" : "",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Blinking Air List With Consumption and Temperature - v.2\",\"decimals\":null}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "baded100-46f2-11f0-9291-41f94c09a8a6"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}