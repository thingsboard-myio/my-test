{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "historico_geral_de_consumo_slaveid_energia_dev_DEV_VERSION",
    "name" : "Historico Geral de Consumo(SlaveID)(Energia)(PROD-DEV)",
    "deprecated" : false,
    "image" : "tb-image;/api/images/tenant/Capturar_(31).PNG",
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 14,
      "sizeY" : 11.5,
      "resources" : [ {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"
      }, {
        "url" : "https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
      } ],
      "templateHtml" : "<div class=\"wat\">\n    <header id=\"ReportHeader\">\n    <div>\n        <div id=\"myioHeader\">\n          <img src=\"https://myio.com.br/app/uploads/2020/05/Logotest01.png\" alt=\"Myio\" id=\"Myio\" />\n          <div id=\"myioTextHeader\">\n            <p>Sistema Myio</p>\n            <p>{{subtitle}}</p>\n            <p>Data de Emissão do Relatório CHECK : {{emissionDate}}<span id=\"issue-date\"></span></p>\n          </div>\n        </div>\n        <mat-form-field class=\"example-form-field hide-in-pdf\" appearance=\"fill\" style=\"margin-right: 16px; min-width: 180px;\">\n            <mat-label>Ordenar por</mat-label>\n                <mat-select [(value)]=\"selectedOrder\" (selectionChange)=\"handleManualSort($event.value)\">\n                <mat-option value=\"name-desc\">Loja ↑</mat-option>\n                <mat-option value=\"name-asc\">Loja ↓</mat-option>\n                <mat-option value=\"kWh-desc\">Leitura ↑</mat-option>\n                <mat-option value=\"kWh-asc\">Leitura ↓</mat-option>\n            </mat-select>\n        </mat-form-field>\n        <button class=\"hide-in-pdf button\" (click)=\"downloadPDF()\">\n            <i class=\"fa-solid fa-file-arrow-down\" style=\"color: #0a0a0a;\"></i>\n        </button>\n        <button class=\"hide-in-csv button\" (click)=\"downloadCSV()\">\n            <i class=\"fa-solid fa-file-csv\" style=\"color: #0a0a0a;\"></i>\n        </button>\n    </div>\n    \n   \n    \n    <div id=\"datePicker\">\n    <mat-form-field class=\"example-form-field hide-in-pdf\">\n      <mat-label>Selecione um intervalo</mat-label>\n      <mat-date-range-input [rangePicker]=\"rangePicker\">\n        <input matStartDate placeholder=\"Data Inicial\" \n               (dateChange)=\"handleStartDateChange($event)\">\n        <input matEndDate placeholder=\"Data Final\" \n               (dateChange)=\"handleEndDateChange($event)\">\n      </mat-date-range-input>\n      <mat-datepicker-toggle matIconSuffix [for]=\"rangePicker\"></mat-datepicker-toggle>\n      <mat-date-range-picker #rangePicker>\n        <mat-date-range-picker-actions>\n          <button mat-button matDateRangePickerCancel>Cancelar</button>\n          <button mat-raised-button matDateRangePickerApply>Selecionar</button>\n        </mat-date-range-picker-actions>\n      </mat-date-range-picker>\n    </mat-form-field>\n    </div>\n    </header>\n    <div id=\"main\" class=\"loading\" *ngIf=\"loading\">\n        <mat-progress-spinner mode=\"indeterminate\" color=\"accent\" style=\"width: 32px;\"></mat-progress-spinner>\n    </div>\n    <mat-table [dataSource]=\"dados\" matSort (matSortChange)=\"sortData($event)\" class=\"mat-elevation-z8\">\n      <ng-container matColumnDef=\"deviceName\">\n        <mat-header-cell *matHeaderCellDef>Loja</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{ row.name }}  </mat-cell>\n      </ng-container>\n      <ng-container matColumnDef=\"deviceId\">\n        <mat-header-cell *matHeaderCellDef>Identificador</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{ row.deviceId }}  </mat-cell>\n      </ng-container>\n      <ng-container matColumnDef=\"kWh\">\n        <mat-header-cell *matHeaderCellDef>Leitura</mat-header-cell>\n        <mat-cell *matCellDef=\"let row\"> {{ (row.kWh).toFixed(2) }} kWh </mat-cell>\n      </ng-container>\n      <mat-header-row *matHeaderRowDef=\"['deviceName', 'deviceId', 'kWh']\"></mat-header-row>\n      <mat-row *matRowDef=\"let row; columns: ['deviceName', 'deviceId', 'kWh']\"></mat-row>\n    </mat-table>\n    \n    <div *ngIf=\"dados?.length\" style=\"margin-top: 12px; font-weight: bold; text-align: center; background: #eee; padding: 8px;\">\n      Total de Consumo: {{ ctx.getTotalKwh() }} kWh\n    </div>\n</div>",
      "templateCss" : "#container {\r\n    overflow-y: auto;\r\n}\r\n\r\n#main.loading {\r\n    height: 100%;\r\n    width: 100%;\r\n    padding: 0;\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n}\r\n\r\n#Myio{\r\n    width: 150px;\r\n    background-color: #3e1a7d;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n}\r\n\r\n#ReportHeader{\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: flex-end;\r\n    padding: 5px;\r\n}\r\n#myioHeader{\r\n    display: flex;\r\n    padding: 5px; \r\n}\r\n#myioTextHeader{\r\n    display: flex;\r\n    flex-direction:column;\r\n    padding: 5px;\r\n}\r\n\r\np{\r\n    font-size: 13px;\r\n    margin: 0;\r\n    font-family: Roboto;\r\n}\r\n\r\n.button{\r\n    all: unset;\r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 8px;\r\n    right: 40px;\r\n}\r\n\r\n.example-form-field{\r\n    margin: 0;\r\n}\r\n.hide-in-csv.button{\r\n    right: 60px;\r\n}\r\n\r\n",
      "controllerScript" : "/* jshint esversion: 11 */\n\n// Constants\nconst PURPLE_COLOR = [92, 48, 125];\nconst STRIPE_COLOR = [245, 247, 250];\nconst PAGE_MARGIN = 10;\nconst LINE_HEIGHT = 10;\nconst LOGO_URL = 'https://dashboard.myio-bas.com/api/images/public/TAfpmF6jEKPDi6hXHbnMUT8MWOHv5lKD';\n\n// State management\nconst state = {\n    startDate: null,\n    endDate: null,\n    deviceNameLabelMap: {},\n    loading: false,\n    data: []\n};\n\n// Utility functions\nfunction formatDate(date) {\n    return new Date(date).toLocaleDateString('pt-BR');\n}\n\nfunction toFixed(value) {\n    if (value == null) return value;\n    return Number(value).toFixed(2);\n}\n\nfunction exportToCSV(reportData) {\n    if (!reportData?.length) {\n        alert('Erro: Nenhum dado disponível para exportar.');\n        return;\n    }\n    const rows = [\n        ['Loja', 'Identificador', 'Consumo']\n    ];\n    reportData.forEach(data => {\n        rows.push([\n            data.name || '-',\n            data.deviceId || '-',\n            data.kWh ? toFixed(data.kWh) : '0.00',\n        ]);\n    });\n    const csvContent = \"data:text/csv;charset=utf-8,\" + rows.map(e => e.join(\";\")).join(\"\\n\");\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodeURI(csvContent));\n    link.setAttribute(\"download\", `relatorio_consumo_${new Date().toISOString().slice(0,10)}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\nfunction exportToPDF(reportData, startDate, endDate) {\n    if (!reportData || !Array.isArray(reportData) || reportData.length === 0) {\n        alert('Erro: Nenhum dado disponível para exportar.');\n        return;\n    }\n\n    const doc = new window.jspdf.jsPDF();\n    const pageWidth = doc.internal.pageSize.width;\n    const pageHeight = doc.internal.pageSize.height;\n    const margin = 10;\n    const lineHeight = 10;\n    const purple = [92, 48, 125];\n\n    const colWidths = [\n        (pageWidth - 2 * margin) * 0.5,  // Loja\n        (pageWidth - 2 * margin) * 0.3,  // Identificador\n        (pageWidth - 2 * margin) * 0.2   // Leitura\n    ];\n\n    function addHeader() {\n        doc.setFillColor(...purple);\n        doc.rect(0, 0, pageWidth, 50, 'F');\n\n        const logoHeight = 25;\n        const logoWidth = Math.round(logoHeight * (512 / 194));\n        const logoX = 15;\n        const logoY = 12;\n\n        doc.addImage(LOGO_URL, 'PNG', logoX, logoY, logoWidth, logoHeight);\n\n        const textStartX = logoX + logoWidth + 20;\n        const availableWidth = pageWidth - textStartX - 15;\n        const textCenterX = textStartX + availableWidth / 2;\n\n        doc.setFontSize(12);\n        doc.setTextColor(255, 255, 255);\n        doc.text('Sistema Myio | Registro de Consumo Kwh', textCenterX, 15, { align: 'center' });\n        doc.text(`${self.ctx.$scope.subtitle || ''}`, textCenterX, 23, { align: 'center' });\n        doc.text(`Data de Emissão: ${formatDate(new Date())}`, textCenterX, 31, { align: 'center' });\n\n        const fromDate = new Date(startDate.getTime());\n        fromDate.setDate(fromDate.getDate());\n        const toDate = new Date(endDate.getTime());\n        toDate.setDate(toDate.getDate());\n\n        doc.text(`Período de ${fromDate.toLocaleDateString('pt-BR')} até ${toDate.toLocaleDateString('pt-BR')}`, textCenterX, 39, { align: 'center' });\n    }\n\n    function addTableHeader(startY) {\n        doc.setFillColor(...purple);\n        doc.rect(margin, startY, pageWidth - 2 * margin, lineHeight, 'F');\n\n        const headers = ['Loja', 'Identificador', 'Leitura'];\n        doc.setTextColor(255, 255, 255);\n        doc.setFontSize(10);\n\n        let x = margin;\n        headers.forEach((header, i) => {\n            doc.text(header, x + colWidths[i] / 2, startY + 7, { align: 'center' });\n            x += colWidths[i];\n        });\n    }\n\n    function addTableRow(rowData, startY, isStriped) {\n        if (isStriped) {\n            doc.setFillColor(...STRIPE_COLOR);\n            doc.rect(margin, startY, pageWidth - 2 * margin, lineHeight, 'F');\n        }\n\n        doc.setFontSize(9);\n        doc.setTextColor(0, 0, 0);\n\n        let x = margin;\n        rowData.forEach((text, i) => {\n            doc.text(String(text), x + colWidths[i] / 2, startY + 7, { align: 'center' });\n            x += colWidths[i];\n        });\n    }\n\n    addHeader();\n\n    let startY = 60;\n    let currentPage = 1;\n    addTableHeader(startY);\n    startY += lineHeight;\n\n    reportData.forEach((data, index) => {\n        if (startY > pageHeight - 20) {\n            doc.addPage();\n            currentPage += 1;\n            startY = 20;\n            addTableHeader(startY);\n            startY += lineHeight;\n        }\n\n        const rowData = [\n            data.name || '-',\n            data.deviceId || '-',\n            data.kWh != null ? `${toFixed(data.kWh)} kWh` : '-'\n        ];\n\n        addTableRow(rowData, startY, index % 2 === 0);\n        startY += lineHeight;\n    });\n    \n    \n    const totalKwh = reportData.reduce((sum, d) => sum + (d.kWh || 0), 0);\n    const totalRow = ['TOTAL', '', `${toFixed(totalKwh)} kWh`];\n    \n    // Se estiver muito perto do rodapé, adiciona nova página\n    if (startY > pageHeight - 30) {\n        doc.addPage();\n        startY = 20;\n        addTableHeader(startY);\n        startY += lineHeight;\n    }\n    \n    // Linha destacada\n    doc.setFillColor(230, 230, 230);\n    doc.rect(margin, startY, pageWidth - 2 * margin, lineHeight, 'F');\n    doc.setFontSize(10);\n    doc.setTextColor(0, 0, 0);\n    \n    let x = margin;\n    totalRow.forEach((text, i) => {\n      doc.text(String(text), x + colWidths[i] / 2, startY + 7, { align: 'center' });\n      x += colWidths[i];\n    });\n    \n\n    // Rodapé\n    doc.setFontSize(10);\n    doc.setTextColor(0, 0, 0);\n    const totalPages = doc.getNumberOfPages();\n    \n    for (let i = 1; i <= totalPages; i++) {\n      doc.setPage(i);\n      doc.setFontSize(10);\n      doc.setTextColor(0, 0, 0);\n      doc.text(`Página ${i} de ${totalPages}`, pageWidth / 2, pageHeight - 10, { align: 'center' });\n    }\n\n    doc.save(`relatorio_consumo_${new Date().toISOString().slice(0, 10)}.pdf`);\n}\n\n\nasync function getMultipleSlaveConsumption(centralId, slaveIds, startTs, endTs) {\n    const $http = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('http'));\n    const slaveIdsParam = encodeURIComponent(slaveIds);\n    console.log('[DEBUG] Will query for centralId:', centralId, 'with slaveIds:', slaveIds);\n    try {\n        const response = await $http.get(\n            `https://${centralId}.y.myio.com.br/api/dash_api/v3/consumption_per_device/${slaveIdsParam}/${startTs}/${endTs}`,\n            { timeout: 30000 }\n        ).toPromise();\n        console.log('[DEBUG] API Response for centralId', centralId, ':', response);\n        return response;\n    } catch (error) {\n        console.error('[DEBUG] Error fetching consumption data for centralId', centralId, error);\n        return [];\n    }\n}\n\nasync function processConsumptionData() {\n    console.log('[DEBUG] processConsumptionData called with startDate:', state.startDate, 'endDate:', state.endDate);\n    if (!state.startDate || !state.endDate) {\n        alert('Por favor, selecione datas de início e fim.');\n        return;\n    }\n    state.loading = true;\n    self.ctx.$scope.loading = true;\n    self.ctx.detectChanges();\n    try {\n        // 1. Build a map of entityId -> { centralId, slaveId, name, deviceId }\n        const deviceMap = {};\n        (self.ctx.data || []).forEach(item => {\n            const entityId = item?.datasource?.entityId;\n            if (!entityId) return;\n            if (!deviceMap[entityId]) {\n                deviceMap[entityId] = {\n                    name: item?.datasource?.entityLabel || '-',\n                    deviceId: undefined // will be set below if found\n                };\n            }\n            if (item.dataKey?.name === 'centralId') {\n                deviceMap[entityId].centralId = item?.data?.[0]?.[1];\n            }\n            if (item.dataKey?.name === 'slaveId') {\n                deviceMap[entityId].slaveId = item?.data?.[0]?.[1];\n            }\n            if (item.dataKey?.name === 'deviceId') {\n                deviceMap[entityId].deviceId = item?.data?.[0]?.[1];\n            }\n        });\n\n        // 2. Build the device list (only those with both IDs)\n        const deviceList = Object.values(deviceMap).filter(d => d.centralId && d.slaveId);\n        console.log('[DEBUG] deviceList with both IDs:', deviceList);\n\n        // 3. Group slaveIds by centralId\n        const grouped = {};\n        deviceList.forEach(device => {\n            if (!grouped[device.centralId]) grouped[device.centralId] = [];\n            grouped[device.centralId].push(device);\n        });\n\n        // 4. Query the API for each centralId\n        const allResults = await Promise.all(Object.entries(grouped).map(async ([centralId, devices]) => {\n            const slaveIds = devices.map(d => d.slaveId);\n            const adjustedEndDate = new Date(state.endDate);\n            adjustedEndDate.setHours(23, 59, 59, 999); // Set to end of the day\n            const response = await getMultipleSlaveConsumption(\n                centralId,\n                slaveIds,\n                state.startDate.getTime(),\n                adjustedEndDate.getTime() // Use adjusted end date timestamp\n            );\n            // Attach device info for mapping\n            return { centralId, response, devices };\n        }));\n\n        // 5. Map API results to device info for display/export\n        const processedData = allResults.flatMap(({response, devices}) => {\n            if (!Array.isArray(response)) return [];\n            return response.map(data => {\n                const slaveId = data?.slave_id || data?.slaveId;\n                const match = devices.find(d => d.slaveId == slaveId);\n                console.log('[DEBUG] match:', match);\n                return {\n                    kWh: data?.total_consumption_kwh || 0,\n                    name: match?.name || '-',\n                    deviceId: match?.deviceId || '-',\n                };\n            });\n        }).filter(Boolean);\n\n        self.ctx.$scope.dados = processedData;\n        if (self.ctx.$scope.sort) self.ctx.$scope.sort.update();\n        \n        if (self.ctx.$scope.selectedOrder && self.ctx.$scope.handleManualSort) {\n          self.ctx.$scope.handleManualSort(self.ctx.$scope.selectedOrder);\n        }\n    } catch (error) {\n        console.error('[DEBUG] Error in processConsumptionData:', error);\n    } finally {\n        state.loading = false;\n        self.ctx.$scope.loading = false;\n        self.ctx.detectChanges();\n    }\n}\n\nself.onInit = async function() {\n    console.log('[DEBUG] self.ctx:', self.ctx);\n  \n    self.ctx.$scope.emissionDate = formatDate(new Date());\n    self.ctx.$scope.handleStartDateChange = function(event) {\n        console.log('[DEBUG] handleStartDateChange called with event:', event);\n        state.startDate = new Date(event.value);\n        self.ctx.$scope.startDate = state.startDate;\n        if (state.startDate && state.endDate) processConsumptionData();\n    };\n    self.ctx.$scope.handleEndDateChange = function(event) {\n        console.log('[DEBUG] handleEndDateChange called with event:', event);\n        state.endDate = new Date(event.value);\n        self.ctx.$scope.endDate = state.endDate;\n        if (state.startDate && state.endDate) processConsumptionData();\n    };\n    self.ctx.$scope.downloadPDF = () => {\n        if (self.ctx.$scope.dados && self.ctx.$scope.dados.length > 0) {\n            exportToPDF(self.ctx.$scope.dados, self.ctx.$scope.startDate, self.ctx.$scope.endDate);\n        } else {\n            alert(\"Sem dados disponíveis para exportar.\");\n        }\n    };\n    self.ctx.$scope.downloadCSV = () => {\n        if (self.ctx.$scope.dados?.length) {\n            exportToCSV(self.ctx.$scope.dados);\n        } else {\n            alert(\"Sem dados disponíveis para exportar.\");\n        }\n    };\n    self.ctx.$scope.sortData = function(sort) {\n        console.log('[DEBUG] sortData called with:', sort);\n        if (!sort || !sort.active || sort.direction === '') return;\n        if (self.ctx.$scope.dados.length > 0) {\n            console.log('[DEBUG] keys of first row:', Object.keys(self.ctx.$scope.dados[0]));\n        }\n        console.log('[DEBUG] sort.active:', sort.active);\n        console.log('[DEBUG] dados before sort:', JSON.stringify(self.ctx.$scope.dados));\n    const propMap = {\n      deviceName: 'name',\n      deviceId: 'deviceId',\n      kWh: 'kWh'\n    };\n    \n    self.ctx.$scope.dados.sort((a, b) => {\n      const active = sort.active;\n      const dir = sort.direction === 'asc' ? 1 : -1;\n      const prop = propMap[active];\n    \n      if (!prop) return 0;\n    \n      let valueA = a[prop];\n      let valueB = b[prop];\n    \n      console.log(`[DEBUG] Sorting by '${active}' mapped to '${prop}'`);\n      console.log(`[DEBUG] Comparing: valueA (${valueA}) vs valueB (${valueB})`);\n    \n      if (typeof valueA === 'string') valueA = valueA.toLowerCase();\n      if (typeof valueB === 'string') valueB = valueB.toLowerCase();\n    \n      if (valueA < valueB) return -1 * dir;\n      if (valueA > valueB) return 1 * dir;\n      return 0;\n    });\n\n        // Force Angular to update the table by replacing the array reference\n        self.ctx.$scope.dados = [...self.ctx.$scope.dados];\n        console.log('[DEBUG] dados after sort:', JSON.stringify(self.ctx.$scope.dados));\n        self.ctx.detectChanges();\n    };\n    \n    \tself.ctx.$scope.selectedOrder = 'name-asc';\n\t\n\tself.ctx.$scope.handleManualSort = function (value) {\n\t\tconst [prop, dir] = value.split('-');\n\t\tconst direction = dir === 'asc' ? 1 : -1;\n\n\t\tconsole.log(`[DEBUG] Manual sort: ${prop} (${dir})`);\n\n\t\tself.ctx.$scope.dados.sort((a, b) => {\n\t\t\tlet valA = a[prop];\n\t\t\tlet valB = b[prop];\n\n\t\t\tif (typeof valA === 'string') valA = valA.toLowerCase();\n\t\t\tif (typeof valB === 'string') valB = valB.toLowerCase();\n\n\t\t\tif (valA < valB) return -1 * direction;\n\t\t\tif (valA > valB) return 1 * direction;\n\t\t\treturn 0;\n\t\t});\n\n\t\t// Atualiza visualmente\n\t\tself.ctx.$scope.dados = [...self.ctx.$scope.dados];\n\t\tself.ctx.detectChanges();\n\t};\n\t\n\tself.ctx.$scope.subtitle = \"Resumo de Energia Por Loja\";\n\t\n    self.ctx.getTotalKwh = function () {\n      return toFixed(\n        (self.ctx.$scope.dados || []).reduce((sum, d) => sum + (d.kWh || 0), 0)\n      );\n    };\t\n    \n    self.ctx.detectChanges();\n};\n\nself.onDataUpdated = function() {\n    self.ctx.detectChanges();\n};\n",
      "settingsSchema" : "{\r\n    \"schema\": {\r\n        \"type\": \"object\",\r\n        \"title\": \"Settings\",\r\n        \"properties\": {\r\n            \"subtitle\":{\r\n                \"type\":\"string\",\r\n                \"title\": \"Subtítulo do Relatorio\"\r\n            }\r\n        },\r\n        \"required\": [\"subtitle\"]\r\n    },\r\n    \"form\": [\r\n        \"subtitle\"\r\n    ]\r\n}",
      "dataKeySettingsSchema" : "{}\n",
      "hasBasicMode" : false,
      "defaultConfig" : "{\"showTitle\":false,\"backgroundColor\":\"#FFFFFF\",\"color\":\"rgb(0, 0, 0)\",\"padding\":\"8px\",\"settings\":{\"centralId\":\"6354365436543654-Sdvzs2f5dbv4z2sd5f4v3z6d\"},\"title\":\"Historico Geral de Consumo(SlaveID)(Energia)(DEV)\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"borderRadius\":\"10px\",\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"enableDataExport\":false,\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.25096343243849395,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000));\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}}}"
    },
    "externalId" : null,
    "resources" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "9d578ad0-30fb-11f0-8cbd-2b87fdb093e1"
    },
    "scada" : false,
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}